<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>VLSI</title>
    <link href="/notes/2024/10/13/vlsi/"/>
    <url>/notes/2024/10/13/vlsi/</url>
    
    <content type="html"><![CDATA[<p>Assert-High Swtich: 輸入邏輯 1 電路會 close，導通<br>Assert-Low Swtich: 輸入邏輯 0 電路會 close，導通 </p><h1 id="MOSFET"><a href="#MOSFET" class="headerlink" title="MOSFET"></a>MOSFET</h1><p>Metal + Oxide-Semiconductor Field Effect Transitor</p><p>N channel MOSFET (nFET) 是 assert-high switch，也稱 N-MOS<br>P channel MOSFET (pFET) 是 assert-low switch，也稱 P-MOS</p><h3 id="電壓對應-Boolean-值"><a href="#電壓對應-Boolean-值" class="headerlink" title="電壓對應 Boolean 值"></a>電壓對應 Boolean 值</h3><p>當電壓大於某個值，一律判斷成邏輯 1，小於某個值判斷成邏輯 0，中間的區域叫做 noise margin。noise margin 越小越容易誤判</p><h3 id="P-N-Junctions"><a href="#P-N-Junctions" class="headerlink" title="P-N Junctions"></a>P-N Junctions</h3><p>p-type 半導體電洞多，n-type 半導體電子多。兩者接在一起會讓電子電洞傾向互相吸引，然而實際上受到電廠影響，僅有少數電子電洞相吸。</p><p>P-N Junctions 的特性是，施加外加電壓後，<strong>電流只能從 P 端流向 N 端</strong>。當給予 P 端正電、給予 N 端負電，N 端的電子會受到正電吸引、P 端的電動會受到負電吸引，兩者都往反方向衝，產生 <strong>P 流向 N 的電流</strong>。然而如果我們是給 P 端負電、N 端正電，就不會有電流產生。</p><h2 id="nFET-nMOS"><a href="#nFET-nMOS" class="headerlink" title="nFET (nMOS)"></a>nFET (nMOS)</h2><p>Source 接地，Drain 給高電壓 ($V_{DD}$)<br>Source 和 Drain 都接到一個帶很多電子 (n) 的東西，然後整個 body 是 p 型半導體<br>Strong Logic 0, Weak Logic 1</p><h2 id="pFET-pMOS"><a href="#pFET-pMOS" class="headerlink" title="pFET (pMOS)"></a>pFET (pMOS)</h2><p>都跟 nFET 相反</p><h2 id="Gate-Level"><a href="#Gate-Level" class="headerlink" title="Gate Level"></a>Gate Level</h2><h3 id="Not-Gate"><a href="#Not-Gate" class="headerlink" title="Not Gate"></a>Not Gate</h3><p><img src="https://i.sstatic.net/DULlo.png" alt="not gate"></p><h1 id="我可以先把-Nand、Nor-之類的-用-pMOS、nMOS-的作法做出，記熟一點"><a href="#我可以先把-Nand、Nor-之類的-用-pMOS、nMOS-的作法做出，記熟一點" class="headerlink" title="我可以先把 Nand、Nor 之類的 用 pMOS、nMOS 的作法做出，記熟一點"></a>我可以先把 Nand、Nor 之類的 用 pMOS、nMOS 的作法做出，記熟一點</h1><p>一端是串聯、一端並聯</p><h1 id="Physics-Structure"><a href="#Physics-Structure" class="headerlink" title="Physics Structure"></a>Physics Structure</h1><h2 id="Add-more-layers"><a href="#Add-more-layers" class="headerlink" title="Add more layers"></a>Add more layers</h2><p>先加 insulating glass<br>再 CMP (chemical-mechanical planarization)，磨平<br>最後加上金屬層</p><p>low-k: 電容很快就充滿<br>critical path: 最長的那條，會用 low-k 來加速</p><h2 id="絕緣層"><a href="#絕緣層" class="headerlink" title="絕緣層"></a>絕緣層</h2><p>t_ox 如果越小，代表絕緣層厚度越小，因此上下的吸引力會越大，導致電容變大<br>A_g: 面積，w * L<br>1:15:20 current voltage equation 推導</p><p>active contact: metal to drain&#x2F;source<br>gate contact : metal to gate<br>via: metal to metal</p><h1 id="會考-IR-drop-是啥"><a href="#會考-IR-drop-是啥" class="headerlink" title="會考 IR drop 是啥"></a>會考 IR drop 是啥</h1><h1 id="會考-semantic-轉-layout、layout-轉-semantic"><a href="#會考-semantic-轉-layout、layout-轉-semantic" class="headerlink" title="會考 semantic 轉 layout、layout 轉 semantic"></a>會考 semantic 轉 layout、layout 轉 semantic</h1><p>先試試看畫出 inverter<br>Nor2 或 Nand2，然後要注意 3 個 input 版本的</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Graphcis Programming and Application Lecture Program 解析</title>
    <link href="/notes/2024/10/06/gpa-lecture-program/"/>
    <url>/notes/2024/10/06/gpa-lecture-program/</url>
    
    <content type="html"><![CDATA[<h1 id="Alienrain"><a href="#Alienrain" class="headerlink" title="Alienrain"></a>Alienrain</h1><h2 id="前置作業和-Shaders"><a href="#前置作業和-Shaders" class="headerlink" title="前置作業和 Shaders"></a>前置作業和 Shaders</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;../../Include/Common.h&quot;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> glm;<br><br><span class="hljs-function"><span class="hljs-type">static</span> <span class="hljs-keyword">inline</span> <span class="hljs-type">float</span> <span class="hljs-title">random_float</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">float</span> res;<br><span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> tmp;<br><br><span class="hljs-type">static</span> <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> seed = <span class="hljs-number">0x13371337</span>;<br>seed *= <span class="hljs-number">16807</span>;<br><br>tmp = seed ^ (seed &gt;&gt; <span class="hljs-number">4</span>) ^ (seed &lt;&lt; <span class="hljs-number">15</span>);<br><br>*((<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> *) &amp;res) = (tmp &gt;&gt; <span class="hljs-number">9</span>) | <span class="hljs-number">0x3F800000</span>;<br><br><span class="hljs-keyword">return</span> (res - <span class="hljs-number">1.0f</span>);<br>&#125;<br><br><br><span class="hljs-type">static</span> <span class="hljs-type">const</span> <span class="hljs-type">char</span> * vs_source[] =<br>&#123;<br><span class="hljs-string">&quot;#version 410 core                                                      \n&quot;</span><br><span class="hljs-string">&quot;                                                                       \n&quot;</span><br><span class="hljs-string">&quot;layout (location = 1) in int alien_index;                              \n&quot;</span><br><span class="hljs-string">&quot;                                                                       \n&quot;</span><br><span class="hljs-string">&quot;out VS_OUT                                                             \n&quot;</span><br><span class="hljs-string">&quot;&#123;                                                                      \n&quot;</span><br><span class="hljs-string">&quot;    flat int alien;                                                    \n&quot;</span><br><span class="hljs-string">&quot;    vec2 tc;                                                           \n&quot;</span><br><span class="hljs-string">&quot;&#125; vs_out;                                                              \n&quot;</span><br><span class="hljs-string">&quot;                                                                       \n&quot;</span><br><span class="hljs-string">&quot;layout(std140) uniform droplets                                        \n&quot;</span><br><span class="hljs-string">&quot;&#123;                                                                      \n&quot;</span><br><span class="hljs-string">&quot;    vec4 droplet[256];                                                 \n&quot;</span><br><span class="hljs-string">&quot;&#125;;                                                                     \n&quot;</span><br><span class="hljs-string">&quot;                                                                       \n&quot;</span><br><span class="hljs-string">&quot;void main(void)                                                        \n&quot;</span><br><span class="hljs-string">&quot;&#123;                                                                      \n&quot;</span><br><span class="hljs-string">&quot;    const vec2[4] position = vec2[4](vec2(-0.5, -0.5),                 \n&quot;</span><br><span class="hljs-string">&quot;                                     vec2( 0.5, -0.5),                 \n&quot;</span><br><span class="hljs-string">&quot;                                     vec2(-0.5,  0.5),                 \n&quot;</span><br><span class="hljs-string">&quot;                                     vec2( 0.5,  0.5));                \n&quot;</span><br>    <span class="hljs-string">&quot;    const vec2[4] texcoord = vec2[4](vec2(0, 0),                       \n&quot;</span><br>    <span class="hljs-string">&quot;                                     vec2(1, 0),                       \n&quot;</span><br>    <span class="hljs-string">&quot;                                     vec2(0, 1),                       \n&quot;</span><br>    <span class="hljs-string">&quot;                                     vec2(1, 1));                      \n&quot;</span><br>    <span class="hljs-string">&quot;    vs_out.tc = texcoord[gl_VertexID];                                 \n&quot;</span><br><span class="hljs-string">&quot;    float co = cos(droplet[alien_index].z);                            \n&quot;</span><br><span class="hljs-string">&quot;    float so = sin(droplet[alien_index].z);                            \n&quot;</span><br><span class="hljs-string">&quot;    mat2 rot = mat2(vec2(co, so),                                      \n&quot;</span><br><span class="hljs-string">&quot;                    vec2(-so, co));                                    \n&quot;</span><br><span class="hljs-string">&quot;    vec2 pos = 0.25 * rot * position[gl_VertexID];                     \n&quot;</span><br><span class="hljs-string">&quot;    gl_Position = vec4(pos + droplet[alien_index].xy, 0.5, 1.0);       \n&quot;</span><br><span class="hljs-string">&quot;    vs_out.alien = int(mod(float(alien_index), 64.0));          \n&quot;</span><br><span class="hljs-string">&quot;&#125;                                                                      \n&quot;</span><br>&#125;;<br><br><span class="hljs-type">static</span> <span class="hljs-type">const</span> <span class="hljs-type">char</span> * fs_source[] =<br>&#123;<br><span class="hljs-string">&quot;#version 410 core                                                      \n&quot;</span><br><span class="hljs-string">&quot;                                                                       \n&quot;</span><br><span class="hljs-string">&quot;layout (location = 0) out vec4 color;                                  \n&quot;</span> <span class="hljs-comment">// 輸出顏色的名字是可以隨便取的，重點是要在 location = 0 (預設也是)</span><br><span class="hljs-string">&quot;                                                                       \n&quot;</span><br><span class="hljs-string">&quot;in VS_OUT                                                              \n&quot;</span><br><span class="hljs-string">&quot;&#123;                                                                      \n&quot;</span><br><span class="hljs-string">&quot;    flat int alien;                                                    \n&quot;</span><br><span class="hljs-string">&quot;    vec2 tc;                                                           \n&quot;</span><br><span class="hljs-string">&quot;&#125; fs_in;                                                               \n&quot;</span><br><span class="hljs-string">&quot;                                                                       \n&quot;</span><br><span class="hljs-string">&quot;uniform sampler2DArray tex_aliens;                                     \n&quot;</span><br><span class="hljs-string">&quot;                                                                       \n&quot;</span><br><span class="hljs-string">&quot;void main(void)                                                        \n&quot;</span><br><span class="hljs-string">&quot;&#123;                                                                      \n&quot;</span><br><span class="hljs-string">&quot;    color = texture(tex_aliens, vec3(fs_in.tc, float(fs_in.alien)));   \n&quot;</span><br><span class="hljs-string">&quot;&#125;                                                                      \n&quot;</span><br>&#125;;<br><br>GLuint          program;<br>GLuint          vao;<br>GLuint          tex_alien_array;<br>GLuint          rain_buffer;<br><br><span class="hljs-type">float</span>           droplet_x_offset[<span class="hljs-number">256</span>];<br><span class="hljs-type">float</span>           droplet_rot_speed[<span class="hljs-number">256</span>];<br><span class="hljs-type">float</span>           droplet_fall_speed[<span class="hljs-number">256</span>];<br><br></code></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span> *argv[])</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">chdir</span>(__FILEPATH__);<br><br><span class="hljs-built_in">glutInit</span>(&amp;argc, argv); <span class="hljs-comment">// GLUT INIT，最一開始一定要</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> _MSC_VER <span class="hljs-comment">// 微軟的預設編譯器 (MS: Microsoft，C: C 語言， VER: Version)</span></span><br>    <span class="hljs-comment">// 要使用 RGBA color mode、Dobule-buffered 的 Window，還要啟動 Depth Buffer 來進行深度測試</span><br><span class="hljs-built_in">glutInitDisplayMode</span>(GLUT_RGBA | GLUT_DOUBLE | GLUT_DEPTH);<br><span class="hljs-meta">#<span class="hljs-keyword">else</span> <span class="hljs-comment">// 如果是用其他編譯器</span></span><br>    <span class="hljs-built_in">glutInitDisplayMode</span>(GLUT_3_2_CORE_PROFILE | GLUT_RGBA | GLUT_DOUBLE | GLUT_DEPTH); <span class="hljs-comment">//先不管 應該差不多</span><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><span class="hljs-built_in">glutInitWindowPosition</span>(<span class="hljs-number">100</span>, <span class="hljs-number">100</span>); <span class="hljs-comment">// 視窗出現的位置</span><br><span class="hljs-built_in">glutInitWindowSize</span>(<span class="hljs-number">600</span>, <span class="hljs-number">600</span>); <span class="hljs-comment">// 視窗的長寬</span><br><span class="hljs-built_in">glutCreateWindow</span>(__FILENAME__); <span class="hljs-comment">// 視窗的名稱（一定要這行！不然不能跑）</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> _MSC_VER </span><br><span class="hljs-built_in">glewInit</span>(); <span class="hljs-comment">// glew init</span><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br><span class="hljs-built_in">printGLContextInfo</span>(); <span class="hljs-comment">// custom function</span><br><span class="hljs-built_in">My_Init</span>(); <span class="hljs-comment">// custom function</span><br><br><span class="hljs-built_in">glutDisplayFunc</span>(My_Display); <span class="hljs-comment">// GLUT 的 callback function，也就是視窗顯示的東西</span><br><span class="hljs-built_in">glutReshapeFunc</span>(My_Reshape); <span class="hljs-comment">// 視窗 resize 會 call 的 function</span><br><br>    <span class="hljs-comment">// glutTimerFunc(msecs,(*func)(int value), int value);，</span><br><span class="hljs-built_in">glutTimerFunc</span>(<span class="hljs-number">16</span>, My_Timer, <span class="hljs-number">0</span>); <span class="hljs-comment">// 計時器，16 毫秒後會 call MY_Timer</span><br><br><span class="hljs-built_in">glutMainLoop</span>(); <span class="hljs-comment">// 進入 GLUT loop</span><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">My_Init</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">glClearColor</span>(<span class="hljs-number">1.0f</span>, <span class="hljs-number">1.0f</span>, <span class="hljs-number">1.0f</span>, <span class="hljs-number">1.0f</span>); <span class="hljs-comment">// 把視窗變成白色</span><br><span class="hljs-built_in">glEnable</span>(GL_DEPTH_TEST); <span class="hljs-comment">// 啟動深度測試</span><br><span class="hljs-built_in">glDepthFunc</span>(GL_LEQUAL); <span class="hljs-comment">// GL_LEQUAL: 如果新的片段的深度直 &lt;= 當前的片段深度值，那就可以蓋過去</span><br><br>program = <span class="hljs-built_in">glCreateProgram</span>(); <span class="hljs-comment">// 新增一個 shader program，回傳 GLuint ID</span><br>GLuint fs = <span class="hljs-built_in">glCreateShader</span>(GL_FRAGMENT_SHADER); <span class="hljs-comment">// 宣告他是 Fragment Shader</span><br><span class="hljs-built_in">glShaderSource</span>(fs, <span class="hljs-number">1</span>, fs_source, <span class="hljs-literal">NULL</span>); <span class="hljs-comment">// 寫入 shader 的內容</span><br><span class="hljs-built_in">glCompileShader</span>(fs); <span class="hljs-comment">// 把 shader 編譯成 GPU 可執行的程式 </span><br><br>GLuint vs = <span class="hljs-built_in">glCreateShader</span>(GL_VERTEX_SHADER); <br><span class="hljs-built_in">glShaderSource</span>(vs, <span class="hljs-number">1</span>, vs_source, <span class="hljs-literal">NULL</span>);<br><span class="hljs-built_in">glCompileShader</span>(vs);<br><br><span class="hljs-built_in">glAttachShader</span>(program, vs); <span class="hljs-comment">// 綁定到 shader program</span><br><span class="hljs-built_in">glAttachShader</span>(program, fs);<br>    <span class="hljs-built_in">printGLShaderLog</span>(vs); <span class="hljs-comment">// custom function，寫在 common.h 裡面</span><br>    <span class="hljs-built_in">printGLShaderLog</span>(fs);<br><br><span class="hljs-built_in">glLinkProgram</span>(program); <span class="hljs-comment">// link shader program</span><br><span class="hljs-built_in">glUseProgram</span>(program); <span class="hljs-comment">// 啟動這個 program</span><br><br><span class="hljs-built_in">glGenVertexArrays</span>(<span class="hljs-number">1</span>, &amp;vao); <span class="hljs-comment">// glGenVertexArrays( vao 數量, vao GLuint ID)，生成 vao</span><br><span class="hljs-built_in">glBindVertexArray</span>(vao); <span class="hljs-comment">// 綁定到 vao，這樣之後才能寫入 attribute，像是 glVertexAttribI1i(1, alien_index);</span><br><br>TextureData tex = <span class="hljs-built_in">loadImg</span>(<span class="hljs-string">&quot;../../Media/Textures/aliens.png&quot;</span>); <span class="hljs-comment">// custom function，回傳 TextureData，包含高、寬、字元</span><br><span class="hljs-built_in">glGenTextures</span>(<span class="hljs-number">1</span>, &amp;tex_alien_array); <span class="hljs-comment">// 生成 texture，寫 ID 到 text_alien_array</span><br><span class="hljs-built_in">glBindTexture</span>(GL_TEXTURE_2D_ARRAY, tex_alien_array); <span class="hljs-comment">// 綁定這個 ID，這邊用 GL_TEXTURE_2D_ARRAY，之後寫入宣告 GL_TEXTURE_2D_ARRAY 都會到對應的 ID</span><br><br>    <span class="hljs-comment">// glTexImage3D(target, mipnap level, internalformat, width, height, depth, border, format, type, * data);</span><br><span class="hljs-built_in">glTexImage3D</span>(GL_TEXTURE_2D_ARRAY, <span class="hljs-number">0</span>, GL_RGBA, <span class="hljs-number">256</span>, <span class="hljs-number">256</span>, <span class="hljs-number">64</span>, <span class="hljs-number">0</span>, GL_RGBA, GL_UNSIGNED_BYTE, tex.data); <span class="hljs-comment">// 這邊 tex.data 是 256 * 16384，一次全 load 到 3D image 節省效能</span><br><span class="hljs-built_in">glTexParameteri</span>(GL_TEXTURE_2D_ARRAY,GL_TEXTURE_MIN_FILTER,GL_LINEAR); <span class="hljs-comment">// 設定縮小時要用 線性內插 的方式生成</span><br>    <span class="hljs-built_in">glTexParameteri</span>(GL_TEXTURE_2D_ARRAY,GL_TEXTURE_MAG_FILTER,GL_LINEAR); <span class="hljs-comment">// 放大時也用 線性內插</span><br><span class="hljs-keyword">delete</span>[] tex.data;<br><br><span class="hljs-built_in">glGenBuffers</span>(<span class="hljs-number">1</span>, &amp;rain_buffer); <span class="hljs-comment">// 生成 buffer，綁到 rain_buffer 這個 ID</span><br><span class="hljs-built_in">glBindBuffer</span>(GL_UNIFORM_BUFFER, rain_buffer); <span class="hljs-comment">// 綁定 ID 是 GL_UNIFORM_BUFFER</span><br><br>    <span class="hljs-comment">// glBufferData(target, size, data, usage)</span><br><span class="hljs-built_in">glBufferData</span>(GL_UNIFORM_BUFFER, <span class="hljs-number">256</span> * <span class="hljs-built_in">sizeof</span>(vec4), <span class="hljs-literal">NULL</span>, GL_DYNAMIC_DRAW); <span class="hljs-comment">// 初始化這個 rain_buffer，</span><br><br>    <span class="hljs-comment">// glBindBufferBase(target,  index,  buffer);</span><br><span class="hljs-built_in">glBindBufferBase</span>(GL_UNIFORM_BUFFER, <span class="hljs-number">0</span>, rain_buffer); <span class="hljs-comment">// 連連看，buffer 連到 binding point index 0</span><br><br>    <span class="hljs-comment">// 初始化位置、旋轉、速度</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">256</span>; i++)<br>&#123;<br>droplet_x_offset[i] = <span class="hljs-built_in">random_float</span>() * <span class="hljs-number">2.0f</span> - <span class="hljs-number">1.0f</span>;<br>droplet_rot_speed[i] = (<span class="hljs-built_in">random_float</span>() + <span class="hljs-number">0.5f</span>) * ((i &amp; <span class="hljs-number">1</span>) ? <span class="hljs-number">-3.0f</span> : <span class="hljs-number">3.0f</span>);<br>droplet_fall_speed[i] = <span class="hljs-built_in">random_float</span>() + <span class="hljs-number">0.2f</span>;<br>&#125;<br><br><span class="hljs-built_in">glEnable</span>(GL_BLEND); <span class="hljs-comment">// 啟用混合功能，可以加入透明度</span><br><span class="hljs-built_in">glBlendFunc</span>(GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA); <span class="hljs-comment">//如何混合的，源顏色的值 * alpha，目標顏色的值 * (1- 源顏色 alpha)</span><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">// GLUT callback. Called to draw the scene.</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">My_Display</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">glClear</span>(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT); <span class="hljs-comment">// 清除顏色、深度</span><br><br><span class="hljs-type">float</span> currentTime = <span class="hljs-built_in">glutGet</span>(GLUT_ELAPSED_TIME) * <span class="hljs-number">0.001f</span>; <span class="hljs-comment">// glutGet(GLUT_ELAPSED_TIME) 可以得到程式從開始到現在的時間 (毫秒</span><br><br>    <span class="hljs-comment">// glMapBufferRange(target, offset, length, access)</span><br>    <span class="hljs-comment">// 這裡的 GL_UNIFORM_BUFFER 就是對應到前面寫的 rain_buffer</span><br>    <span class="hljs-comment">// GL_MAP_WRITE_BIT: 允許寫入 map 到的 memory </span><br>    <span class="hljs-comment">// GL_MAP_INVALIDATE_BUFFER_BIT: map 前的內容可以被捨棄</span><br>vec4 * droplet = (vec4 *)<span class="hljs-built_in">glMapBufferRange</span>(GL_UNIFORM_BUFFER, <span class="hljs-number">0</span>, <span class="hljs-number">256</span> * <span class="hljs-built_in">sizeof</span>(vec4), GL_MAP_WRITE_BIT | GL_MAP_INVALIDATE_BUFFER_BIT); <br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">256</span>; i++)<br>&#123;<br>droplet[i][<span class="hljs-number">0</span>] = droplet_x_offset[i];<br>        droplet[i][<span class="hljs-number">1</span>] = <span class="hljs-number">2.0f</span> - <span class="hljs-built_in">fmodf</span>((currentTime + <span class="hljs-built_in">float</span>(i)) * droplet_fall_speed[i], <span class="hljs-number">4.31f</span>);<br>        droplet[i][<span class="hljs-number">2</span>] = currentTime * droplet_rot_speed[i];<br>droplet[i][<span class="hljs-number">3</span>] = <span class="hljs-number">0.0f</span>; <span class="hljs-comment">// padding</span><br>&#125;<br><span class="hljs-built_in">glUnmapBuffer</span>(GL_UNIFORM_BUFFER); <span class="hljs-comment">// 提交到 GPU</span><br><br><span class="hljs-type">int</span> alien_index;<br><span class="hljs-keyword">for</span> (alien_index = <span class="hljs-number">0</span>; alien_index &lt; <span class="hljs-number">256</span>; alien_index++)<br>&#123;<br><span class="hljs-built_in">glVertexAttribI1i</span>(<span class="hljs-number">1</span>, alien_index); <span class="hljs-comment">// location = 1, </span><br><span class="hljs-built_in">glDrawArrays</span>(GL_TRIANGLE_STRIP, <span class="hljs-number">0</span>, <span class="hljs-number">4</span>); <span class="hljs-comment">// 從 0 開始畫四個 vertex</span><br>&#125;<br><br><span class="hljs-built_in">glutSwapBuffers</span>();<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">My_Reshape</span><span class="hljs-params">(<span class="hljs-type">int</span> width, <span class="hljs-type">int</span> height)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">glViewport</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, width, height);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">My_Timer</span><span class="hljs-params">(<span class="hljs-type">int</span> val)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">glutPostRedisplay</span>(); <span class="hljs-comment">// 重畫</span><br><span class="hljs-built_in">glutTimerFunc</span>(<span class="hljs-number">16</span>, My_Timer, val);<br>&#125;<br><br></code></pre></td></tr></table></figure><h1 id="Simple-Texture-Coords"><a href="#Simple-Texture-Coords" class="headerlink" title="Simple_Texture_Coords"></a>Simple_Texture_Coords</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;../../Include/Common.h&quot;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> glm;<br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br>GLuint          program;<br>GLuint          tex_object[<span class="hljs-number">2</span>];<br>GLuint          tex_index;<br><span class="hljs-type">int</span> index_count;<br><span class="hljs-type">int</span> vertex_count;<br><span class="hljs-keyword">struct</span><br>&#123;<br>    GLint       mv_matrix;<br>    GLint       proj_matrix;<br>&#125; uniforms;<br><br><span class="hljs-type">static</span> <span class="hljs-type">const</span> <span class="hljs-type">char</span> *render_fs_glsl[] = <br>&#123;<br>    <span class="hljs-string">&quot;#version 410 core                                            \n&quot;</span><br>    <span class="hljs-string">&quot;                                                             \n&quot;</span><br>    <span class="hljs-string">&quot;uniform sampler2D tex_object;                                \n&quot;</span><br>    <span class="hljs-string">&quot;                                                             \n&quot;</span><br>    <span class="hljs-string">&quot;in VS_OUT                                                    \n&quot;</span><br>    <span class="hljs-string">&quot;&#123;                                                            \n&quot;</span><br>    <span class="hljs-string">&quot;    vec2 tc;                                                 \n&quot;</span><br>    <span class="hljs-string">&quot;&#125; fs_in;                                                     \n&quot;</span><br>    <span class="hljs-string">&quot;                                                             \n&quot;</span><br>    <span class="hljs-string">&quot;out vec4 color;                                              \n&quot;</span><br>    <span class="hljs-string">&quot;                                                             \n&quot;</span><br>    <span class="hljs-string">&quot;void main(void)                                              \n&quot;</span><br>    <span class="hljs-string">&quot;&#123;                                                            \n&quot;</span><br>    <span class="hljs-string">&quot;    color = texture(tex_object, fs_in.tc * vec2(3.0, 1.0));  \n&quot;</span><br>    <span class="hljs-string">&quot;&#125;                                                            \n&quot;</span><br>&#125;;<br><br><span class="hljs-type">static</span> <span class="hljs-type">const</span> <span class="hljs-type">char</span> *render_vs_glsl[] = <br>&#123;<br>    <span class="hljs-string">&quot;#version 410 core                            \n&quot;</span><br>    <span class="hljs-string">&quot;                                             \n&quot;</span><br>    <span class="hljs-string">&quot;uniform mat4 mv_matrix;                      \n&quot;</span><br>    <span class="hljs-string">&quot;uniform mat4 proj_matrix;                    \n&quot;</span><br>    <span class="hljs-string">&quot;                                             \n&quot;</span><br>    <span class="hljs-string">&quot;layout (location = 0) in vec3 position;      \n&quot;</span><br>    <span class="hljs-string">&quot;layout (location = 1) in vec2 tc;            \n&quot;</span><br>    <span class="hljs-string">&quot;                                             \n&quot;</span><br>    <span class="hljs-string">&quot;out VS_OUT                                   \n&quot;</span><br>    <span class="hljs-string">&quot;&#123;                                            \n&quot;</span><br>    <span class="hljs-string">&quot;    vec2 tc;                                 \n&quot;</span><br>    <span class="hljs-string">&quot;&#125; vs_out;                                    \n&quot;</span><br>    <span class="hljs-string">&quot;                                             \n&quot;</span><br>    <span class="hljs-string">&quot;void main(void)                              \n&quot;</span><br>    <span class="hljs-string">&quot;&#123;                                            \n&quot;</span><br>    <span class="hljs-string">&quot;    vec4 pos_vs = mv_matrix * vec4(position, 1.0);      \n&quot;</span><br>    <span class="hljs-string">&quot;                                             \n&quot;</span><br>    <span class="hljs-string">&quot;    vs_out.tc = tc;                          \n&quot;</span><br>    <span class="hljs-string">&quot;                                             \n&quot;</span><br>    <span class="hljs-string">&quot;    gl_Position = proj_matrix * pos_vs;      \n&quot;</span><br>    <span class="hljs-string">&quot;&#125;                                            \n&quot;</span><br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">My_Init</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>program = <span class="hljs-built_in">glCreateProgram</span>();<br>GLuint fs = <span class="hljs-built_in">glCreateShader</span>(GL_FRAGMENT_SHADER);<br><span class="hljs-built_in">glShaderSource</span>(fs, <span class="hljs-number">1</span>, render_fs_glsl, <span class="hljs-literal">NULL</span>);<br><span class="hljs-built_in">glCompileShader</span>(fs);<br><br>GLuint vs = <span class="hljs-built_in">glCreateShader</span>(GL_VERTEX_SHADER);<br><span class="hljs-built_in">glShaderSource</span>(vs, <span class="hljs-number">1</span>, render_vs_glsl, <span class="hljs-literal">NULL</span>);<br><span class="hljs-built_in">glCompileShader</span>(vs);<br><br><span class="hljs-built_in">glAttachShader</span>(program, vs);<br><span class="hljs-built_in">glAttachShader</span>(program, fs);<br><span class="hljs-built_in">printGLShaderLog</span>(vs);<br><span class="hljs-built_in">printGLShaderLog</span>(fs);<br><br><span class="hljs-built_in">glLinkProgram</span>(program);<br><span class="hljs-built_in">glUseProgram</span>(program);<br><br>    uniforms.mv_matrix = <span class="hljs-built_in">glGetUniformLocation</span>(program, <span class="hljs-string">&quot;mv_matrix&quot;</span>);<br>    uniforms.proj_matrix = <span class="hljs-built_in">glGetUniformLocation</span>(program, <span class="hljs-string">&quot;proj_matrix&quot;</span>);<br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> B 0x00, 0x00, 0x00, 0x00</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> W 0xFF, 0xFF, 0xFF, 0xFF</span><br>    <span class="hljs-type">static</span> <span class="hljs-type">const</span> GLubyte tex_data[] =<br>    &#123;<br>        B, W, B, W, B, W, B, W, B, W, B, W, B, W, B, W,<br>        W, B, W, B, W, B, W, B, W, B, W, B, W, B, W, B,<br>        B, W, B, W, B, W, B, W, B, W, B, W, B, W, B, W,<br>        W, B, W, B, W, B, W, B, W, B, W, B, W, B, W, B,<br>        B, W, B, W, B, W, B, W, B, W, B, W, B, W, B, W,<br>        W, B, W, B, W, B, W, B, W, B, W, B, W, B, W, B,<br>        B, W, B, W, B, W, B, W, B, W, B, W, B, W, B, W,<br>        W, B, W, B, W, B, W, B, W, B, W, B, W, B, W, B,<br>        B, W, B, W, B, W, B, W, B, W, B, W, B, W, B, W,<br>        W, B, W, B, W, B, W, B, W, B, W, B, W, B, W, B,<br>        B, W, B, W, B, W, B, W, B, W, B, W, B, W, B, W,<br>        W, B, W, B, W, B, W, B, W, B, W, B, W, B, W, B,<br>        B, W, B, W, B, W, B, W, B, W, B, W, B, W, B, W,<br>        W, B, W, B, W, B, W, B, W, B, W, B, W, B, W, B,<br>        B, W, B, W, B, W, B, W, B, W, B, W, B, W, B, W,<br>        W, B, W, B, W, B, W, B, W, B, W, B, W, B, W, B,<br>    &#125;;<br><span class="hljs-meta">#<span class="hljs-keyword">undef</span> B</span><br><span class="hljs-meta">#<span class="hljs-keyword">undef</span> W</span><br><br>    <span class="hljs-built_in">glGenTextures</span>(<span class="hljs-number">1</span>, &amp;tex_object[<span class="hljs-number">0</span>]);<br>    <span class="hljs-built_in">glBindTexture</span>(GL_TEXTURE_2D, tex_object[<span class="hljs-number">0</span>]);<br>    <span class="hljs-built_in">glTexImage2D</span>(GL_TEXTURE_2D, <span class="hljs-number">0</span>, GL_RGB, <span class="hljs-number">16</span>, <span class="hljs-number">16</span>, <span class="hljs-number">0</span>, GL_RGBA, GL_UNSIGNED_BYTE, <span class="hljs-number">0</span>);<br>    <span class="hljs-built_in">glTexSubImage2D</span>(GL_TEXTURE_2D, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">16</span>, <span class="hljs-number">16</span>, GL_RGBA, GL_UNSIGNED_BYTE, tex_data);<br>    <span class="hljs-built_in">glTexParameteri</span>(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_NEAREST);<br>    <span class="hljs-built_in">glTexParameteri</span>(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_NEAREST);<br><br>    TextureData tex = <span class="hljs-built_in">loadImg</span>(<span class="hljs-string">&quot;../../Media/Textures/pattern1.png&quot;</span>);<br><span class="hljs-built_in">glGenTextures</span>(<span class="hljs-number">1</span>, &amp;tex_object[<span class="hljs-number">1</span>]);<br><span class="hljs-built_in">glBindTexture</span>(GL_TEXTURE_2D, tex_object[<span class="hljs-number">1</span>]);<br><span class="hljs-built_in">glTexImage2D</span>(GL_TEXTURE_2D, <span class="hljs-number">0</span>, GL_RGBA, tex.width, tex.height, <span class="hljs-number">0</span>, GL_RGBA, GL_UNSIGNED_BYTE, tex.data);<br><span class="hljs-built_in">glTexParameteri</span>(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_NEAREST);<br>    <span class="hljs-built_in">glTexParameteri</span>(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_NEAREST);<br><br>vector&lt;MeshData&gt; meshes;<br>meshes = <span class="hljs-built_in">loadObj</span>(<span class="hljs-string">&quot;../../Media/Objects/torus_nrms_tc.obj&quot;</span>);<br><br>GLuint vao;<br><span class="hljs-built_in">glGenVertexArrays</span>(<span class="hljs-number">1</span>, &amp;vao);<br><span class="hljs-built_in">glBindVertexArray</span>(vao);<br><br>GLuint position_buffer;<br>GLuint texcoord_buffer;<br>GLuint index_buffer;<br><br><span class="hljs-built_in">glGenBuffers</span>(<span class="hljs-number">1</span>, &amp;position_buffer);<br><span class="hljs-built_in">glBindBuffer</span>(GL_ARRAY_BUFFER, position_buffer);<br><span class="hljs-built_in">glBufferData</span>(GL_ARRAY_BUFFER, meshes[<span class="hljs-number">0</span>].positions.<span class="hljs-built_in">size</span>() * <span class="hljs-built_in">sizeof</span>(<span class="hljs-type">float</span>), meshes[<span class="hljs-number">0</span>].positions.<span class="hljs-built_in">data</span>(), GL_STATIC_DRAW);<br><br><br><span class="hljs-comment">// glVertexAttribPointer(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const void * pointer);</span><br><span class="hljs-comment">// index: attribute 位置 (location = 0)</span><br><span class="hljs-comment">// size: vec3</span><br><span class="hljs-built_in">glVertexAttribPointer</span>(<span class="hljs-number">0</span>, <span class="hljs-number">3</span>, GL_FLOAT, GL_FALSE, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>); <br><span class="hljs-built_in">glEnableVertexAttribArray</span>(<span class="hljs-number">0</span>); <span class="hljs-comment">// 啟動</span><br><br>vertex_count = meshes[<span class="hljs-number">0</span>].positions.<span class="hljs-built_in">size</span>() / <span class="hljs-number">3</span>;<br><br><span class="hljs-built_in">glGenBuffers</span>(<span class="hljs-number">1</span>, &amp;texcoord_buffer);<br><span class="hljs-built_in">glBindBuffer</span>(GL_ARRAY_BUFFER, texcoord_buffer);<br><span class="hljs-built_in">glBufferData</span>(GL_ARRAY_BUFFER, meshes[<span class="hljs-number">0</span>].texcoords.<span class="hljs-built_in">size</span>() * <span class="hljs-built_in">sizeof</span>(<span class="hljs-type">float</span>), meshes[<span class="hljs-number">0</span>].texcoords.<span class="hljs-built_in">data</span>(), GL_STATIC_DRAW);<br><span class="hljs-built_in">glVertexAttribPointer</span>(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, GL_FLOAT, GL_FALSE, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>);<br><span class="hljs-built_in">glEnableVertexAttribArray</span>(<span class="hljs-number">1</span>);<br><br><span class="hljs-built_in">glGenBuffers</span>(<span class="hljs-number">1</span>, &amp;index_buffer);<br><span class="hljs-built_in">glBindBuffer</span>(GL_ELEMENT_ARRAY_BUFFER, index_buffer);<br><span class="hljs-built_in">glBufferData</span>(GL_ELEMENT_ARRAY_BUFFER, meshes[<span class="hljs-number">0</span>].indices.<span class="hljs-built_in">size</span>() * <span class="hljs-built_in">sizeof</span>(<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span>), meshes[<span class="hljs-number">0</span>].indices.<span class="hljs-built_in">data</span>(), GL_STATIC_DRAW);<br>index_count = meshes[<span class="hljs-number">0</span>].indices.<span class="hljs-built_in">size</span>();<br><br>    <span class="hljs-built_in">glEnable</span>(GL_DEPTH_TEST);<br>    <span class="hljs-built_in">glDepthFunc</span>(GL_LEQUAL);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">My_Display</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">static</span> <span class="hljs-type">const</span> GLfloat gray[] = &#123; <span class="hljs-number">0.2f</span>, <span class="hljs-number">0.2f</span>, <span class="hljs-number">0.2f</span>, <span class="hljs-number">1.0f</span> &#125;;<br>    <span class="hljs-type">static</span> <span class="hljs-type">const</span> GLfloat ones[] = &#123; <span class="hljs-number">1.0f</span> &#125;;<br><br>    <span class="hljs-built_in">glClearBufferfv</span>(GL_COLOR, <span class="hljs-number">0</span>, gray);<br>    <span class="hljs-built_in">glClearBufferfv</span>(GL_DEPTH, <span class="hljs-number">0</span>, ones);<br><br><span class="hljs-type">float</span> currentTime = <span class="hljs-built_in">glutGet</span>(GLUT_ELAPSED_TIME) * <span class="hljs-number">0.001f</span>;<br><br>    <span class="hljs-built_in">glBindTexture</span>(GL_TEXTURE_2D, tex_object[tex_index]);<br><br>    <span class="hljs-built_in">glUseProgram</span>(program);<br><br>    mat4 proj_matrix = <span class="hljs-built_in">perspective</span>(<span class="hljs-built_in">deg2rad</span>(<span class="hljs-number">60.0f</span>), <span class="hljs-number">1.0f</span>, <span class="hljs-number">0.1f</span>, <span class="hljs-number">1000.0f</span>);<br>    mat4 mv_matrix = <span class="hljs-built_in">translate</span>(<span class="hljs-built_in">mat4</span>(<span class="hljs-number">1.0f</span>), <span class="hljs-built_in">vec3</span>(<span class="hljs-number">0.0f</span>, <span class="hljs-number">0.0f</span>, <span class="hljs-number">-3.0f</span>)) *<br>                            <span class="hljs-built_in">rotate</span>(<span class="hljs-built_in">mat4</span>(<span class="hljs-number">1.0f</span>), <span class="hljs-built_in">deg2rad</span>((<span class="hljs-type">float</span>)currentTime * <span class="hljs-number">19.3f</span>), <span class="hljs-built_in">vec3</span>(<span class="hljs-number">0.0f</span>, <span class="hljs-number">1.0f</span>, <span class="hljs-number">0.0f</span>)) *<br>                            <span class="hljs-built_in">rotate</span>(<span class="hljs-built_in">mat4</span>(<span class="hljs-number">1.0f</span>), <span class="hljs-built_in">deg2rad</span>((<span class="hljs-type">float</span>)currentTime * <span class="hljs-number">21.1f</span>), <span class="hljs-built_in">vec3</span>(<span class="hljs-number">0.0f</span>, <span class="hljs-number">0.0f</span>, <span class="hljs-number">1.0f</span>));<br><br>    <span class="hljs-built_in">glUniformMatrix4fv</span>(uniforms.mv_matrix, <span class="hljs-number">1</span>, GL_FALSE, &amp;mv_matrix[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>]);<br>    <span class="hljs-built_in">glUniformMatrix4fv</span>(uniforms.proj_matrix, <span class="hljs-number">1</span>, GL_FALSE, &amp;proj_matrix[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>]);<br><br><span class="hljs-comment">// glDrawArrays or glDrawElements</span><br><span class="hljs-comment">// glDrawArrays(GL_TRIANGLES, 0, vertex_count);</span><br><span class="hljs-comment">// void glDrawElements(GLenum mode, GLsizei count, GLenum type, const void * indices);</span><br><span class="hljs-comment">// 告訴 shader 要抓哪些點組成三角形，index_count 每三個會一組</span><br>    <span class="hljs-built_in">glDrawElements</span>(GL_TRIANGLES, index_count, GL_UNSIGNED_INT, <span class="hljs-number">0</span>);<br><br><span class="hljs-built_in">glutSwapBuffers</span>();<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">My_Keyboard</span><span class="hljs-params">(<span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> key, <span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">switch</span> (key)<br>    &#123;<br>        <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;T&#x27;</span>:<br><span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;t&#x27;</span>:<br>            tex_index++;<br>            <span class="hljs-keyword">if</span> (tex_index &gt; <span class="hljs-number">1</span>)<br>                tex_index = <span class="hljs-number">0</span>;<br><span class="hljs-built_in">glutPostRedisplay</span>();<br>            <span class="hljs-keyword">break</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">My_Reshape</span><span class="hljs-params">(<span class="hljs-type">int</span> width, <span class="hljs-type">int</span> height)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">glViewport</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, width, height);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">My_Timer</span><span class="hljs-params">(<span class="hljs-type">int</span> val)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">glutPostRedisplay</span>();<br><span class="hljs-built_in">glutTimerFunc</span>(<span class="hljs-number">16</span>, My_Timer, val);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span> *argv[])</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">// Change working directory to source code path</span><br>    <span class="hljs-built_in">chdir</span>(__FILEPATH__);<br><span class="hljs-comment">// Initialize GLUT and GLEW, then create a window.</span><br><span class="hljs-comment">////////////////////</span><br><span class="hljs-built_in">glutInit</span>(&amp;argc, argv);<br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> _MSC_VER</span><br>    <span class="hljs-built_in">glutInitDisplayMode</span>(GLUT_RGBA | GLUT_DOUBLE | GLUT_DEPTH);<br><span class="hljs-meta">#<span class="hljs-keyword">else</span></span><br>    <span class="hljs-built_in">glutInitDisplayMode</span>(GLUT_3_2_CORE_PROFILE | GLUT_RGBA | GLUT_DOUBLE | GLUT_DEPTH);<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><span class="hljs-built_in">glutInitWindowPosition</span>(<span class="hljs-number">100</span>, <span class="hljs-number">100</span>);<br><span class="hljs-built_in">glutInitWindowSize</span>(<span class="hljs-number">600</span>, <span class="hljs-number">600</span>);<br><span class="hljs-built_in">glutCreateWindow</span>(__FILENAME__); <span class="hljs-comment">// You cannot use OpenGL functions before this line; The OpenGL context must be created first by glutCreateWindow()!</span><br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> _MSC_VER</span><br><span class="hljs-built_in">glewInit</span>();<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><span class="hljs-built_in">printGLContextInfo</span>();<br><span class="hljs-built_in">My_Init</span>();<br><span class="hljs-comment">////////////////////</span><br><br><span class="hljs-comment">// Register GLUT callback functions.</span><br><span class="hljs-comment">///////////////////////////////</span><br><span class="hljs-built_in">glutDisplayFunc</span>(My_Display);<br><span class="hljs-built_in">glutReshapeFunc</span>(My_Reshape);<br><span class="hljs-built_in">glutKeyboardFunc</span>(My_Keyboard);<br><span class="hljs-built_in">glutTimerFunc</span>(<span class="hljs-number">16</span>, My_Timer, <span class="hljs-number">0</span>);<br><span class="hljs-comment">///////////////////////////////</span><br><br><span class="hljs-comment">// Enter main event loop.</span><br><span class="hljs-comment">//////////////</span><br><span class="hljs-built_in">glutMainLoop</span>();<br><span class="hljs-comment">//////////////</span><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="Simple-Texture"><a href="#Simple-Texture" class="headerlink" title="Simple Texture"></a>Simple Texture</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;../../Include/Common.h&quot;</span></span><br><br><span class="hljs-type">static</span> <span class="hljs-type">const</span> <span class="hljs-type">char</span> * vs_source[] =<br>&#123;<br><span class="hljs-string">&quot;#version 410 core                                                              \n&quot;</span><br><span class="hljs-string">&quot;                                                                               \n&quot;</span><br><span class="hljs-string">&quot;void main(void)                                                                \n&quot;</span><br><span class="hljs-string">&quot;&#123;                                                                              \n&quot;</span><br><span class="hljs-string">&quot;    const vec4 vertices[] = vec4[](vec4( 0.75, -0.75, 0.5, 1.0),               \n&quot;</span><br><span class="hljs-string">&quot;                                   vec4(-0.75, -0.75, 0.5, 1.0),               \n&quot;</span><br><span class="hljs-string">&quot;                                   vec4( 0.75,  0.75, 0.5, 1.0));              \n&quot;</span><br><span class="hljs-string">&quot;                                                                               \n&quot;</span><br><span class="hljs-string">&quot;    gl_Position = vertices[gl_VertexID];                                       \n&quot;</span><br><span class="hljs-string">&quot;&#125;                                                                              \n&quot;</span><br>&#125;;<br><br><span class="hljs-type">static</span> <span class="hljs-type">const</span> <span class="hljs-type">char</span> * fs_source[] =<br>&#123;<br><span class="hljs-string">&quot;#version 410 core                                                              \n&quot;</span><br><span class="hljs-string">&quot;                                                                               \n&quot;</span><br><span class="hljs-string">&quot;uniform sampler2D s;                                                           \n&quot;</span><br><span class="hljs-string">&quot;                                                                               \n&quot;</span><br><span class="hljs-string">&quot;out vec4 color;                                                                \n&quot;</span><br><span class="hljs-string">&quot;                                                                               \n&quot;</span><br><span class="hljs-string">&quot;void main(void)                                                                \n&quot;</span><br><span class="hljs-string">&quot;&#123;                                                                              \n&quot;</span><br><span class="hljs-string">&quot;    color = texelFetch(s, ivec2(gl_FragCoord.xy) - ivec2(75, 75), 0);          \n&quot;</span><br><span class="hljs-string">&quot;&#125;                                                                              \n&quot;</span><br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">generate_texture</span><span class="hljs-params">(<span class="hljs-type">float</span> * data, <span class="hljs-type">int</span> width, <span class="hljs-type">int</span> height)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">int</span> x, y;<br><br><span class="hljs-keyword">for</span> (y = <span class="hljs-number">0</span>; y &lt; height; y++)<br>&#123;<br><span class="hljs-keyword">for</span> (x = <span class="hljs-number">0</span>; x &lt; width; x++)<br>&#123;<br>data[(y * width + x) * <span class="hljs-number">4</span> + <span class="hljs-number">0</span>] = (<span class="hljs-type">float</span>)((x &amp; y) &amp; <span class="hljs-number">0xFF</span>) / <span class="hljs-number">255.0f</span>;<br>data[(y * width + x) * <span class="hljs-number">4</span> + <span class="hljs-number">1</span>] = (<span class="hljs-type">float</span>)((x | y) &amp; <span class="hljs-number">0xFF</span>) / <span class="hljs-number">255.0f</span>;<br>data[(y * width + x) * <span class="hljs-number">4</span> + <span class="hljs-number">2</span>] = (<span class="hljs-type">float</span>)((x ^ y) &amp; <span class="hljs-number">0xFF</span>) / <span class="hljs-number">255.0f</span>;<br>data[(y * width + x) * <span class="hljs-number">4</span> + <span class="hljs-number">3</span>] = <span class="hljs-number">1.0f</span>;<br>&#125;<br>&#125;<br>&#125;<br><br>GLuint          program;<br>GLuint          vao;<br>GLuinttexture;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">My_Init</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">glClearColor</span>(<span class="hljs-number">1.0f</span>, <span class="hljs-number">1.0f</span>, <span class="hljs-number">1.0f</span>, <span class="hljs-number">1.0f</span>);<br><span class="hljs-built_in">glEnable</span>(GL_DEPTH_TEST);<br><span class="hljs-built_in">glDepthFunc</span>(GL_LEQUAL);<br><br><span class="hljs-comment">// Generate a name for the texture</span><br><span class="hljs-built_in">glGenTextures</span>(<span class="hljs-number">1</span>, &amp;texture);<br><br><span class="hljs-comment">// Now bind it to the context using the GL_TEXTURE_2D binding point</span><br><span class="hljs-built_in">glBindTexture</span>(GL_TEXTURE_2D, texture);<br><br><span class="hljs-comment">// Define some data to upload into the texture</span><br><span class="hljs-type">float</span> * data = <span class="hljs-keyword">new</span> <span class="hljs-type">float</span>[<span class="hljs-number">450</span> * <span class="hljs-number">450</span> * <span class="hljs-number">4</span>];<br><br><span class="hljs-comment">// generate_texture() is a function that fills memory with image data</span><br><span class="hljs-built_in">generate_texture</span>(data, <span class="hljs-number">450</span>, <span class="hljs-number">450</span>);<br><br><span class="hljs-comment">// Assume the texture is already bound to the GL_TEXTURE_2D target</span><br><span class="hljs-built_in">glTexImage2D</span>(GL_TEXTURE_2D,  <span class="hljs-comment">// 2D texture</span><br><span class="hljs-number">0</span>,              <span class="hljs-comment">// Level 0</span><br>GL_RGBA,<br><span class="hljs-number">450</span>, <span class="hljs-number">450</span>,       <span class="hljs-comment">// 450 x 450 texels, replace entire image</span><br>        <span class="hljs-number">0</span>,<br>GL_RGBA,        <span class="hljs-comment">// Four channel data</span><br>GL_FLOAT,       <span class="hljs-comment">// Floating point data</span><br>data);          <span class="hljs-comment">// Pointer to data</span><br>    <br>    <span class="hljs-built_in">glTexParameteri</span>(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR);<br>    <span class="hljs-built_in">glTexParameteri</span>(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR);<br><br><span class="hljs-comment">// Free the memory we allocated before - \GL now has our data</span><br><span class="hljs-keyword">delete</span> [] data;<br><br>program = <span class="hljs-built_in">glCreateProgram</span>();<br>GLuint fs = <span class="hljs-built_in">glCreateShader</span>(GL_FRAGMENT_SHADER);<br><span class="hljs-built_in">glShaderSource</span>(fs, <span class="hljs-number">1</span>, fs_source, <span class="hljs-literal">NULL</span>);<br><span class="hljs-built_in">glCompileShader</span>(fs);<br><br>GLuint vs = <span class="hljs-built_in">glCreateShader</span>(GL_VERTEX_SHADER);<br><span class="hljs-built_in">glShaderSource</span>(vs, <span class="hljs-number">1</span>, vs_source, <span class="hljs-literal">NULL</span>);<br><span class="hljs-built_in">glCompileShader</span>(vs);<br><br><span class="hljs-built_in">glAttachShader</span>(program, vs);<br><span class="hljs-built_in">glAttachShader</span>(program, fs);<br>    <span class="hljs-built_in">printGLShaderLog</span>(vs);<br>    <span class="hljs-built_in">printGLShaderLog</span>(fs);<br><br><span class="hljs-built_in">glLinkProgram</span>(program);<br><br><span class="hljs-built_in">glGenVertexArrays</span>(<span class="hljs-number">1</span>, &amp;vao);<br><span class="hljs-built_in">glBindVertexArray</span>(vao);<br>&#125;<br><br><span class="hljs-comment">// GLUT callback. Called to draw the scene.</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">My_Display</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">glClear</span>(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);<br><span class="hljs-type">static</span> <span class="hljs-type">const</span> GLfloat green[] = &#123; <span class="hljs-number">0.0f</span>, <span class="hljs-number">0.25f</span>, <span class="hljs-number">0.0f</span>, <span class="hljs-number">1.0f</span> &#125;;<br><span class="hljs-built_in">glClearBufferfv</span>(GL_COLOR, <span class="hljs-number">0</span>, green);<br><span class="hljs-built_in">glUseProgram</span>(program);<br><br><span class="hljs-built_in">glDrawArrays</span>(GL_TRIANGLES, <span class="hljs-number">0</span>, <span class="hljs-number">3</span>);<br><br><span class="hljs-built_in">glutSwapBuffers</span>();<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">My_Reshape</span><span class="hljs-params">(<span class="hljs-type">int</span> width, <span class="hljs-type">int</span> height)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">glViewport</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, width, height);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span> *argv[])</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">// Change working directory to source code path</span><br>    <span class="hljs-built_in">chdir</span>(__FILEPATH__);<br><span class="hljs-comment">// Initialize GLUT and GLEW, then create a window.</span><br><span class="hljs-comment">////////////////////</span><br><span class="hljs-built_in">glutInit</span>(&amp;argc, argv);<br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> _MSC_VER</span><br>    <span class="hljs-built_in">glutInitDisplayMode</span>(GLUT_RGBA | GLUT_DOUBLE | GLUT_DEPTH);<br><span class="hljs-meta">#<span class="hljs-keyword">else</span></span><br>    <span class="hljs-built_in">glutInitDisplayMode</span>(GLUT_3_2_CORE_PROFILE | GLUT_RGBA | GLUT_DOUBLE | GLUT_DEPTH);<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><span class="hljs-built_in">glutInitWindowPosition</span>(<span class="hljs-number">100</span>, <span class="hljs-number">100</span>);<br><span class="hljs-built_in">glutInitWindowSize</span>(<span class="hljs-number">600</span>, <span class="hljs-number">600</span>);<br><span class="hljs-built_in">glutCreateWindow</span>(__FILENAME__); <span class="hljs-comment">// You cannot use OpenGL functions before this line; The OpenGL context must be created first by glutCreateWindow()!</span><br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> _MSC_VER</span><br><span class="hljs-built_in">glewInit</span>();<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><span class="hljs-built_in">printGLContextInfo</span>();<br><span class="hljs-built_in">My_Init</span>();<br><span class="hljs-comment">////////////////////</span><br><br><span class="hljs-comment">// Register GLUT callback functions.</span><br><span class="hljs-comment">///////////////////////////////</span><br><span class="hljs-built_in">glutDisplayFunc</span>(My_Display);<br><span class="hljs-built_in">glutReshapeFunc</span>(My_Reshape);<br><span class="hljs-comment">///////////////////////////////</span><br><br><span class="hljs-comment">// Enter main event loop.</span><br><span class="hljs-comment">//////////////</span><br><span class="hljs-built_in">glutMainLoop</span>();<br><span class="hljs-comment">//////////////</span><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="Single-Triangle-Buffer"><a href="#Single-Triangle-Buffer" class="headerlink" title="Single Triangle Buffer"></a>Single Triangle Buffer</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;../../Include/Common.h&quot;</span></span><br><br><span class="hljs-type">static</span> <span class="hljs-type">const</span> <span class="hljs-type">char</span> * vs_source[] =<br>&#123;<br><span class="hljs-string">&quot;#version 410                                                   \n&quot;</span><br><span class="hljs-string">&quot;                                                                  \n&quot;</span><br><span class="hljs-string">&quot;layout(location = 0) in vec3 iv3vertex;                           \n&quot;</span><br><span class="hljs-string">&quot;layout(location = 1) in vec3 iv3color;                            \n&quot;</span><br><span class="hljs-string">&quot;                                                                  \n&quot;</span><br><span class="hljs-string">&quot;out vec3 vv3color;                                                \n&quot;</span><br><span class="hljs-string">&quot;                                                                  \n&quot;</span><br><span class="hljs-string">&quot;void main(void)                                                   \n&quot;</span><br><span class="hljs-string">&quot;&#123;                                                                 \n&quot;</span><br><span class="hljs-string">&quot;    gl_Position = vec4(iv3vertex, 1.0);                           \n&quot;</span><br><span class="hljs-string">&quot;    vv3color = iv3color;                                          \n&quot;</span><br><span class="hljs-string">&quot;&#125;                                                                 \n&quot;</span><br>&#125;;<br><br><span class="hljs-type">static</span> <span class="hljs-type">const</span> <span class="hljs-type">char</span> * fs_source[] =<br>&#123;<br><span class="hljs-string">&quot;#version 410                                               \n&quot;</span><br><span class="hljs-string">&quot;                                                                  \n&quot;</span><br><span class="hljs-string">&quot;in vec3 vv3color;                                                 \n&quot;</span><br><span class="hljs-string">&quot;                                                                  \n&quot;</span><br><span class="hljs-string">&quot;layout(location = 0) out vec4 fragColor;                          \n&quot;</span><br><span class="hljs-string">&quot;                                                                  \n&quot;</span><br><span class="hljs-string">&quot;void main(void)                                                   \n&quot;</span><br><span class="hljs-string">&quot;&#123;                                                                 \n&quot;</span><br><span class="hljs-string">&quot;    fragColor = vec4(vv3color, 1.0);                              \n&quot;</span><br><span class="hljs-string">&quot;&#125;                                                                 \n&quot;</span><br>&#125;;<br><br>GLuint program;<br>GLuint vao;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">My_Init</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">glClearColor</span>(<span class="hljs-number">1.0f</span>, <span class="hljs-number">1.0f</span>, <span class="hljs-number">1.0f</span>, <span class="hljs-number">1.0f</span>);<br><span class="hljs-built_in">glEnable</span>(GL_DEPTH_TEST);<br><span class="hljs-built_in">glDepthFunc</span>(GL_LEQUAL);<br><br>program = <span class="hljs-built_in">glCreateProgram</span>();<br>GLuint fs = <span class="hljs-built_in">glCreateShader</span>(GL_FRAGMENT_SHADER);<br><span class="hljs-built_in">glShaderSource</span>(fs, <span class="hljs-number">1</span>, fs_source, <span class="hljs-literal">NULL</span>);<br><span class="hljs-built_in">glCompileShader</span>(fs);<br><br>GLuint vs = <span class="hljs-built_in">glCreateShader</span>(GL_VERTEX_SHADER);<br><span class="hljs-built_in">glShaderSource</span>(vs, <span class="hljs-number">1</span>, vs_source, <span class="hljs-literal">NULL</span>);<br><span class="hljs-built_in">glCompileShader</span>(vs);<br><br><span class="hljs-built_in">glAttachShader</span>(program, vs);<br><span class="hljs-built_in">glAttachShader</span>(program, fs);<br><br><span class="hljs-built_in">glLinkProgram</span>(program);<br><br><span class="hljs-built_in">glGenVertexArrays</span>(<span class="hljs-number">1</span>, &amp;vao);<br><span class="hljs-built_in">glBindVertexArray</span>(vao);<br>    <br>    GLuint buffer;<br>    <span class="hljs-built_in">glGenBuffers</span>(<span class="hljs-number">1</span>, &amp;buffer);<br>    <span class="hljs-built_in">glBindBuffer</span>(GL_ARRAY_BUFFER, buffer);<br><span class="hljs-type">const</span> <span class="hljs-type">float</span> data[<span class="hljs-number">18</span>] =<br>&#123;<br><span class="hljs-number">-0.5f</span>, <span class="hljs-number">-0.4f</span>, <span class="hljs-number">0.0f</span>,<span class="hljs-comment">//Position</span><br> <span class="hljs-number">0.5f</span>, <span class="hljs-number">-0.4f</span>, <span class="hljs-number">0.0f</span>,<br> <span class="hljs-number">0.0f</span>,  <span class="hljs-number">0.6f</span>, <span class="hljs-number">0.0f</span>,<br><br> <span class="hljs-number">1.0f</span>,  <span class="hljs-number">0.0f</span>, <span class="hljs-number">0.0f</span>,<span class="hljs-comment">//Color</span><br> <span class="hljs-number">0.0f</span>,  <span class="hljs-number">1.0f</span>, <span class="hljs-number">0.0f</span>,<br> <span class="hljs-number">0.0f</span>,  <span class="hljs-number">0.0f</span>, <span class="hljs-number">1.0f</span><br>&#125;;<br><br><span class="hljs-built_in">glBufferData</span>(GL_ARRAY_BUFFER, <span class="hljs-built_in">sizeof</span>(data), data, GL_STATIC_DRAW);<br><br><span class="hljs-built_in">glVertexAttribPointer</span>(<span class="hljs-number">0</span>, <span class="hljs-number">3</span>, GL_FLOAT, GL_FALSE, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>);<br><span class="hljs-built_in">glVertexAttribPointer</span>(<span class="hljs-number">1</span>, <span class="hljs-number">3</span>, GL_FLOAT, GL_FALSE, <span class="hljs-number">0</span>, (<span class="hljs-type">void</span>*)(<span class="hljs-built_in">sizeof</span>(<span class="hljs-type">float</span>) * <span class="hljs-number">9</span>));<span class="hljs-comment">//offset</span><br><br><span class="hljs-built_in">glEnableVertexAttribArray</span>(<span class="hljs-number">0</span>);<br><span class="hljs-built_in">glEnableVertexAttribArray</span>(<span class="hljs-number">1</span>);<br>&#125;<br><br><span class="hljs-comment">// GLUT callback. Called to draw the scene.</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">My_Display</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">glClear</span>(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);<br><span class="hljs-built_in">glUseProgram</span>(program);<br>    <span class="hljs-built_in">glDrawArrays</span>(GL_TRIANGLES, <span class="hljs-number">0</span>, <span class="hljs-number">3</span>);<br>    <span class="hljs-built_in">glutSwapBuffers</span>();<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">My_Reshape</span><span class="hljs-params">(<span class="hljs-type">int</span> width, <span class="hljs-type">int</span> height)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">glViewport</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, width, height);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span> *argv[])</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">// Change working directory to source code path</span><br>    <span class="hljs-built_in">chdir</span>(__FILEPATH__);<br><span class="hljs-comment">// Initialize GLUT and GLEW, then create a window.</span><br><span class="hljs-comment">////////////////////</span><br><span class="hljs-built_in">glutInit</span>(&amp;argc, argv);<br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> _MSC_VER</span><br>    <span class="hljs-built_in">glutInitDisplayMode</span>(GLUT_RGBA | GLUT_DOUBLE | GLUT_DEPTH);<br><span class="hljs-meta">#<span class="hljs-keyword">else</span></span><br>    <span class="hljs-built_in">glutInitDisplayMode</span>(GLUT_3_2_CORE_PROFILE | GLUT_RGBA | GLUT_DOUBLE | GLUT_DEPTH);<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><span class="hljs-built_in">glutInitWindowPosition</span>(<span class="hljs-number">100</span>, <span class="hljs-number">100</span>);<br><span class="hljs-built_in">glutInitWindowSize</span>(<span class="hljs-number">600</span>, <span class="hljs-number">600</span>);<br><span class="hljs-built_in">glutCreateWindow</span>(__FILENAME__); <span class="hljs-comment">// You cannot use OpenGL functions before this line; The OpenGL context must be created first by glutCreateWindow()!</span><br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> _MSC_VER</span><br><span class="hljs-built_in">glewInit</span>();<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><span class="hljs-built_in">printGLContextInfo</span>();<br><span class="hljs-built_in">My_Init</span>();<br><span class="hljs-comment">////////////////////</span><br><br><span class="hljs-comment">// Register GLUT callback functions.</span><br><span class="hljs-comment">///////////////////////////////</span><br><span class="hljs-built_in">glutDisplayFunc</span>(My_Display);<br><span class="hljs-built_in">glutReshapeFunc</span>(My_Reshape);<br><span class="hljs-comment">///////////////////////////////</span><br><br><span class="hljs-comment">// Enter main event loop.</span><br><span class="hljs-comment">//////////////</span><br><span class="hljs-built_in">glutMainLoop</span>();<br><span class="hljs-comment">//////////////</span><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="Spinning-Cube"><a href="#Spinning-Cube" class="headerlink" title="Spinning Cube"></a>Spinning Cube</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;../../Include/Common.h&quot;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> glm;<br><br><span class="hljs-type">static</span> <span class="hljs-type">const</span> <span class="hljs-type">char</span> * vs_source[] =<br>&#123;<br><span class="hljs-string">&quot;#version 410 core                                                  \n&quot;</span><br><span class="hljs-string">&quot;                                                                   \n&quot;</span><br><span class="hljs-string">&quot;in vec4 position;                                                  \n&quot;</span><br><span class="hljs-string">&quot;                                                                   \n&quot;</span><br><span class="hljs-string">&quot;out VS_OUT                                                         \n&quot;</span><br><span class="hljs-string">&quot;&#123;                                                                  \n&quot;</span><br><span class="hljs-string">&quot;    vec4 color;                                                    \n&quot;</span><br><span class="hljs-string">&quot;&#125; vs_out;                                                          \n&quot;</span><br><span class="hljs-string">&quot;                                                                   \n&quot;</span><br><span class="hljs-string">&quot;uniform mat4 mv_matrix;                                            \n&quot;</span><br><span class="hljs-string">&quot;uniform mat4 proj_matrix;                                          \n&quot;</span><br><span class="hljs-string">&quot;                                                                   \n&quot;</span><br><span class="hljs-string">&quot;void main(void)                                                    \n&quot;</span><br><span class="hljs-string">&quot;&#123;                                                                  \n&quot;</span><br><span class="hljs-string">&quot;    gl_Position = proj_matrix * mv_matrix * position;              \n&quot;</span><br><span class="hljs-string">&quot;    vs_out.color = position * 2.0 + vec4(0.5, 0.5, 0.5, 0.0);      \n&quot;</span><br><span class="hljs-string">&quot;&#125;                                                                  \n&quot;</span><br>&#125;;<br><br><span class="hljs-type">static</span> <span class="hljs-type">const</span> <span class="hljs-type">char</span> * fs_source[] =<br>&#123;<br><span class="hljs-string">&quot;#version 410 core                                                  \n&quot;</span><br><span class="hljs-string">&quot;                                                                   \n&quot;</span><br><span class="hljs-string">&quot;out vec4 color;                                                    \n&quot;</span><br><span class="hljs-string">&quot;                                                                   \n&quot;</span><br><span class="hljs-string">&quot;in VS_OUT                                                          \n&quot;</span><br><span class="hljs-string">&quot;&#123;                                                                  \n&quot;</span><br><span class="hljs-string">&quot;    vec4 color;                                                    \n&quot;</span><br><span class="hljs-string">&quot;&#125; fs_in;                                                           \n&quot;</span><br><span class="hljs-string">&quot;                                                                   \n&quot;</span><br><span class="hljs-string">&quot;void main(void)                                                    \n&quot;</span><br><span class="hljs-string">&quot;&#123;                                                                  \n&quot;</span><br><span class="hljs-string">&quot;    color = fs_in.color;                                           \n&quot;</span><br><span class="hljs-string">&quot;&#125;                                                                  \n&quot;</span><br>&#125;;<br><br><span class="hljs-type">static</span> <span class="hljs-type">const</span> GLfloat vertex_positions[] =<br>&#123;<br><span class="hljs-number">-0.25f</span>,  <span class="hljs-number">0.25f</span>, <span class="hljs-number">-0.25f</span>,<br><span class="hljs-number">-0.25f</span>, <span class="hljs-number">-0.25f</span>, <span class="hljs-number">-0.25f</span>,<br><span class="hljs-number">0.25f</span>, <span class="hljs-number">-0.25f</span>, <span class="hljs-number">-0.25f</span>,<br><br><span class="hljs-number">0.25f</span>, <span class="hljs-number">-0.25f</span>, <span class="hljs-number">-0.25f</span>,<br><span class="hljs-number">0.25f</span>,  <span class="hljs-number">0.25f</span>, <span class="hljs-number">-0.25f</span>,<br><span class="hljs-number">-0.25f</span>,  <span class="hljs-number">0.25f</span>, <span class="hljs-number">-0.25f</span>,<br><br><span class="hljs-number">0.25f</span>, <span class="hljs-number">-0.25f</span>, <span class="hljs-number">-0.25f</span>,<br><span class="hljs-number">0.25f</span>, <span class="hljs-number">-0.25f</span>,  <span class="hljs-number">0.25f</span>,<br><span class="hljs-number">0.25f</span>,  <span class="hljs-number">0.25f</span>, <span class="hljs-number">-0.25f</span>,<br><br><span class="hljs-number">0.25f</span>, <span class="hljs-number">-0.25f</span>,  <span class="hljs-number">0.25f</span>,<br><span class="hljs-number">0.25f</span>,  <span class="hljs-number">0.25f</span>,  <span class="hljs-number">0.25f</span>,<br><span class="hljs-number">0.25f</span>,  <span class="hljs-number">0.25f</span>, <span class="hljs-number">-0.25f</span>,<br><br><span class="hljs-number">0.25f</span>, <span class="hljs-number">-0.25f</span>,  <span class="hljs-number">0.25f</span>,<br><span class="hljs-number">-0.25f</span>, <span class="hljs-number">-0.25f</span>,  <span class="hljs-number">0.25f</span>,<br><span class="hljs-number">0.25f</span>,  <span class="hljs-number">0.25f</span>,  <span class="hljs-number">0.25f</span>,<br><br><span class="hljs-number">-0.25f</span>, <span class="hljs-number">-0.25f</span>,  <span class="hljs-number">0.25f</span>,<br><span class="hljs-number">-0.25f</span>,  <span class="hljs-number">0.25f</span>,  <span class="hljs-number">0.25f</span>,<br><span class="hljs-number">0.25f</span>,  <span class="hljs-number">0.25f</span>,  <span class="hljs-number">0.25f</span>,<br><br><span class="hljs-number">-0.25f</span>, <span class="hljs-number">-0.25f</span>,  <span class="hljs-number">0.25f</span>,<br><span class="hljs-number">-0.25f</span>, <span class="hljs-number">-0.25f</span>, <span class="hljs-number">-0.25f</span>,<br><span class="hljs-number">-0.25f</span>,  <span class="hljs-number">0.25f</span>,  <span class="hljs-number">0.25f</span>,<br><br><span class="hljs-number">-0.25f</span>, <span class="hljs-number">-0.25f</span>, <span class="hljs-number">-0.25f</span>,<br><span class="hljs-number">-0.25f</span>,  <span class="hljs-number">0.25f</span>, <span class="hljs-number">-0.25f</span>,<br><span class="hljs-number">-0.25f</span>,  <span class="hljs-number">0.25f</span>,  <span class="hljs-number">0.25f</span>,<br><br><span class="hljs-number">-0.25f</span>, <span class="hljs-number">-0.25f</span>,  <span class="hljs-number">0.25f</span>,<br><span class="hljs-number">0.25f</span>, <span class="hljs-number">-0.25f</span>,  <span class="hljs-number">0.25f</span>,<br><span class="hljs-number">0.25f</span>, <span class="hljs-number">-0.25f</span>, <span class="hljs-number">-0.25f</span>,<br><br><span class="hljs-number">0.25f</span>, <span class="hljs-number">-0.25f</span>, <span class="hljs-number">-0.25f</span>,<br><span class="hljs-number">-0.25f</span>, <span class="hljs-number">-0.25f</span>, <span class="hljs-number">-0.25f</span>,<br><span class="hljs-number">-0.25f</span>, <span class="hljs-number">-0.25f</span>,  <span class="hljs-number">0.25f</span>,<br><br><span class="hljs-number">-0.25f</span>,  <span class="hljs-number">0.25f</span>, <span class="hljs-number">-0.25f</span>,<br><span class="hljs-number">0.25f</span>,  <span class="hljs-number">0.25f</span>, <span class="hljs-number">-0.25f</span>,<br><span class="hljs-number">0.25f</span>,  <span class="hljs-number">0.25f</span>,  <span class="hljs-number">0.25f</span>,<br><br><span class="hljs-number">0.25f</span>,  <span class="hljs-number">0.25f</span>,  <span class="hljs-number">0.25f</span>,<br><span class="hljs-number">-0.25f</span>,  <span class="hljs-number">0.25f</span>,  <span class="hljs-number">0.25f</span>,<br><span class="hljs-number">-0.25f</span>,  <span class="hljs-number">0.25f</span>, <span class="hljs-number">-0.25f</span><br>&#125;;<br><br>GLuint          program;<br>GLuint          vao;<br>GLuint          buffer;<br>GLint           mv_location;<br>GLint           proj_location;<br><span class="hljs-function">mat4 <span class="hljs-title">proj_matrix</span><span class="hljs-params">(<span class="hljs-number">1.0f</span>)</span></span>;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">My_Init</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">glClearColor</span>(<span class="hljs-number">1.0f</span>, <span class="hljs-number">1.0f</span>, <span class="hljs-number">1.0f</span>, <span class="hljs-number">1.0f</span>);<br><span class="hljs-built_in">glEnable</span>(GL_DEPTH_TEST);<br><span class="hljs-built_in">glDepthFunc</span>(GL_LEQUAL);<br><br>program = <span class="hljs-built_in">glCreateProgram</span>();<br>GLuint fs = <span class="hljs-built_in">glCreateShader</span>(GL_FRAGMENT_SHADER);<br><span class="hljs-built_in">glShaderSource</span>(fs, <span class="hljs-number">1</span>, fs_source, <span class="hljs-literal">NULL</span>);<br><span class="hljs-built_in">glCompileShader</span>(fs);<br><br>GLuint vs = <span class="hljs-built_in">glCreateShader</span>(GL_VERTEX_SHADER);<br><span class="hljs-built_in">glShaderSource</span>(vs, <span class="hljs-number">1</span>, vs_source, <span class="hljs-literal">NULL</span>);<br><span class="hljs-built_in">glCompileShader</span>(vs);<br><br><span class="hljs-built_in">glAttachShader</span>(program, vs);<br><span class="hljs-built_in">glAttachShader</span>(program, fs);<br><br><span class="hljs-built_in">glLinkProgram</span>(program);<br><br><span class="hljs-built_in">glGenVertexArrays</span>(<span class="hljs-number">1</span>, &amp;vao);<br><span class="hljs-built_in">glBindVertexArray</span>(vao);<br><br><span class="hljs-built_in">glGenBuffers</span>(<span class="hljs-number">1</span>, &amp;buffer);<br><span class="hljs-built_in">glBindBuffer</span>(GL_ARRAY_BUFFER, buffer);<br><span class="hljs-built_in">glBufferData</span>(GL_ARRAY_BUFFER, <span class="hljs-built_in">sizeof</span>(vertex_positions), vertex_positions, GL_STATIC_DRAW);<br><br><span class="hljs-built_in">glVertexAttribPointer</span>(<span class="hljs-number">0</span>, <span class="hljs-number">3</span>, GL_FLOAT, GL_FALSE, <span class="hljs-number">0</span>, <span class="hljs-literal">NULL</span>);<br><span class="hljs-built_in">glEnableVertexAttribArray</span>(<span class="hljs-number">0</span>);<br><br><span class="hljs-built_in">glEnable</span>(GL_CULL_FACE);<br><span class="hljs-built_in">glFrontFace</span>(GL_CW);<br><br>mv_location = <span class="hljs-built_in">glGetUniformLocation</span>(program, <span class="hljs-string">&quot;mv_matrix&quot;</span>);<br>proj_location = <span class="hljs-built_in">glGetUniformLocation</span>(program, <span class="hljs-string">&quot;proj_matrix&quot;</span>);<br>&#125;<br><br><span class="hljs-comment">// GLUT callback. Called to draw the scene.</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">My_Display</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">static</span> <span class="hljs-type">const</span> GLfloat green[] = &#123; <span class="hljs-number">0.0f</span>, <span class="hljs-number">0.25f</span>, <span class="hljs-number">0.0f</span>, <span class="hljs-number">1.0f</span> &#125;;<br><span class="hljs-type">static</span> <span class="hljs-type">const</span> GLfloat one = <span class="hljs-number">1.0f</span>;<br><span class="hljs-built_in">glClearBufferfv</span>(GL_COLOR, <span class="hljs-number">0</span>, green);<br><span class="hljs-built_in">glClearBufferfv</span>(GL_DEPTH, <span class="hljs-number">0</span>, &amp;one);<br><br><span class="hljs-built_in">glUseProgram</span>(program);<br><br><span class="hljs-built_in">glUniformMatrix4fv</span>(proj_location, <span class="hljs-number">1</span>, GL_FALSE, &amp;proj_matrix[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>]);<br><br><span class="hljs-function">mat4 <span class="hljs-title">Identy_Init</span><span class="hljs-params">(<span class="hljs-number">1.0f</span>)</span></span>;<br><span class="hljs-type">float</span> currentTime = <span class="hljs-built_in">glutGet</span>(GLUT_ELAPSED_TIME) * <span class="hljs-number">0.001f</span>;<br>mat4 mv_matrix = <span class="hljs-built_in">translate</span>(Identy_Init, <span class="hljs-built_in">vec3</span>(<span class="hljs-number">0.0f</span>, <span class="hljs-number">0.0f</span>, <span class="hljs-number">-4.0f</span>));<br>    mv_matrix = <span class="hljs-built_in">translate</span>(mv_matrix, <span class="hljs-built_in">vec3</span>(<span class="hljs-built_in">sinf</span>(<span class="hljs-number">2.1f</span> * currentTime) * <span class="hljs-number">0.5f</span>, <span class="hljs-built_in">cosf</span>(<span class="hljs-number">1.7f</span> * currentTime) * <span class="hljs-number">0.5f</span>,<span class="hljs-built_in">sinf</span>(<span class="hljs-number">1.3f</span> * currentTime) * <span class="hljs-built_in">cosf</span>(<span class="hljs-number">1.5f</span> * currentTime) * <span class="hljs-number">2.0f</span>));<br>mv_matrix = <span class="hljs-built_in">rotate</span>(mv_matrix, <span class="hljs-built_in">deg2rad</span>(currentTime * <span class="hljs-number">45.0f</span>), <span class="hljs-built_in">vec3</span>(<span class="hljs-number">0.0f</span>, <span class="hljs-number">1.0f</span>, <span class="hljs-number">0.0f</span>));<br>mv_matrix = <span class="hljs-built_in">rotate</span>(mv_matrix, <span class="hljs-built_in">deg2rad</span>(currentTime * <span class="hljs-number">81.0f</span>), <span class="hljs-built_in">vec3</span>(<span class="hljs-number">1.0f</span>, <span class="hljs-number">0.0f</span>, <span class="hljs-number">0.0f</span>));<br><span class="hljs-built_in">glUniformMatrix4fv</span>(mv_location, <span class="hljs-number">1</span>, GL_FALSE, &amp;mv_matrix[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>]);<br><br><span class="hljs-built_in">glDrawArrays</span>(GL_TRIANGLES, <span class="hljs-number">0</span>, <span class="hljs-number">36</span>);<br><span class="hljs-built_in">glutSwapBuffers</span>();<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">My_Reshape</span><span class="hljs-params">(<span class="hljs-type">int</span> width, <span class="hljs-type">int</span> height)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">glViewport</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, width, height);<br><br><span class="hljs-type">float</span> viewportAspect = (<span class="hljs-type">float</span>)width / (<span class="hljs-type">float</span>)height;<br>proj_matrix = <span class="hljs-built_in">perspective</span>(<span class="hljs-built_in">deg2rad</span>(<span class="hljs-number">50.0f</span>), viewportAspect, <span class="hljs-number">0.1f</span>, <span class="hljs-number">100.0f</span>);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">My_Timer</span><span class="hljs-params">(<span class="hljs-type">int</span> val)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">glutPostRedisplay</span>();<br><span class="hljs-built_in">glutTimerFunc</span>(<span class="hljs-number">16</span>, My_Timer, val);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span> *argv[])</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">// Change working directory to source code path</span><br>    <span class="hljs-built_in">chdir</span>(__FILEPATH__);<br><span class="hljs-comment">// Initialize GLUT and GLEW, then create a window.</span><br><span class="hljs-comment">////////////////////</span><br><span class="hljs-built_in">glutInit</span>(&amp;argc, argv);<br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> _MSC_VER</span><br>    <span class="hljs-built_in">glutInitDisplayMode</span>(GLUT_RGBA | GLUT_DOUBLE | GLUT_DEPTH);<br><span class="hljs-meta">#<span class="hljs-keyword">else</span></span><br>    <span class="hljs-built_in">glutInitDisplayMode</span>(GLUT_3_2_CORE_PROFILE | GLUT_RGBA | GLUT_DOUBLE | GLUT_DEPTH);<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><span class="hljs-built_in">glutInitWindowPosition</span>(<span class="hljs-number">100</span>, <span class="hljs-number">100</span>);<br><span class="hljs-built_in">glutInitWindowSize</span>(<span class="hljs-number">600</span>, <span class="hljs-number">600</span>);<br><span class="hljs-built_in">glutCreateWindow</span>(__FILENAME__); <span class="hljs-comment">// You cannot use OpenGL functions before this line; The OpenGL context must be created first by glutCreateWindow()!</span><br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> _MSC_VER</span><br><span class="hljs-built_in">glewInit</span>();<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><span class="hljs-built_in">printGLContextInfo</span>();<br><span class="hljs-built_in">My_Init</span>();<br><span class="hljs-comment">////////////////////</span><br><br><span class="hljs-comment">// Register GLUT callback functions.</span><br><span class="hljs-comment">///////////////////////////////</span><br><span class="hljs-built_in">glutDisplayFunc</span>(My_Display);<br><span class="hljs-built_in">glutReshapeFunc</span>(My_Reshape);<br><span class="hljs-built_in">glutTimerFunc</span>(<span class="hljs-number">16</span>, My_Timer, <span class="hljs-number">0</span>); <br><span class="hljs-comment">///////////////////////////////</span><br><br><span class="hljs-comment">// Enter main event loop.</span><br><span class="hljs-comment">//////////////</span><br><span class="hljs-built_in">glutMainLoop</span>();<br><span class="hljs-comment">//////////////</span><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="Tunnel"><a href="#Tunnel" class="headerlink" title="Tunnel"></a>Tunnel</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;../../Include/Common.h&quot;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> glm;<br><br><span class="hljs-type">static</span> <span class="hljs-type">const</span> <span class="hljs-type">char</span> * vs_source[] =<br>&#123;<br><span class="hljs-string">&quot;#version 410 core                                                      \n&quot;</span><br><span class="hljs-string">&quot;                                                                       \n&quot;</span><br><span class="hljs-string">&quot;out VS_OUT                                                             \n&quot;</span><br><span class="hljs-string">&quot;&#123;                                                                      \n&quot;</span><br><span class="hljs-string">&quot;    vec2 tc;                                                           \n&quot;</span><br><span class="hljs-string">&quot;&#125; vs_out;                                                              \n&quot;</span><br><span class="hljs-string">&quot;                                                                       \n&quot;</span><br><span class="hljs-string">&quot;uniform mat4 mvp;                                                      \n&quot;</span><br><span class="hljs-string">&quot;uniform float offset;                                                  \n&quot;</span><br><span class="hljs-string">&quot;                                                                       \n&quot;</span><br><span class="hljs-string">&quot;void main(void)                                                        \n&quot;</span><br><span class="hljs-string">&quot;&#123;                                                                      \n&quot;</span><br><span class="hljs-string">&quot;    const vec2[4] position = vec2[4](vec2(-0.75, -0.75),               \n&quot;</span><br><span class="hljs-string">&quot;                                     vec2( 0.75, -0.75),               \n&quot;</span><br><span class="hljs-string">&quot;                                     vec2(-0.75,  0.75),               \n&quot;</span><br><span class="hljs-string">&quot;                                     vec2( 0.75,  0.75));              \n&quot;</span><br><span class="hljs-string">&quot;    vs_out.tc = (position[gl_VertexID].xy + vec2(offset, 0.5)) *       \n&quot;</span><br><span class="hljs-string">&quot;                vec2(30.0, 1.0);                                       \n&quot;</span><br><span class="hljs-string">&quot;    gl_Position = mvp * vec4(position[gl_VertexID], 0.0, 1.0);         \n&quot;</span><br><span class="hljs-string">&quot;&#125;                                                                      \n&quot;</span><br><br>&#125;;<br><br><span class="hljs-type">static</span> <span class="hljs-type">const</span> <span class="hljs-type">char</span> * fs_source[] =<br>&#123;<br><span class="hljs-string">&quot;#version 410 core                                                      \n&quot;</span><br><span class="hljs-string">&quot;                                                                       \n&quot;</span><br><span class="hljs-string">&quot;layout (location = 0) out vec4 color;                                  \n&quot;</span><br><span class="hljs-string">&quot;                                                                       \n&quot;</span><br><span class="hljs-string">&quot;in VS_OUT                                                              \n&quot;</span><br><span class="hljs-string">&quot;&#123;                                                                      \n&quot;</span><br><span class="hljs-string">&quot;    vec2 tc;                                                           \n&quot;</span><br><span class="hljs-string">&quot;&#125; fs_in;                                                               \n&quot;</span><br><span class="hljs-string">&quot;                                                                       \n&quot;</span><br><span class="hljs-string">&quot;uniform sampler2D tex;                                                 \n&quot;</span><br><span class="hljs-string">&quot;                                                                       \n&quot;</span><br><span class="hljs-string">&quot;void main(void)                                                        \n&quot;</span><br><span class="hljs-string">&quot;&#123;                                                                      \n&quot;</span><br><span class="hljs-string">&quot;    color = texture(tex, fs_in.tc);                                    \n&quot;</span><br><span class="hljs-string">&quot;&#125;                                                                      \n&quot;</span><br>&#125;;<br><br>GLuint          program;<br>GLuint          vao;<br><span class="hljs-function">mat4  <span class="hljs-title">proj_matrix</span><span class="hljs-params">(<span class="hljs-number">1.0f</span>)</span></span>;<br><br><span class="hljs-keyword">struct</span><br>&#123;<br>GLint       mvp;<br>GLint       offset;<br>&#125; uniforms;<br><br>GLuint          tex_wall;<br>GLuint          tex_ceiling;<br>GLuint          tex_floor;<br><br><span class="hljs-keyword">enum</span> <span class="hljs-title class_">FilterTypes</span><br>&#123;<br>NEAREST = <span class="hljs-number">1</span>,<br>LINEAR,<br>LINEAR_MIPMAP,<br>ANISOTROPIC<br>&#125;;<br><br><span class="hljs-type">float</span> maxAniso = <span class="hljs-number">1.0f</span>;<br><span class="hljs-type">bool</span> anisoSupport = <span class="hljs-literal">false</span>;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">My_Init</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (GL_EXT_texture_filter_anisotropic)<br>        anisoSupport = <span class="hljs-literal">true</span>;<br><span class="hljs-comment">// anisoSupport = glewIsSupported(&quot;GL_EXT_texture_filter_anisotropic&quot;);</span><br><span class="hljs-keyword">if</span>(anisoSupport)<br>&#123;<br><span class="hljs-built_in">glGetFloatv</span>(GL_MAX_TEXTURE_MAX_ANISOTROPY_EXT, &amp;maxAniso);<br>&#125;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Anisotropic Filtering is %ssupported\n&quot;</span>, anisoSupport ? <span class="hljs-string">&quot;&quot;</span> : <span class="hljs-string">&quot;not &quot;</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Max Anisotropy: %.1f\n&quot;</span>, maxAniso);<br><br><span class="hljs-built_in">glClearColor</span>(<span class="hljs-number">1.0f</span>, <span class="hljs-number">1.0f</span>, <span class="hljs-number">1.0f</span>, <span class="hljs-number">1.0f</span>);<br><span class="hljs-built_in">glEnable</span>(GL_DEPTH_TEST);<br><span class="hljs-built_in">glDepthFunc</span>(GL_LEQUAL);<br><br>program = <span class="hljs-built_in">glCreateProgram</span>();<br>GLuint fs = <span class="hljs-built_in">glCreateShader</span>(GL_FRAGMENT_SHADER);<br><span class="hljs-built_in">glShaderSource</span>(fs, <span class="hljs-number">1</span>, fs_source, <span class="hljs-literal">NULL</span>);<br><span class="hljs-built_in">glCompileShader</span>(fs);<br><br>GLuint vs = <span class="hljs-built_in">glCreateShader</span>(GL_VERTEX_SHADER);<br><span class="hljs-built_in">glShaderSource</span>(vs, <span class="hljs-number">1</span>, vs_source, <span class="hljs-literal">NULL</span>);<br><span class="hljs-built_in">glCompileShader</span>(vs);<br><br><span class="hljs-built_in">glAttachShader</span>(program, vs);<br><span class="hljs-built_in">glAttachShader</span>(program, fs);<br><br><span class="hljs-built_in">glLinkProgram</span>(program);<br><br><span class="hljs-built_in">glGenVertexArrays</span>(<span class="hljs-number">1</span>, &amp;vao);<br><span class="hljs-built_in">glBindVertexArray</span>(vao);<br><br>uniforms.mvp = <span class="hljs-built_in">glGetUniformLocation</span>(program, <span class="hljs-string">&quot;mvp&quot;</span>);<br>uniforms.offset = <span class="hljs-built_in">glGetUniformLocation</span>(program, <span class="hljs-string">&quot;offset&quot;</span>);<br><br>TextureData tex = <span class="hljs-built_in">loadImg</span>(<span class="hljs-string">&quot;../../Media/Textures/brick.png&quot;</span>);<br><span class="hljs-built_in">glGenTextures</span>(<span class="hljs-number">1</span>, &amp;tex_wall);<br><span class="hljs-built_in">glBindTexture</span>(GL_TEXTURE_2D, tex_wall);<br><span class="hljs-built_in">glTexImage2D</span>(GL_TEXTURE_2D, <span class="hljs-number">0</span>, GL_RGBA, tex.width, tex.height, <span class="hljs-number">0</span>, GL_RGBA, GL_UNSIGNED_BYTE, tex.data);<br><span class="hljs-built_in">glGenerateMipmap</span>(GL_TEXTURE_2D);<br><span class="hljs-keyword">delete</span>[] tex.data;<br><br>tex = <span class="hljs-built_in">loadImg</span>(<span class="hljs-string">&quot;../../Media/Textures/ceiling.png&quot;</span>);<br><span class="hljs-built_in">glGenTextures</span>(<span class="hljs-number">1</span>, &amp;tex_ceiling);<br><span class="hljs-built_in">glBindTexture</span>(GL_TEXTURE_2D, tex_ceiling);<br><span class="hljs-built_in">glTexImage2D</span>(GL_TEXTURE_2D, <span class="hljs-number">0</span>, GL_RGBA, tex.width, tex.height, <span class="hljs-number">0</span>, GL_RGBA, GL_UNSIGNED_BYTE, tex.data);<br><span class="hljs-built_in">glGenerateMipmap</span>(GL_TEXTURE_2D);<br><span class="hljs-keyword">delete</span>[] tex.data;<br><br>tex = <span class="hljs-built_in">loadImg</span>(<span class="hljs-string">&quot;../../Media/Textures/floor.png&quot;</span>);<br><span class="hljs-built_in">glGenTextures</span>(<span class="hljs-number">1</span>, &amp;tex_floor);<br><span class="hljs-built_in">glBindTexture</span>(GL_TEXTURE_2D, tex_floor);<br><span class="hljs-built_in">glTexImage2D</span>(GL_TEXTURE_2D, <span class="hljs-number">0</span>, GL_RGBA, tex.width, tex.height, <span class="hljs-number">0</span>, GL_RGBA, GL_UNSIGNED_BYTE, tex.data);<br><span class="hljs-built_in">glGenerateMipmap</span>(GL_TEXTURE_2D);<br><span class="hljs-keyword">delete</span>[] tex.data;<br><br><span class="hljs-type">int</span> i;<br>GLuint textures[] = &#123; tex_floor, tex_wall, tex_ceiling &#125;;<br><br><span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">3</span>; i++)<br>&#123;<br><span class="hljs-built_in">glBindTexture</span>(GL_TEXTURE_2D, textures[i]);<br><span class="hljs-built_in">glTexParameteri</span>(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_NEAREST);<br><span class="hljs-built_in">glTexParameteri</span>(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_NEAREST);<br>&#125;<br>&#125;<br><br><span class="hljs-comment">// GLUT callback. Called to draw the scene.</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">My_Display</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">glClear</span>(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);<br><br><span class="hljs-type">float</span> currentTime = <span class="hljs-built_in">glutGet</span>(GLUT_ELAPSED_TIME) * <span class="hljs-number">0.001f</span>;<br><br><span class="hljs-built_in">glUseProgram</span>(program);<br><br><span class="hljs-built_in">glUniform1f</span>(uniforms.offset, currentTime * <span class="hljs-number">0.003f</span>);<br><span class="hljs-function">mat4 <span class="hljs-title">Identy_Init</span><span class="hljs-params">(<span class="hljs-number">1.0</span>)</span></span>;<br><span class="hljs-type">int</span> i;<br>GLuint textures[] = &#123; tex_wall, tex_floor, tex_wall, tex_ceiling &#125;;<br><span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">4</span>; i++)<br>&#123;<br>mat4 mv_matrix = <span class="hljs-built_in">rotate</span>(Identy_Init,<span class="hljs-built_in">deg2rad</span>(<span class="hljs-number">90.0f</span> * (<span class="hljs-type">float</span>)i), <span class="hljs-built_in">vec3</span>(<span class="hljs-number">0.0f</span>, <span class="hljs-number">0.0f</span>, <span class="hljs-number">1.0f</span>));<br>mv_matrix = <span class="hljs-built_in">translate</span>(mv_matrix,<span class="hljs-built_in">vec3</span>(<span class="hljs-number">-0.5f</span>, <span class="hljs-number">0.0f</span>, <span class="hljs-number">-10.0f</span>));<br>mv_matrix = <span class="hljs-built_in">rotate</span>(mv_matrix,<span class="hljs-built_in">deg2rad</span>(<span class="hljs-number">90.0f</span>),<span class="hljs-built_in">vec3</span>( <span class="hljs-number">0.0f</span>, <span class="hljs-number">1.0f</span>, <span class="hljs-number">0.0f</span>));<br>mv_matrix = <span class="hljs-built_in">scale</span>(mv_matrix,<span class="hljs-built_in">vec3</span>(<span class="hljs-number">50.0f</span>, <span class="hljs-number">1.0f</span>, <span class="hljs-number">1.0f</span>));<br>mat4 mvp = proj_matrix * mv_matrix;<br><br><span class="hljs-built_in">glUniformMatrix4fv</span>(uniforms.mvp, <span class="hljs-number">1</span>, GL_FALSE, &amp;mvp[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>]);<br><br><span class="hljs-built_in">glBindTexture</span>(GL_TEXTURE_2D, textures[i]);<br><span class="hljs-built_in">glDrawArrays</span>(GL_TRIANGLE_STRIP, <span class="hljs-number">0</span>, <span class="hljs-number">4</span>);<br>&#125;<br><br><span class="hljs-comment">//glDrawArrays(GL_TRIANGLES, 0, 3);</span><br><br><span class="hljs-built_in">glutSwapBuffers</span>();<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">My_Reshape</span><span class="hljs-params">(<span class="hljs-type">int</span> width, <span class="hljs-type">int</span> height)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">glViewport</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, width, height);<br><br><span class="hljs-type">float</span> viewportAspect = (<span class="hljs-type">float</span>)width / (<span class="hljs-type">float</span>)height;<br><br>proj_matrix = <span class="hljs-built_in">perspective</span>(<span class="hljs-built_in">deg2rad</span>(<span class="hljs-number">60.0f</span>), viewportAspect, <span class="hljs-number">0.1f</span>, <span class="hljs-number">1000.0f</span>);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">My_Timer</span><span class="hljs-params">(<span class="hljs-type">int</span> val)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">glutPostRedisplay</span>();<br><span class="hljs-built_in">glutTimerFunc</span>(<span class="hljs-number">16</span>, My_Timer, val);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">My_Menu</span><span class="hljs-params">(<span class="hljs-type">int</span> val)</span></span><br><span class="hljs-function"></span>&#123;<br>GLuint textures[] = &#123; tex_floor, tex_wall, tex_ceiling &#125;;<br><br><span class="hljs-keyword">if</span>(anisoSupport)<br>&#123;<br><span class="hljs-comment">// Reset to default 1.0</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">3</span>; i++)<br>&#123;<br><span class="hljs-built_in">glBindTexture</span>(GL_TEXTURE_2D, textures[i]);<br><span class="hljs-built_in">glTexParameterf</span>(GL_TEXTURE_2D, GL_TEXTURE_MAX_ANISOTROPY_EXT, <span class="hljs-number">1.0f</span>); <br>&#125;<br>&#125;<br><br><span class="hljs-keyword">if</span>(val == NEAREST)<br>&#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">3</span>; i++)<br>&#123;<br><span class="hljs-built_in">glBindTexture</span>(GL_TEXTURE_2D, textures[i]);<br><span class="hljs-built_in">glTexParameteri</span>(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_NEAREST);<br><span class="hljs-built_in">glTexParameteri</span>(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_NEAREST);<br>&#125;<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(val == LINEAR)<br>&#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">3</span>; i++)<br>&#123;<br><span class="hljs-built_in">glBindTexture</span>(GL_TEXTURE_2D, textures[i]);<br><span class="hljs-built_in">glTexParameteri</span>(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR);<br><span class="hljs-built_in">glTexParameteri</span>(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR);<br>&#125;<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(val == LINEAR_MIPMAP)<br>&#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">3</span>; i++)<br>&#123;<br><span class="hljs-built_in">glBindTexture</span>(GL_TEXTURE_2D, textures[i]);<br><span class="hljs-built_in">glTexParameteri</span>(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR_MIPMAP_LINEAR);<br><span class="hljs-built_in">glTexParameteri</span>(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR);<br>&#125;<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(val == ANISOTROPIC &amp;&amp; anisoSupport)<br>&#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">3</span>; i++)<br>&#123;<br><span class="hljs-built_in">glBindTexture</span>(GL_TEXTURE_2D, textures[i]);<br><span class="hljs-built_in">glTexParameteri</span>(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR_MIPMAP_LINEAR);<br><span class="hljs-built_in">glTexParameteri</span>(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR);<br><span class="hljs-built_in">glTexParameterf</span>(GL_TEXTURE_2D, GL_TEXTURE_MAX_ANISOTROPY_EXT, maxAniso); <br>&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span> *argv[])</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">// Change working directory to source code path</span><br>    <span class="hljs-built_in">chdir</span>(__FILEPATH__);<br><span class="hljs-comment">// Initialize GLUT and GLEW, then create a window.</span><br><span class="hljs-comment">////////////////////</span><br><span class="hljs-built_in">glutInit</span>(&amp;argc, argv);<br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> _MSC_VER</span><br>    <span class="hljs-built_in">glutInitDisplayMode</span>(GLUT_RGBA | GLUT_DOUBLE | GLUT_DEPTH);<br><span class="hljs-meta">#<span class="hljs-keyword">else</span></span><br>    <span class="hljs-built_in">glutInitDisplayMode</span>(GLUT_3_2_CORE_PROFILE | GLUT_RGBA | GLUT_DOUBLE | GLUT_DEPTH);<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><span class="hljs-built_in">glutInitWindowPosition</span>(<span class="hljs-number">100</span>, <span class="hljs-number">100</span>);<br><span class="hljs-built_in">glutInitWindowSize</span>(<span class="hljs-number">600</span>, <span class="hljs-number">600</span>);<br><span class="hljs-built_in">glutCreateWindow</span>(__FILENAME__); <span class="hljs-comment">// You cannot use OpenGL functions before this line; The OpenGL context must be created first by glutCreateWindow()!</span><br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> _MSC_VER</span><br><span class="hljs-built_in">glewInit</span>();<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><span class="hljs-built_in">printGLContextInfo</span>();<br><span class="hljs-built_in">My_Init</span>();<br><span class="hljs-comment">////////////////////</span><br><br><span class="hljs-comment">// Create GLUT menu.</span><br><span class="hljs-comment">////////////////////</span><br><span class="hljs-built_in">glutCreateMenu</span>(My_Menu);<br><span class="hljs-built_in">glutAddMenuEntry</span>(<span class="hljs-string">&quot;Nearest&quot;</span>, NEAREST);<br><span class="hljs-built_in">glutAddMenuEntry</span>(<span class="hljs-string">&quot;Linear&quot;</span>, LINEAR);<br><span class="hljs-built_in">glutAddMenuEntry</span>(<span class="hljs-string">&quot;Linear Mipmap&quot;</span>, LINEAR_MIPMAP);<br><span class="hljs-built_in">glutAddMenuEntry</span>(<span class="hljs-string">&quot;Anisotropic&quot;</span>, ANISOTROPIC);<br><span class="hljs-built_in">glutAttachMenu</span>(GLUT_RIGHT_BUTTON);<br><span class="hljs-comment">////////////////////</span><br><br><span class="hljs-comment">// Register GLUT callback functions.</span><br><span class="hljs-comment">///////////////////////////////</span><br><span class="hljs-built_in">glutDisplayFunc</span>(My_Display);<br><span class="hljs-built_in">glutReshapeFunc</span>(My_Reshape);<br><span class="hljs-built_in">glutTimerFunc</span>(<span class="hljs-number">16</span>, My_Timer, <span class="hljs-number">0</span>); <br><span class="hljs-comment">///////////////////////////////</span><br><br><span class="hljs-comment">// Enter main event loop.</span><br><span class="hljs-comment">//////////////</span><br><span class="hljs-built_in">glutMainLoop</span>();<br><span class="hljs-comment">//////////////</span><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="Wrapmode"><a href="#Wrapmode" class="headerlink" title="Wrapmode"></a>Wrapmode</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;../../Include/Common.h&quot;</span></span><br><br><span class="hljs-type">static</span> <span class="hljs-type">const</span> <span class="hljs-type">char</span> * vs_source[] =<br>&#123;<br><span class="hljs-string">&quot;#version 410 core                                                              \n&quot;</span><br><span class="hljs-string">&quot;                                                                               \n&quot;</span><br><span class="hljs-string">&quot;uniform vec2 offset;                                                           \n&quot;</span><br><span class="hljs-string">&quot;                                                                               \n&quot;</span><br><span class="hljs-string">&quot;out vec2 tex_coord;                                                            \n&quot;</span><br><span class="hljs-string">&quot;                                                                               \n&quot;</span><br><span class="hljs-string">&quot;void main(void)                                                                \n&quot;</span><br><span class="hljs-string">&quot;&#123;                                                                              \n&quot;</span><br><span class="hljs-string">&quot;    const vec4 vertices[] = vec4[](vec4(-0.45, -0.45, 0.0, 1.0),               \n&quot;</span><br><span class="hljs-string">&quot;                                   vec4( 0.45, -0.45, 0.0, 1.0),               \n&quot;</span><br><span class="hljs-string">&quot;                                   vec4(-0.45,  0.45, 0.0, 1.0),               \n&quot;</span><br><span class="hljs-string">&quot;                                   vec4( 0.45,  0.45, 0.0, 1.0));              \n&quot;</span><br><span class="hljs-string">&quot;                                                                               \n&quot;</span><br><span class="hljs-string">&quot;    gl_Position = vertices[gl_VertexID] + vec4(offset, 0.0, 0.0);              \n&quot;</span><br><span class="hljs-string">&quot;    tex_coord = vertices[gl_VertexID].xy * 3.0 + vec2(0.45 * 3);               \n&quot;</span><br><span class="hljs-string">&quot;&#125;                                                                              \n&quot;</span><br>&#125;;<br><br><span class="hljs-type">static</span> <span class="hljs-type">const</span> <span class="hljs-type">char</span> * fs_source[] =<br>&#123;<br><span class="hljs-string">&quot;#version 410 core                                                              \n&quot;</span><br><span class="hljs-string">&quot;                                                                               \n&quot;</span><br><span class="hljs-string">&quot;uniform sampler2D s;                                                           \n&quot;</span><br><span class="hljs-string">&quot;                                                                               \n&quot;</span><br><span class="hljs-string">&quot;out vec4 color;                                                                \n&quot;</span><br><span class="hljs-string">&quot;                                                                               \n&quot;</span><br><span class="hljs-string">&quot;in vec2 tex_coord;                                                             \n&quot;</span><br><span class="hljs-string">&quot;                                                                               \n&quot;</span><br><span class="hljs-string">&quot;void main(void)                                                                \n&quot;</span><br><span class="hljs-string">&quot;&#123;                                                                              \n&quot;</span><br><span class="hljs-string">&quot;    color = texture(s, tex_coord);                                             \n&quot;</span><br><span class="hljs-string">&quot;&#125;                                                                              \n&quot;</span><br>&#125;;<br><br>GLuint          program;<br>GLuint          vao;<br>GLuint          texture;<br><br><span class="hljs-keyword">struct</span><br>&#123;<br>GLint       mvp;<br>GLint       offset;<br>&#125; uniforms;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">My_Init</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">glClearColor</span>(<span class="hljs-number">1.0f</span>, <span class="hljs-number">1.0f</span>, <span class="hljs-number">1.0f</span>, <span class="hljs-number">1.0f</span>);<br><span class="hljs-built_in">glEnable</span>(GL_DEPTH_TEST);<br><span class="hljs-built_in">glDepthFunc</span>(GL_LEQUAL);<br><br>program = <span class="hljs-built_in">glCreateProgram</span>();<br>GLuint fs = <span class="hljs-built_in">glCreateShader</span>(GL_FRAGMENT_SHADER);<br><span class="hljs-built_in">glShaderSource</span>(fs, <span class="hljs-number">1</span>, fs_source, <span class="hljs-literal">NULL</span>);<br><span class="hljs-built_in">glCompileShader</span>(fs);<br><br>GLuint vs = <span class="hljs-built_in">glCreateShader</span>(GL_VERTEX_SHADER);<br><span class="hljs-built_in">glShaderSource</span>(vs, <span class="hljs-number">1</span>, vs_source, <span class="hljs-literal">NULL</span>);<br><span class="hljs-built_in">glCompileShader</span>(vs);<br><br><span class="hljs-built_in">glAttachShader</span>(program, vs);<br><span class="hljs-built_in">glAttachShader</span>(program, fs);<br><br><span class="hljs-built_in">glLinkProgram</span>(program);<br><br><span class="hljs-built_in">glGenVertexArrays</span>(<span class="hljs-number">1</span>, &amp;vao);<br><span class="hljs-built_in">glBindVertexArray</span>(vao);<br><br><span class="hljs-built_in">glGenTextures</span>(<span class="hljs-number">1</span>, &amp;texture);<br><br><span class="hljs-comment">// Load texture from file</span><br>TextureData tex = <span class="hljs-built_in">loadImg</span>(<span class="hljs-string">&quot;../../Media/Textures/rightarrows.png&quot;</span>);<br><span class="hljs-built_in">glGenTextures</span>(<span class="hljs-number">1</span>, &amp;texture);<br><span class="hljs-built_in">glBindTexture</span>(GL_TEXTURE_2D, texture);<br><span class="hljs-built_in">glTexImage2D</span>(GL_TEXTURE_2D, <span class="hljs-number">0</span>, GL_RGBA, tex.width, tex.height, <span class="hljs-number">0</span>, GL_RGBA, GL_UNSIGNED_BYTE, tex.data);<br><span class="hljs-built_in">glTexParameteri</span>(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR);<br><span class="hljs-keyword">delete</span>[] tex.data;<br><br><span class="hljs-built_in">glEnable</span>(GL_BLEND);<br><span class="hljs-built_in">glBlendFunc</span>(GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA);<br>&#125;<br><br><span class="hljs-comment">// GLUT callback. Called to draw the scene.</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">My_Display</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">glClear</span>(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);<br><br><span class="hljs-type">static</span> <span class="hljs-type">const</span> GLenum wrapmodes[] = &#123; GL_CLAMP_TO_EDGE, GL_REPEAT, GL_CLAMP_TO_BORDER, GL_MIRRORED_REPEAT &#125;;<br><span class="hljs-type">static</span> <span class="hljs-type">const</span> GLfloat yellow[] = &#123; <span class="hljs-number">0.4f</span>, <span class="hljs-number">0.4f</span>, <span class="hljs-number">0.0f</span>, <span class="hljs-number">1.0f</span> &#125;;<br><br><span class="hljs-type">float</span> currentTime = <span class="hljs-built_in">glutGet</span>(GLUT_ELAPSED_TIME) * <span class="hljs-number">0.001f</span>;<br><br><span class="hljs-built_in">glUseProgram</span>(program);<br><span class="hljs-type">static</span> <span class="hljs-type">const</span> <span class="hljs-type">float</span> offsets[] =<br>&#123;<br><span class="hljs-number">-0.5f</span>, <span class="hljs-number">-0.5f</span>,<br> <span class="hljs-number">0.5f</span>, <span class="hljs-number">-0.5f</span>,<br><span class="hljs-number">-0.5f</span>,  <span class="hljs-number">0.5f</span>,<br> <span class="hljs-number">0.5f</span>,  <span class="hljs-number">0.5f</span><br>&#125;;<br><br>GLint loc_offset;<br>loc_offset = <span class="hljs-built_in">glGetUniformLocation</span>(program, <span class="hljs-string">&quot;offset&quot;</span>);<br><br><span class="hljs-built_in">glTexParameterfv</span>(GL_TEXTURE_2D, GL_TEXTURE_BORDER_COLOR, yellow);<br><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">4</span>; i++)<br>&#123;<br><span class="hljs-built_in">glUniform2fv</span>(loc_offset, <span class="hljs-number">1</span>, &amp;offsets[i * <span class="hljs-number">2</span>]);<br><span class="hljs-built_in">glTexParameteri</span>(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, wrapmodes[i]); <span class="hljs-comment">// 水平</span><br><span class="hljs-built_in">glTexParameteri</span>(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, wrapmodes[i]); <span class="hljs-comment">// 垂直</span><br><br><span class="hljs-built_in">glDrawArrays</span>(GL_TRIANGLE_STRIP, <span class="hljs-number">0</span>, <span class="hljs-number">4</span>);<br>&#125;<br><br><span class="hljs-built_in">glutSwapBuffers</span>();<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">My_Reshape</span><span class="hljs-params">(<span class="hljs-type">int</span> width, <span class="hljs-type">int</span> height)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">glViewport</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, width, height);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span> *argv[])</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">// Change working directory to source code path</span><br>    <span class="hljs-built_in">chdir</span>(__FILEPATH__);<br><span class="hljs-comment">// Initialize GLUT and GLEW, then create a window.</span><br><span class="hljs-comment">////////////////////</span><br><span class="hljs-built_in">glutInit</span>(&amp;argc, argv);<br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> _MSC_VER</span><br>    <span class="hljs-built_in">glutInitDisplayMode</span>(GLUT_RGBA | GLUT_DOUBLE | GLUT_DEPTH);<br><span class="hljs-meta">#<span class="hljs-keyword">else</span></span><br>    <span class="hljs-built_in">glutInitDisplayMode</span>(GLUT_3_2_CORE_PROFILE | GLUT_RGBA | GLUT_DOUBLE | GLUT_DEPTH);<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><span class="hljs-built_in">glutInitWindowPosition</span>(<span class="hljs-number">100</span>, <span class="hljs-number">100</span>);<br><span class="hljs-built_in">glutInitWindowSize</span>(<span class="hljs-number">600</span>, <span class="hljs-number">600</span>);<br><span class="hljs-built_in">glutCreateWindow</span>(__FILENAME__); <span class="hljs-comment">// You cannot use OpenGL functions before this line; The OpenGL context must be created first by glutCreateWindow()!</span><br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> _MSC_VER</span><br><span class="hljs-built_in">glewInit</span>();<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><span class="hljs-built_in">printGLContextInfo</span>();<br><span class="hljs-built_in">My_Init</span>();<br><span class="hljs-comment">////////////////////</span><br><br><span class="hljs-comment">// Register GLUT callback functions.</span><br><span class="hljs-comment">///////////////////////////////</span><br><span class="hljs-built_in">glutDisplayFunc</span>(My_Display);<br><span class="hljs-built_in">glutReshapeFunc</span>(My_Reshape);<br><span class="hljs-comment">///////////////////////////////</span><br><br><span class="hljs-comment">// Enter main event loop.</span><br><span class="hljs-comment">//////////////</span><br><span class="hljs-built_in">glutMainLoop</span>();<br><span class="hljs-comment">//////////////</span><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>NVDIA Night Systems</title>
    <link href="/notes/2024/10/02/nvdia-night-systems/"/>
    <url>/notes/2024/10/02/nvdia-night-systems/</url>
    
    <content type="html"><![CDATA[<h1 id="NVDIA-Night-Systems"><a href="#NVDIA-Night-Systems" class="headerlink" title="NVDIA Night Systems"></a>NVDIA Night Systems</h1><ul><li><p>主要用來分析 GPU 的 Performance</p></li><li><p>因為有直覺得 Timeline，可以看某個程式在哪個時間點再做什麼，所以也可以看 CPU 執行的程式</p></li><li><p>Single thread&#x2F; Multi-thread (pthread&#x2F;OpenMP)</p><ul><li><code>srun -n1 -cX nsys profile &lt;nsys options&gt; ./your_program &lt;program args&gt;</code></li></ul></li><li><p>MPI<br><code>srun -nX ./wrapper.sh ./your_program &lt;program args&gt;</code></p></li><li><p>wrapper.sh</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-meta">#! /bin/bash</span><br><br><span class="hljs-built_in">mkdir</span> -p nsys_reports<br><br><span class="hljs-comment"># Output to ./nsys_reports/rank_$N.nsys-rep</span><br>nsys profile \<br>-o <span class="hljs-string">&quot;./nsys_reports/rank_<span class="hljs-variable">$PMI_RANK</span>.nsys-rep&quot;</span> \  <br>--mpi-impl openmpi \<br>--trace mpi,ucx,osrt \<br><span class="hljs-variable">$@</span><br></code></pre></td></tr></table></figure><p>讓每個 Process 輸出到不同名稱的檔案，裡面的 PMI_RANK 就會自動填入對應的 rank</p></li></ul><p>–trace <events>: cuda, mpi, ucs, nvtx, …<br>–start-later X: X 秒之後再開始 profile，因為像是 initialization 就不重要，且通常只要監測幾秒就好，不用全看<br>–duration Y: profile 跑幾秒<br>–mpi-impl: openmpi (for OpenMPI)&#x2F; mpich (for Intel MPI)</p><h1 id="NVTX"><a href="#NVTX" class="headerlink" title="NVTX"></a>NVTX</h1><p>可以結合 Nsystem，插偵來更好的監測結果，不過會有一些 Profile Overhead</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Daily Conversion</title>
    <link href="/notes/2024/09/15/daily-conversion/"/>
    <url>/notes/2024/09/15/daily-conversion/</url>
    
    <content type="html"><![CDATA[<h1 id="177"><a href="#177" class="headerlink" title="177"></a><a href="https://www.youtube.com/watch?v=HBJeW2pJ-po">177</a></h1><h3 id="表示感謝"><a href="#表示感謝" class="headerlink" title="表示感謝"></a>表示感謝</h3><ul><li>Thank you so much </li><li>Thanks a lot</li></ul><h3 id="回應感謝"><a href="#回應感謝" class="headerlink" title="回應感謝"></a>回應感謝</h3><ul><li>不客氣 You’re welcome</li><li>沒關係 No worries</li><li>不用謝 Don’t mention it</li></ul><h3 id="run"><a href="#run" class="headerlink" title="run"></a>run</h3><ul><li>競選: run for president</li><li>推進<ul><li>The river runs through the forest</li><li>The fire runs through the building</li><li>The news runs quickly through the town</li><li>The meeting runs for three hours</li><li>run a machine, run a program, run a business</li></ul></li></ul><h3 id="scene"><a href="#scene" class="headerlink" title="scene"></a>scene</h3><ul><li>戲、場景<ul><li>kiss scene, fight scene</li></ul></li><li>在幕後、不公開的  <ul><li>The director controls everythings <strong>behind the scenes</strong></li></ul></li><li>大吵大鬧<ul><li>Don’t <strong>make a scene</strong> in public</li></ul></li><li>在現場<ul><li>The journalists were <strong>on the scene</strong> reporting on the event</li></ul></li></ul><h3 id="Filler-Words"><a href="#Filler-Words" class="headerlink" title="Filler Words"></a>Filler Words</h3><ul><li>ex: well, likem sort of, kind of, you know, basically, actually…</li><li>不要過度使用，要有意識、策略性地使用，知道自己要表達什麼<ul><li>想表達出自己的猶豫、思考時使用<ul><li>She’s, <strong>you know</strong>, very cute</li></ul></li><li>想表達 <strong>我還沒說完，請不要打斷</strong> 時使用<ul><li>I was, <strong>like</strong>, super happy</li></ul></li><li>減弱語氣、留有餘地<ul><li>That’s <strong>sort of</strong> expensive</li><li>I was <strong>basically&#x2F; actually</strong> so angry</li></ul></li></ul></li></ul><h3 id="沒錯、確實"><a href="#沒錯、確實" class="headerlink" title="沒錯、確實"></a>沒錯、確實</h3><ul><li>True dat (that)</li><li>True story</li></ul><h3 id="我認為"><a href="#我認為" class="headerlink" title="我認為"></a>我認為</h3><ul><li>I guess: 主觀上的，無根據的猜測</li><li>I suppose: 基於情況的推測，我估計</li><li>I think: 認為、覺得</li><li>I figure: 經過思考推理得到的結論，我琢磨著</li><li>I believe: 我相信</li></ul><h3 id="It-never-hurts-to-do…"><a href="#It-never-hurts-to-do…" class="headerlink" title="It never hurts to do…"></a>It never hurts to do…</h3><ul><li>It doesn’t hurt to do… (建議的涵義)</li><li>There is no harm in doing… (陳述事實，建議口吻偏弱)</li></ul><h3 id="concern"><a href="#concern" class="headerlink" title="concern"></a>concern</h3><ul><li>be concerned with: 關心&#x2F; 有關<ul><li>I’m more concerned with getting my self-esteem back</li><li>Mike’s channel is concerned with spoken English</li></ul></li><li>be concerned about: 擔心、憂慮 <ul><li>I’m really concerned about your safety</li></ul></li><li>擔心 (可數)<ul><li>What are your concerns?</li><li>My main concern is your safety</li></ul></li><li>涉及到、關於<ul><li>This concerns the future of us</li></ul></li><li>使擔心<ul><li>The news concerned me deeply</li><li>Your safety concerns me</li></ul></li></ul><h3 id="自尊"><a href="#自尊" class="headerlink" title="自尊"></a>自尊</h3><ul><li>self-esteem<ul><li>high level of self-esteem 自尊心強</li></ul></li><li>ego<ul><li>a big ego 形容人非常自我</li></ul></li></ul><h3 id="in-the-shadow-of-sb"><a href="#in-the-shadow-of-sb" class="headerlink" title="in the shadow of sb."></a>in the shadow of sb.</h3><h3 id="Is-it-just-me-or-is…-只有我這樣覺得"><a href="#Is-it-just-me-or-is…-只有我這樣覺得" class="headerlink" title="Is it just me, or is…? 只有我這樣覺得"></a>Is it just me, or is…? 只有我這樣覺得</h3><h3 id="fly-off-the-rails-失控、偏離計畫"><a href="#fly-off-the-rails-失控、偏離計畫" class="headerlink" title="fly off the rails 失控、偏離計畫"></a>fly off the rails 失控、偏離計畫</h3><ul><li>She flew off the rails when she heard the news</li><li>The car flew off the rails and crashed into a tree</li><li>The pary flew off the rails when the guests got drunk</li></ul><h3 id="over"><a href="#over" class="headerlink" title="over"></a>over</h3><ul><li>過度<ul><li>overuse</li><li>overestimate</li><li>overreact</li></ul></li><li>越過<ul><li>overcome</li><li>overlook</li><li>overhear</li></ul></li></ul><h3 id="Catchphrase-口頭禪"><a href="#Catchphrase-口頭禪" class="headerlink" title="Catchphrase 口頭禪"></a>Catchphrase 口頭禪</h3><ul><li>catch 上口    <ul><li>The song is very catchy</li></ul></li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Parallel Programming</title>
    <link href="/notes/2024/09/13/parallel-programming-1/"/>
    <url>/notes/2024/09/13/parallel-programming-1/</url>
    
    <content type="html"><![CDATA[<h1 id="平行計算-Parallel-Computing"><a href="#平行計算-Parallel-Computing" class="headerlink" title="平行計算 Parallel Computing"></a>平行計算 Parallel Computing</h1><p>過往我們寫的程式都是 <strong>Sequential Code</strong>，都是線性的邏輯，同個問題只能用一個 Processor 處理。<strong>平行計算</strong> 是讓 <strong>多個Processors</strong> 一起解決 <strong>單一問題</strong>，把 Instructions 餵到不同的 Processor，讓他們同時去處理。</p><ul><li>這些 Processor 每次執行的先後順序可能不固定，所以像是用 print 來 debug 可能結果每次都不一樣，處理起來非常複雜</li><li>有時候會有 Dependency 的問題要自己特別處理</li></ul><p>平行計算可以應用在 Bottleneck 的地方，像是以往高速公路的 Bottleneck 在收費站，現在改成電子化大幅提升處理速度</p><h2 id="平行計算-VS-分散式計算"><a href="#平行計算-VS-分散式計算" class="headerlink" title="平行計算 VS 分散式計算"></a>平行計算 VS 分散式計算</h2><p>兩者都需要多台電腦，但是背景有很大的差異性</p><p><strong>平行計算</strong> 主要是用來 <strong>高效能計算</strong>，通常需要大量計算，因此 <strong>效能</strong> 是最重要的，在有限時間內解決某問題<br><strong>分散式計算</strong> 主要是 <strong>商用的</strong>，通常用來提供 <strong>計算服務的共享</strong>，讓使用者共享資源，效能並非最重要的，重視 <strong>分享與管理計算的資源</strong></p><h2 id="為甚麼需要平行計算"><a href="#為甚麼需要平行計算" class="headerlink" title="為甚麼需要平行計算"></a>為甚麼需要平行計算</h2><ul><li>節省時間<br>使用 <strong>更多資源</strong> 縮短 <strong>執行時間</strong></li><li>解決更大的問題<br>以往某些問題就算給予大量時間，依然無法解決，一定需要大量的計算能力才可以，像是大部分的科學計算 (物理模擬、台積電製程等等)</li><li>最大化榨乾硬體效能</li></ul><h2 id="平行計算的演化"><a href="#平行計算的演化" class="headerlink" title="平行計算的演化"></a>平行計算的演化</h2><ol><li>Single-Core Era</li><li>Multi-Core Era</li><li>Distributed System Era</li><li>Heterogeneous Systems Era<ul><li>發現 CPU 不再夠用，開始使用 GPU 來解決問題<br><img src="/notes/./images/parallel-programming-1/TrendofParallelComputong.png" alt="Trend of Parallel Computong"></li></ul></li></ol><h1 id="平行電腦的分類-Parallel-Computer-Classification"><a href="#平行電腦的分類-Parallel-Computer-Classification" class="headerlink" title="平行電腦的分類 Parallel Computer Classification"></a>平行電腦的分類 Parallel Computer Classification</h1><h2 id="Flynn’s-classic-taxonomy"><a href="#Flynn’s-classic-taxonomy" class="headerlink" title="Flynn’s classic taxonomy"></a>Flynn’s classic taxonomy</h2><p>把電腦架構依據兩個獨立的象限: <strong>Instruction</strong> &amp; <strong>Data</strong></p><ul><li>又可以分成 SISD、SIMD、MISD、MIMD</li></ul><h3 id="SISD"><a href="#SISD" class="headerlink" title="SISD"></a>SISD</h3><ul><li>一次讀一個 Instruction，一種 Data</li><li>Serail Computer，最後到硬體處理都是 Sequential Code</li></ul><h3 id="SIMD"><a href="#SIMD" class="headerlink" title="SIMD"></a>SIMD</h3><ul><li>一次讀一個 Instruction，可以 Apply 這個 Instruction 到不同的 Data</li><li>ex: vector processor、<strong>GPU</strong></li></ul><h3 id="MISD"><a href="#MISD" class="headerlink" title="MISD"></a>MISD</h3><ul><li>多種 Instruction，但是吃的 Data 一樣</li><li>ex: 幾乎沒有應用</li></ul><h3 id="MIMD"><a href="#MIMD" class="headerlink" title="MIMD"></a>MIMD</h3><ul><li>多種 Instruction，可以吃不同的 Data</li><li>現在電腦中的 Multi-core CPU 都是這種</li></ul><h2 id="Memory-Architecture-Classfication"><a href="#Memory-Architecture-Classfication" class="headerlink" title="Memory Architecture Classfication"></a>Memory Architecture Classfication</h2><ul><li><p>Shared Memory</p><ul><li>Uniform Memory Access (UMA)</li><li>Non-Uniform Memory Access (NUMA)</li></ul></li><li><p>Distributed Memory </p><ul><li>Cluster、Supercomputer、Datacenter</li></ul></li></ul><p><img src="/notes/./images/parallel-programming-1/MemoryArchitectureClassfication.png" alt="Memory Architecture Classfication"></p><h1 id="Parallel-Programming-Model"><a href="#Parallel-Programming-Model" class="headerlink" title="Parallel Programming Model"></a>Parallel Programming Model</h1><p>不管硬體長怎樣，都把它們做 abstraction，製造假象讓上層使用</p><ul><li>Message Passing Model 可以支援 Shared Memory Machine</li><li>Shared Memory Model 可以支援 Distributed Memory Machine</li></ul><h2 id="Shared-Memory-Programming-Model"><a href="#Shared-Memory-Programming-Model" class="headerlink" title="Shared Memory Programming Model"></a>Shared Memory Programming Model</h2><p>Thread 之間藉由 Global Memory 做溝通<br>Ex: POSIX Thread (Pthread)、OpenMP<br>比較簡單，很多 Sync. 的問題，可能會更慢</p><h2 id="Message-Passing-Programming-Model"><a href="#Message-Passing-Programming-Model" class="headerlink" title="Message Passing Programming Model"></a>Message Passing Programming Model</h2><p>不同 Machine 需要 Send、Receive 來溝通，因此需要 Memory Copy<br>Ex: MPI API<br>Scability 比較好</p><h1 id="Supercomputer"><a href="#Supercomputer" class="headerlink" title="Supercomputer"></a>Supercomputer</h1><p>專門為了高效能計算而設計的</p><p>效能通常用 <strong>FLOPS</strong> 來定義，也就是每秒鐘能做多少 <strong>浮點數運算</strong></p><p>執行的 Benchmark 是 HPL benchmark，來做超級電腦排名</p><h2 id="HPL-Benchmark"><a href="#HPL-Benchmark" class="headerlink" title="HPL Benchmark"></a>HPL Benchmark</h2><p>能夠計算 <strong>浮點數執行的速率</strong></p><p>實作方式沒有限制，甚至連記憶體大小之類的也會影響結果。</p><p>如果這個 Benchmark 的執行效果好，其他計算基本上也會不錯</p><h1 id="Interconnect"><a href="#Interconnect" class="headerlink" title="Interconnect"></a>Interconnect</h1><p>平行計算的時候，真的瓶頸在 <strong>網路</strong> 、 <strong>IO</strong> 這邊，遠慢於 CPU 計算，因此會有其他優化</p><h2 id="Interconnection-Networks"><a href="#Interconnection-Networks" class="headerlink" title="Interconnection Networks"></a>Interconnection Networks</h2><p>四大考量因素: Scalability、Performance、Resilience、Cost</p><h3 id="Network-Topology"><a href="#Network-Topology" class="headerlink" title="Network Topology"></a>Network Topology</h3><ul><li>Diameter(lantency)<ul><li>最長的點對點有多少 Link</li></ul></li><li>Bisection(resilience)<ul><li>斷掉幾個 Link 會壞掉</li></ul></li><li>Links(cost)<ul><li>要多少 Edge</li></ul></li><li>Degree(scalability)<ul><li>每個 Node 需要多少 Link 的 Port 的數量</li></ul></li></ul><p>—|—|—|—|—|—</p><p>| Linear Array | P-1   | 1   | P-1    | 2   |<br>| ———— | —– | — | —— | — | — |</p><p>| Ring         | P&#x2F;2   | 2   | P      | 2   |<br>| —          | —   | — | —    | — | — |</p><p>| Tree         | 2logp | 1   | 2(p-1) | 3   |<br>| —          | —   | — | —    | — | — |<br>2-D Mesh<br>2-D Torus<br>Hypercube</p><h4 id="4-D-Hypercube"><a href="#4-D-Hypercube" class="headerlink" title="4-D Hypercube"></a>4-D Hypercube</h4><p>scability 不理想<br>每個 Node 有 ID，是由 4 bits 組成，鄰居之間都把某個 bit flip</p><h4 id="6-Dimensional-Mesh-Torus"><a href="#6-Dimensional-Mesh-Torus" class="headerlink" title="6-Dimensional Mesh&#x2F; Torus"></a>6-Dimensional Mesh&#x2F; Torus</h4><h4 id="Dragonfly-topology"><a href="#Dragonfly-topology" class="headerlink" title="Dragonfly topology"></a>Dragonfly topology</h4><p>在比較接近的 Node 或 Rack 之間，會很有密集的 Link，越遠的 Link 越少</p><h4 id="InfiniBand"><a href="#InfiniBand" class="headerlink" title="InfiniBand"></a>InfiniBand</h4><p>效能很高，成本也很高</p><p>在超級電腦中，幾乎都是使用 InfiniBand</p><p>Ethernet 是用 IP 傳輸，每個網路層彼此都是獨立的，因此 Layer 之間傳輸都要做 Memory Copy，一堆 Context Switch，不利於大量傳輸<br>InfiniBand 拋棄了 Layer IP 的方式，是藉由 DMA 的控制器去做 IO，不經過 OS、CPU。且 Remote DMA 甚至可以讀到遠端電腦的 Local Memory</p><p>![InfiniBand vs. Gigabit Ethernet]</p><h2 id="IO-Storange"><a href="#IO-Storange" class="headerlink" title="IO &amp; Storange"></a>IO &amp; Storange</h2><p>Parallel file and IO 系統<br>![Lustre file system]</p><h3 id="Burst-Buffering"><a href="#Burst-Buffering" class="headerlink" title="Burst Buffering"></a>Burst Buffering</h3><p>用 Non-Volatile RAM<br>用 Write Back 而不是 Write Thorugh<br>IO 的 Wrokflow 常常忽高忽低，所以你的網路頻寬要夠，要擴充到 Peak load 才能，但是會變成成本很高，使用率很低。因此 Burst Buffer 會 Smooth IO 傳輸速率。</p><h1 id="Parallel-Program-Analysis"><a href="#Parallel-Program-Analysis" class="headerlink" title="Parallel Program Analysis"></a>Parallel Program Analysis</h1><h3 id="Speedup-Factor"><a href="#Speedup-Factor" class="headerlink" title="Speedup Factor"></a>Speedup Factor</h3><h1 id="OpenMP"><a href="#OpenMP" class="headerlink" title="OpenMP"></a>OpenMP</h1><ul><li>shared programming model</li><li>compiler 幫助來 thread programming</li><li>fork-join model</li><li>pragma 結束後就自動 join</li><li>#prama omp parallel 就是 function call</li><li></li></ul><h2 id="Data-Scope"><a href="#Data-Scope" class="headerlink" title="Data Scope"></a>Data Scope</h2><p>要注意因為是 compiler generate，所以有時候執行起來不一樣</p><h1 id="Parallel-Computing"><a href="#Parallel-Computing" class="headerlink" title="Parallel Computing"></a>Parallel Computing</h1><h2 id="Embarassingly"><a href="#Embarassingly" class="headerlink" title="Embarassingly"></a>Embarassingly</h2><p>很常見的名詞，Independent 的 Parallel Computing，最理想的 task，非常容易平行話</p><p>ex: shift、scale、rotate 一個圖的每個 pixel<br>ex: Monte Carlo Methods<br>random sampling<br>用來處理很複雜的問題，且每一個 Sampling 的問題都是 Independent，很適用平行計算<br>計算拍<br>積分<br>ex: Mandelbrot Set<br>計算 complex number<br>絕對值永遠不超過 2 就是</p><h3 id="Image-Region-Partitioning"><a href="#Image-Region-Partitioning" class="headerlink" title="Image Region Partitioning"></a>Image Region Partitioning</h3><p>要確保每個 Partition 工作量是差不多的</p><h2 id="Dynamic-Task-Assignment"><a href="#Dynamic-Task-Assignment" class="headerlink" title="Dynamic Task Assignment"></a>Dynamic Task Assignment</h2><p>有個 Master 來分配工作，做完的 Thread 繼續做下一個工作<br>count 代表發出去的工作，當count &#x3D;&#x3D; 0 代表工作都做完收回了，Master 才可以結束</p><h2 id="Sorting-Algorithm"><a href="#Sorting-Algorithm" class="headerlink" title="Sorting Algorithm"></a>Sorting Algorithm</h2><p>Quick Sort 在平行演算法中效果不好</p><p>在 n processors 情況下，平行後最理想複雜度應該達到 O(log n)</p><h3 id="Bucket-Sort"><a href="#Bucket-Sort" class="headerlink" title="Bucket Sort"></a>Bucket Sort</h3><p>Bucket range 很重要</p><h3 id="Bitonic-Mergesort"><a href="#Bitonic-Mergesort" class="headerlink" title="Bitonic Mergesort"></a>Bitonic Mergesort</h3><p>平行後算快的 Sorting Algorithm<br>結合 Mergesort 的 Divide，最後一定是兩兩 Bitonic Sequence<br>Monotonic Sequence: 漸增或漸減<br>Bitonic Sequence: 切一半，兩邊都是 Monotonic Sequence 一邊漸增、一邊漸減<br>交換、會變成兩個 Bitonic Sequence</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Randomized Algorithms</title>
    <link href="/notes/2024/09/10/randomized-algorithms/"/>
    <url>/notes/2024/09/10/randomized-algorithms/</url>
    
    <content type="html"><![CDATA[<h1 id="Events-and-Probability"><a href="#Events-and-Probability" class="headerlink" title="Events and Probability"></a>Events and Probability</h1><h4 id="Experiment"><a href="#Experiment" class="headerlink" title="Experiment"></a>Experiment</h4><p>A process to produce an outcome</p><h4 id="Random-Experiment"><a href="#Random-Experiment" class="headerlink" title="Random Experiment"></a>Random Experiment</h4><p>Experiment whose outcome is not known until the process is done</p><p>ex1: 翻一個硬幣兩次<br>ex2: 翻硬幣直到 head 出現</p><h4 id="Sample-Space"><a href="#Sample-Space" class="headerlink" title="Sample Space"></a>Sample Space</h4><p>The set of all outcomes of an experiment</p><p>ex1: {HH, HT, TH, TT}</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Graphcis Programming and Application</title>
    <link href="/notes/2024/09/08/graphics-programming-and-applications/"/>
    <url>/notes/2024/09/08/graphics-programming-and-applications/</url>
    
    <content type="html"><![CDATA[<h2 id="OpenGL"><a href="#OpenGL" class="headerlink" title="OpenGL"></a>OpenGL</h2><ul><li>Application Programming Interface (API)</li><li>寫指令與底層顯卡溝通，把資料餵到 Render Pipeline 裡面，繪出結果</li><li>Primitive-based Rendering<ul><li>用最小單元，點、線、面組成</li></ul></li></ul><h2 id="Rasterization-Rendering-Pipeline"><a href="#Rasterization-Rendering-Pipeline" class="headerlink" title="Rasterization Rendering Pipeline"></a>Rasterization Rendering Pipeline</h2><ul><li>有很多 Stage，一路從 CPU 流到 GPU，有些專門處理頂點，有些專門處理三角片，有些處理 Pixel…</li><li>早期的 Rendering Pipeline 是 Fiexed Function，Stage 裡面大部分的邏輯是寫死的<ul><li>只能傳一些自己的參數進去，不能改變裡面的運行邏輯</li></ul></li><li>現在是 Programmable shader，可以自己寫一些東西進去，更為靈活<ul><li>在 OpenGL 3.0 成為正式的核心，捨去 Fixed Function Pipeline</li><li>在 OpenGL 裡面使用 GLSL 撰寫<br><img src="https://www.khronos.org/opengl/wiki_opengl/images/RenderingPipeline.png" alt="Rasterization Rendering Pipeline"></li></ul></li></ul><h1 id="Projection-Transformation"><a href="#Projection-Transformation" class="headerlink" title="Projection &amp; Transformation"></a>Projection &amp; Transformation</h1><ul><li>Modeling Transformation<br>World Coordinate</li><li>Viewing Transformation<br>Camera Coordinate</li><li>Projection Transformation<br>Window Coordinate</li><li>Viewport Transformation<br>Screen Coordinate</li></ul><h2 id="Coordinate-System"><a href="#Coordinate-System" class="headerlink" title="Coordinate System"></a>Coordinate System</h2><p><img src="https://i.sstatic.net/w7bKr.jpg" alt="Coordinate System"></p><h3 id="Homogeneous-Coordinates"><a href="#Homogeneous-Coordinates" class="headerlink" title="Homogeneous Coordinates"></a>Homogeneous Coordinates</h3><ul><li>用四維 vector (x, y, z, w) 來描述，能夠區分它是 <strong>點</strong> 還是 <strong>向量</strong><ul><li>w &#x3D; 0: 向量</li><li>w &#x3D; 1: 點</li></ul></li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Circuits &amp; Electronics - Semiconductor Material &amp; Diode</title>
    <link href="/notes/2024/09/07/circuits-and-electronics-1/"/>
    <url>/notes/2024/09/07/circuits-and-electronics-1/</url>
    
    <content type="html"><![CDATA[<h1 id="半導體-Semiconductor"><a href="#半導體-Semiconductor" class="headerlink" title="半導體 Semiconductor"></a>半導體 Semiconductor</h1><ul><li>自由電子數量介於 <strong>導體(Conductor)</strong> 與 <strong>絕緣體(Insulator)</strong> 之間</li></ul><h3 id="導體-Conductor"><a href="#導體-Conductor" class="headerlink" title="導體 Conductor"></a>導體 Conductor</h3><ul><li>材料上有許多自由電子 (free electron)</li><li>給予外加電壓後，產生電場，自由電子開始移動</li><li>自由電子移動，且數量夠多時，量測的到電流，我們稱它為導體</li><li>在室溫下，自由電子濃度大概是 $10^22 &#x2F; cm^3$</li></ul><h3 id="絕緣體-Insulator"><a href="#絕緣體-Insulator" class="headerlink" title="絕緣體 (Insulator)"></a>絕緣體 (Insulator)</h3><ul><li>每個原子幾乎都沒辦法貢獻自由電子，因此自由電子數量極少，沒辦法導電</li><li>在室溫下，自由電子濃度大概是 $10^1 &#x2F; cm^3$</li></ul><h2 id="半導體有哪些種類？"><a href="#半導體有哪些種類？" class="headerlink" title="半導體有哪些種類？"></a>半導體有哪些種類？</h2><ul><li>通常在元素週期表上的第四族，像是矽(Si)、鍺(Ge) 又稱為 <strong>元素半導體 (elemental semi)</strong></li><li>有時候會是一個 <strong>第三族</strong> 和 <strong>第五族</strong> 元素混合形成化合物，像是砷化鎵 (GaAs)，又稱 <strong>化合物半導體 (compound semi)</strong></li></ul><h4 id="矽-Si"><a href="#矽-Si" class="headerlink" title="矽 Si"></a>矽 Si</h4><ul><li>礦產佔地球比例 1&#x2F;4</li><li>跟 Ge 比起來比較穩定</li></ul><h2 id="本質半導體-Intrinsic-Semi"><a href="#本質半導體-Intrinsic-Semi" class="headerlink" title="本質半導體 (Intrinsic Semi)"></a>本質半導體 (Intrinsic Semi)</h2><ul><li>第四族的所有元素，<strong>價電子 (valence electron)</strong> 數量都是 4 個<ul><li>價電子：原子最外的電子層中的電子</li><li>其中 C 是絕緣體，Si、Ge 是半導體，Sn、Pb 是導體</li></ul></li><li>Si 會與鄰近的其他 Si 形成 <strong>共價鍵 (covalence bond)</strong><ul><li>在室溫下，自由電子濃度大概是 $10^10 &#x2F; cm^3$</li><li>外界給予能量時 (ex: 溫度上升)，價電子會脫離共價鍵<ul><li>價電子脫離共價鍵結構所需的最小能量稱為 <strong>Bandgap Energy (Eg)</strong></li><li>$e^-$ 脫離後會產生電洞 $h^+$，又稱為 Generate $e^-$ $h^+$ 對，與之相反的是 Recomine</li></ul></li><li>在溫度上升的過程中，Generation 速率會比 Recombination 速率快</li><li>當熱平衡 (Thermal Equilibrium) 時，Generation 速率跟 Recombination 速率一樣快，$e^-$、$h^+$ 數量不再改變</li></ul></li></ul><h3 id="電子濃度公式"><a href="#電子濃度公式" class="headerlink" title="電子濃度公式"></a>電子濃度公式</h3><ul><li>$ n_i(T) &#x3D; BT^{3&#x2F;2} e^{(-Eg&#x2F;2kT)}$<ul><li>i: intrinsic</li><li>B: Semi Constant for Si, B &#x3D; 5.23 * $10^{15}$ </li><li>Eg: Bandgap energy (eV) for Si, Eg &#x3D; 1.1 eV</li><li>T: 絕對溫度 (K), K &#x3D; 273.15 + $^\circ C$</li><li>k: Boltzmann’s Constant, k &#x3D; 86 * $10^{-6}$ eV&#x2F;K</li></ul></li><li>可以發現本質載子濃度對於溫度 T 非常敏感</li></ul><h2 id="外質半導體-Extrinsic-Semi"><a href="#外質半導體-Extrinsic-Semi" class="headerlink" title="外質半導體 (Extrinsic Semi)"></a>外質半導體 (Extrinsic Semi)</h2><ul><li>摻少量 (比例大約 1&#x2F;10000000) 雜質到本質半導體 (Si)，導電性上升</li></ul><h3 id="N-型半導體"><a href="#N-型半導體" class="headerlink" title="N 型半導體"></a>N 型半導體</h3><ul><li>這邊以摻雜五價元素為例，稱為 <strong>N 型半導體</strong><ul><li>原先 Si 濃度是 5 * $10^22$ 原子&#x2F;$cm^3$</li><li>摻雜的 P 濃度是 5 * $10^15$ 原子&#x2F;$cn^3$</li><li>摻雜過後的 Si 濃度是 5 * $10^22$ - 5 * $10^15$，還是 5 * $10^22$ 原子&#x2F;$cm^3$<ul><li>可以發現 Si 濃度幾乎沒有改變，因此熔點等物理特性、化學特性不會變，但是 <strong>導電性</strong> 會改變</li></ul></li></ul></li><li>摻雜元素要是均勻分布的</li><li>摻雜後，每個雜質都多貢獻一個自由電子，稱其為 <strong>施體或施子 (donor)</strong><ul><li>原先電子濃度是 $10^10$</li><li>摻雜後的電子濃度是 $10^10$ + $10^15$ &#x3D; $10^15$，因此電子濃度是由 donor 濃度決定，稱其為 $N_d$</li></ul></li></ul><h3 id="P-型半導體"><a href="#P-型半導體" class="headerlink" title="P 型半導體"></a>P 型半導體</h3><ul><li>摻雜三價元素 (B)，原理跟 N 型半導體 差不多</li><li>電洞變成多數載子 (Majority Carriers)，電子變成少數載子 (Minority Carriers)</li><li>上述的 donor 變成 acceptor (受體、受子)，因此 $N_d$ 也變成 $N_a$</li></ul><h3 id="質量作用定律-mass-action-law"><a href="#質量作用定律-mass-action-law" class="headerlink" title="質量作用定律 (mass-action law)"></a>質量作用定律 (mass-action law)</h3><ul><li>$ n p &#x3D; n_i^2$<ul><li>n: 電子濃度</li><li>p: 電洞濃度</li><li>n_i: 本質載子濃度</li></ul></li><li>電子濃度和電動濃度乘積固定，當電子濃度上升後，電洞濃度會下降</li><li>在 N 型半導體裡面，n 替換成 $n_{n0}$，p 替換成 $p_{n0}$</li><li>在 P 型半導體裡面，n 替換成 $n_{p0}$，p 替換成 $p_{p0}$</li></ul><h2 id="飄移與擴散-Drift-and-Diffusion"><a href="#飄移與擴散-Drift-and-Diffusion" class="headerlink" title="飄移與擴散 Drift and Diffusion"></a>飄移與擴散 Drift and Diffusion</h2><h3 id="飄移"><a href="#飄移" class="headerlink" title="飄移"></a>飄移</h3><ul><li>外力，像是施予電壓產生電場</li><li>電場產生力給載子，移動裡面的電子與電洞 <ul><li>雖然電子與電洞方向不同，但他們貢獻的方向是相同的，不會抵銷</li><li>所有載子的平均速度，就是 <strong>飄移速度</strong>，會隨著電壓變大而變快<ul><li>當飄移速度變快時，電流也會越大</li><li>可以發現跟歐姆定律很像，但是在半導體中要多考慮 <strong>電洞</strong></li></ul></li></ul></li><li>雖然電場與飄移速度成正相關，但是當電場大到一定程度 ($10^4$)，飄移速度幾乎不會再增加<ul><li>電子: $v_{dn}$ &#x3D; - $\mu_n$ E</li><li>電洞: $v_{dp}$ &#x3D; + $\mu_p$ E<ul><li>$\mu$: 移動率，mobility</li><li>$v_d$: 飄移速度</li><li>E: 電場</li><li>電子多個負號，因為它與電場方向相反</li><li>$\mu_n$ 大約是 1350，$\mu_p$ 大約是 480 $\frac{cm^3}{V \cdot s}$</li></ul></li></ul></li></ul><h3 id="半導體電流公式"><a href="#半導體電流公式" class="headerlink" title="半導體電流公式"></a>半導體電流公式</h3><p><img src="/notes/./images/circuits-and-electronics-1/SemiconductorCurrentEquation.png" alt="Semiconductor Current Equation"></p><h4 id="電子-n"><a href="#電子-n" class="headerlink" title="電子 n"></a>電子 n</h4><p>我們有 $I_n$ &#x3D; $\frac{N \cdot q}{t}$ 、 $V_{dn}$ &#x3D; $\frac{-L}{t}$ (- 為方向)，因此 $I_n &#x3D; qN \cdot \frac{(-V_{dn})}{L}$<br>電流密度 $J_n &#x3D; \frac{I_n}{A} &#x3D; \frac{qN \dot (-V_{dn})}{L\cdot A}$ &#x3D; $q \cdot n (-V_{dn})$ (n 為電子濃度)<br>結合前面的飄移速度公式，可以得到 $J_n &#x3D; q \cdot n \cdot (-V_{dn}) &#x3D;  q \cdot n \cdot (-) (-\mu_n) \cdot E &#x3D; q \cdot n \mu_n \cdot E$</p><h4 id="電洞-p"><a href="#電洞-p" class="headerlink" title="電洞 p"></a>電洞 p</h4><p>基本上跟電子類似，可以得到 $J_p &#x3D; q \cdot p \mu_p \cdot E$</p><p>可以知道 <strong>半導體的電流密度</strong> $J &#x3D; J_n + J_p &#x3D; (q \cdot n \mu_n + q \cdot p \mu_p) \cdot E$</p><h4 id="導電係數-sigma"><a href="#導電係數-sigma" class="headerlink" title="導電係數 $\sigma$"></a>導電係數 $\sigma$</h4><p>半導體的電流密度 中的 $(q \cdot n \mu_n + q \cdot p \mu_p)$ 又稱為 <strong>導電係數 conductivity</strong></p><p>在探討 <strong>歐姆定律 (Ohm’s laws)</strong> 時，我們有 $I &#x3D; \frac{V}{R} &#x3D; \frac{V \cdot A}{\rho \cdot L} &#x3D; J \cdot A$ </p><ul><li>$\rho$ 為 <strong>電阻係數</strong></li><li>$L$ 為長度</li><li>$A$ 為截面積</li></ul><p>可以發現 $J &#x3D; \frac{1}{\rho} \cdot \frac{V}{L} &#x3D; (\frac{1}{\rho}) \cdot E$ 且 $J &#x3D; \sigma \cdot E$<br>所以 $\sigma &#x3D; \frac{1}{\rho}$ </p><h5 id="例題"><a href="#例題" class="headerlink" title="例題"></a>例題</h5><p>本質半導體 Si 在 300 K 的溫度下， $\mu_n &#x3D; 1350 \frac{cm^3}{V \cdot s}$，$\mu_p &#x3D; 480 \frac{cm^3}{V \cdot s}$，$N_d &#x3D; 1 \cdot 10^{16} 1&#x2F;cm^3$，求導電係數 $\sigma$？</p><p>$n &#x3D; N_d &#x3D; 1 \cdot 10^{16}$<br>$p &#x3D; \frac{n_i^2}{N_d} &#x3D; \frac{(1.5 \cdot 10^{10})^2}{10^{16}} &#x3D; 2.25 \cdot 10^4$<br>可以發現 $q \cdot p \cdot \mu_p$ 跟 $q \cdot n \cdot \mu_n$ 比起來極小，可以省略<br>因此 $J &#x3D; q \cdot n \cdot \mu_n &#x3D; 1.6 \cdot 10^{-19} \cdot 10^{16} \cdot 1350 &#x3D; 2.16$ </p><ul><li>可以觀察到，如果沒有參雜雜質，$p$ 或 $n$ 都遠不及有參雜雜質的，因此 <strong>導電性</strong> 會差很多倍</li></ul><h3 id="導電係數之溫度係數"><a href="#導電係數之溫度係數" class="headerlink" title="導電係數之溫度係數"></a>導電係數之溫度係數</h3><p><img src="https://i.sstatic.net/BO3H1.png" alt="Impurity Scattering &amp; Lattice Scattering"></p><h4 id="Impurity-Scattering"><a href="#Impurity-Scattering" class="headerlink" title="Impurity Scattering"></a>Impurity Scattering</h4><p>溫度上升，電子能有更多能量，移動速度較快，電子移動過程中更難受質子影響 (吸引)<br>因此，$T$ 上升，$\mu$ 上升</p><h4 id="Lattice-Scattering"><a href="#Lattice-Scattering" class="headerlink" title="Lattice Scattering"></a>Lattice Scattering</h4><p>溫度上升，離子更容易震動，離子的 <strong>有效面積</strong> 上升，電子移動過程中更容易撞到離子<br>因此，$T$ 上升，$\mu$ 下降</p><p>一般而言，我們討論的室溫 (300 K)，大概都在 <strong>Lattice Scattering</strong> 的範圍內</p><h5 id="本質半導體"><a href="#本質半導體" class="headerlink" title="本質半導體"></a>本質半導體</h5><p>在本質半導體中，$\sigma &#x3D; (q \cdot n \mu_n + q \cdot p \mu_p)$，其中 $n &#x3D; p &#x3D; n_i$，因此 $\sigma &#x3D; q \cdot n_i \cdot (\mu_n + p \mu_p)$<br>前面有提到，<strong>本質載子濃度</strong> $n_i$ 對於溫度非常敏感，因此當溫度上升時，雖然 $(\mu_n + p \mu_p)$ 下降，但是遠不及 $n_i$ 的上升程度，所以 $\sigma$ 還是上升</p><h5 id="N-型半島體"><a href="#N-型半島體" class="headerlink" title="N 型半島體"></a>N 型半島體</h5><p>$\sigma &#x3D; q \cdot N_d \cdot \mu_n$<br>溫度上升，$N_d$ 不變，$\mu_n$ 下降，所以 $\sigma$ 下降，P 型半導體同理</p><h3 id="擴散"><a href="#擴散" class="headerlink" title="擴散"></a>擴散</h3><ul><li>透過濃度的差異，自然的流動，不需要外力</li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Leetcode 復健 - Neetcode 150</title>
    <link href="/notes/2024/09/07/leetcode-recovery/"/>
    <url>/notes/2024/09/07/leetcode-recovery/</url>
    
    <content type="html"><![CDATA[<h1 id="Arrays-Hashing"><a href="#Arrays-Hashing" class="headerlink" title="Arrays &amp; Hashing"></a>Arrays &amp; Hashing</h1><h2 id="Contains-Duplicate-Easy"><a href="#Contains-Duplicate-Easy" class="headerlink" title="Contains Duplicate - Easy"></a>Contains Duplicate - Easy</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">containsDuplicate</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums)</span> </span>&#123;<br>        unordered_map&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt; mp;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span>&amp; i:nums)&#123;<br>            <span class="hljs-keyword">if</span>(mp.<span class="hljs-built_in">count</span>(i) != <span class="hljs-number">0</span>)&#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>            &#125;<br>            mp[i]++;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="Valid-Anagram-Easy"><a href="#Valid-Anagram-Easy" class="headerlink" title="Valid Anagram - Easy"></a>Valid Anagram - Easy</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">isAnagram</span><span class="hljs-params">(string s, string t)</span> </span>&#123;<br>        <span class="hljs-type">int</span> s_count[<span class="hljs-number">26</span>] = &#123;&#125;;<br>        <span class="hljs-type">int</span> t_count[<span class="hljs-number">26</span>] = &#123;&#125;;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">char</span>&amp; c:s) s_count[c - <span class="hljs-string">&#x27;a&#x27;</span>]++;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">char</span>&amp; c:t) t_count[c - <span class="hljs-string">&#x27;a&#x27;</span>]++;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i&lt;<span class="hljs-number">26</span>; i++)&#123;<br>            <span class="hljs-keyword">if</span>(s_count[i] != t_count[i]) <br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="Two-Sum-Easy"><a href="#Two-Sum-Easy" class="headerlink" title="Two Sum - Easy"></a>Two Sum - Easy</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">twoSum</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums, <span class="hljs-type">int</span> target)</span> </span>&#123;<br>        unordered_map&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt; mp;<br>        <span class="hljs-type">int</span> size = nums.<span class="hljs-built_in">size</span>();<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i&lt;size; i++)&#123;<br>            <span class="hljs-type">int</span> complement = target - nums[i];<br>            <span class="hljs-keyword">if</span>(mp.<span class="hljs-built_in">count</span>(complement) != <span class="hljs-number">0</span>)&#123;<br>                <span class="hljs-keyword">return</span> &#123;mp[complement], i&#125;;<br>            &#125;<br>            mp[nums[i]] = i;<br>        &#125;<br>        <span class="hljs-keyword">return</span> &#123;&#125;;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="Group-Anagrams-Medium"><a href="#Group-Anagrams-Medium" class="headerlink" title="Group Anagrams - Medium"></a>Group Anagrams - Medium</h2><p>對於每個 string 都去計算一次 a ~ z 的數量，算好後看之前有沒有出現過</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    vector&lt;vector&lt;string&gt;&gt; <span class="hljs-built_in">groupAnagrams</span>(vector&lt;string&gt;&amp; strs) &#123;<br>         vector&lt;pair&lt;vector&lt;<span class="hljs-type">int</span>&gt;, <span class="hljs-type">int</span>&gt;&gt; rec;<br>         vector&lt;vector&lt;string&gt;&gt; ans;<br>         <span class="hljs-keyword">for</span>(string&amp; s:strs)&#123;<br>            <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">count</span><span class="hljs-params">(<span class="hljs-number">26</span>)</span></span>;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">char</span>&amp; c:s) count[c-<span class="hljs-string">&#x27;a&#x27;</span>]++;<br>            <span class="hljs-type">bool</span> found = <span class="hljs-literal">false</span>;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span>&amp; i:rec)&#123;<br>                <span class="hljs-keyword">if</span>(i.first == count)&#123;<br>                    found = <span class="hljs-literal">true</span>;<br>                    ans[i.second].<span class="hljs-built_in">push_back</span>(s);<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">if</span>(!found)&#123;<br>                rec.<span class="hljs-built_in">push_back</span>(&#123;count, ans.<span class="hljs-built_in">size</span>()&#125;);<br>                ans.<span class="hljs-built_in">push_back</span>(vector&lt;string&gt;&#123;s&#125;);<br>            &#125;<br>         &#125;<br>        <span class="hljs-keyword">return</span> ans;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p>雖然用 a ~ z 的 array 存會比直接 sort 較快，但往前找也會花很多時間，還不如直接 sort 用 hashmap 找就好</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    vector&lt;vector&lt;string&gt;&gt; <span class="hljs-built_in">groupAnagrams</span>(vector&lt;string&gt;&amp; strs) &#123;<br>        vector&lt;vector&lt;string&gt;&gt; ans;<br>        unordered_map&lt;string, vector&lt;string&gt;&gt; mp;<br>        <span class="hljs-keyword">for</span> (string&amp; s : strs) &#123;<br>            string s_copy = s;<br>            <span class="hljs-built_in">sort</span>(s_copy.<span class="hljs-built_in">begin</span>(), s_copy.<span class="hljs-built_in">end</span>());<br>            mp[s_copy].<span class="hljs-built_in">push_back</span>(s);<br>        &#125;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span>&amp; i:mp) ans.<span class="hljs-built_in">push_back</span>(i.second);<br>        <span class="hljs-keyword">return</span> ans;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="Top-K-Frequent-Elements-Medium"><a href="#Top-K-Frequent-Elements-Medium" class="headerlink" title="Top K Frequent Elements - Medium"></a>Top K Frequent Elements - Medium</h2><p>先用 hashmap 存起來，再倒到 priority queue 裡面，最後 pop k 個</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br><br>    <span class="hljs-keyword">struct</span> <span class="hljs-title class_">cmp</span> &#123;<br>        <span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">operator</span><span class="hljs-params">()</span><span class="hljs-params">(pair&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt; a, pair&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt; b)</span> </span>&#123;<br>            <span class="hljs-keyword">return</span> a.second &lt; b.second;<br>        &#125;<br>    &#125;;<br><br><br>    <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">topKFrequent</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums, <span class="hljs-type">int</span> k)</span> </span>&#123;<br>        unordered_map&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt; mp;<br>        vector&lt;<span class="hljs-type">int</span>&gt; ans;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span>&amp; i:nums) mp[i]++;<br>        priority_queue&lt;pair&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt;, vector&lt;pair&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt;&gt;, cmp&gt; pq;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span>&amp; i:mp)&#123;<br>            pq.<span class="hljs-built_in">push</span>(&#123;i.first, i.second&#125;);<br>        &#125;<br>        <span class="hljs-keyword">while</span>(k--)&#123;<br>            ans.<span class="hljs-built_in">push_back</span>(pq.<span class="hljs-built_in">top</span>().first);<br>            pq.<span class="hljs-built_in">pop</span>();<br>        &#125;<br>        <span class="hljs-keyword">return</span> ans;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p>因為是要計算出現的頻率，且頻率絕對不會超過 nums 的 size，因此第二步可以改成用 vector 來存，反正空間一定夠。最後再從後往前找 k 個即可。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">topKFrequent</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums, <span class="hljs-type">int</span> k)</span> </span>&#123;<br>        unordered_map&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt; mp;<br>        vector&lt;<span class="hljs-type">int</span>&gt; ans;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span>&amp; i:nums) mp[i]++;<br>        vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt; <span class="hljs-built_in">count</span>(nums.<span class="hljs-built_in">size</span>() + <span class="hljs-number">1</span>);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span>&amp; i:mp) count[i.second].<span class="hljs-built_in">push_back</span>(i.first);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=count.<span class="hljs-built_in">size</span>()<span class="hljs-number">-1</span>; i&gt;=<span class="hljs-number">0</span>; i--)&#123;<br>            <span class="hljs-keyword">if</span>(k == <span class="hljs-number">0</span>) <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>; j&lt;count[i].<span class="hljs-built_in">size</span>(); j++)&#123;<br>                ans.<span class="hljs-built_in">push_back</span>(count[i][j]);<br>                k--;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> ans;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="Product-of-Array-Except-Self-Medium"><a href="#Product-of-Array-Except-Self-Medium" class="headerlink" title="Product of Array Except Self - Medium"></a>Product of Array Except Self - Medium</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">productExceptSelf</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums)</span> </span>&#123;<br>        vector&lt;<span class="hljs-type">int</span>&gt; L&#123;<span class="hljs-number">1</span>&#125;, R&#123;<span class="hljs-number">1</span>&#125;, ans;<br>        <span class="hljs-type">int</span> n = nums.<span class="hljs-built_in">size</span>();<br><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)<br>            L.<span class="hljs-built_in">push_back</span>(L.<span class="hljs-built_in">back</span>() * nums[i]);<br><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = n - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span>; i--)<br>            R.<span class="hljs-built_in">push_back</span>(R.<span class="hljs-built_in">back</span>() * nums[i]);<br><br>        <span class="hljs-built_in">reverse</span>(R.<span class="hljs-built_in">begin</span>(), R.<span class="hljs-built_in">end</span>());<br><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)<br>            ans.<span class="hljs-built_in">push_back</span>(L[i] * R[i+<span class="hljs-number">1</span>]);<br><br>        <span class="hljs-keyword">return</span> ans;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>作業系統筆記 Processes Conecpt</title>
    <link href="/notes/2024/07/26/os-chapter3/"/>
    <url>/notes/2024/07/26/os-chapter3/</url>
    
    <content type="html"><![CDATA[<blockquote><p>周志遠教授作業系統開放式課程</p></blockquote><h1 id="Process-Concept"><a href="#Process-Concept" class="headerlink" title="Process Concept"></a>Process Concept</h1><h3 id="Program"><a href="#Program" class="headerlink" title="Program"></a>Program</h3><ul><li>被動、Binary 的 File 存在硬碟裡面</li></ul><h3 id="Process"><a href="#Process" class="headerlink" title="Process"></a>Process</h3><ul><li><p>主動、正在記憶體裡面執行的程式</p></li><li><p>一個 Process 裡面包含：</p><ul><li>Code Segment (text section)</li><li>Data Section (global variables)</li><li>Stack (暫時的 local variables 和 functions)</li><li>Heap (動態分配的 variables 或 classes)</li><li>記錄現在的資料 (<strong>program counter</strong>、register contents)</li><li>其他相關的資源 (OS resources, e.g. open file handlers)</li></ul></li></ul><p><img src="/notes/" alt="Process In Memory"></p><h3 id="Threads"><a href="#Threads" class="headerlink" title="Threads"></a>Threads</h3><ul><li><p>A.K.A <strong>lightweight process</strong></p><ul><li>跟 Process 長的一樣，不過有些 Threads 可以共用 Memory 空間</li><li>是 Basic unit of CPU utilization</li></ul></li><li><p>在同一個 Process 底下的 Threads 會共用</p><ul><li>Code Section</li><li>Data Section</li><li>OS resources</li></ul></li><li><p>每個 Thread 有自己的</p><ul><li>Thread ID</li><li>Program Counter</li><li>Register Set</li><li>Stack</li></ul></li></ul><p>因此，在寫 Multi-Thread 的時候可以用 Global Variables (Data Section) 來做溝通</p><p><img src="/notes/" alt="Threads"></p><h2 id="Process-States"><a href="#Process-States" class="headerlink" title="Process States"></a>Process States</h2><ul><li>States<ul><li><p>New: 這個 Process 剛被創造出來</p><ul><li>Program Load 到 Memory，並初始化前面提到的那些 (Code Section、Data Section…)</li><li>分配要分配多少給 Process</li></ul></li><li><p>Ready: Process 要競爭的資源是 CPU，會有一個 Queue 存放這些 Process，等待 CPU 排程</p></li><li><p>Running: 在 Ready 中被選到了，可以開始執行程式</p><ul><li>有時候 Running State 會直接回到 Ready State，通常是因為 Timer 到了，送出 Interrupt，而不是因為 IO</li></ul></li><li><p>Waiting: 在做 IO 的時候不需要 CPU 參與，等到完成後會回到 Ready</p><ul><li>也有一個 Queue 來儲存</li></ul></li><li><p>Terminated: 釋放所有分配給這 Process 的資源</p></li></ul></li></ul><p><img src="/notes/" alt="Diagram of Process State"></p><h2 id="Process-Control-Block-PCB"><a href="#Process-Control-Block-PCB" class="headerlink" title="Process Control Block (PCB)"></a>Process Control Block (PCB)</h2><ul><li>OS 要能掌握每個 Process 的邏輯來管理，所以每一個 Process 會有一個 Process Control Block</li><li>像是前面說的把 Process 放進 Queue 其實是一個抽象的概念，實際上是放進 PCB，然後裡面的</li><li>PCB 裡面包含<ul><li>Process State (Ready、Waiting…)</li><li>Program Counter</li><li>CPU Registers</li><li>CPU Scheduling Information (這個 Process 的 Priority)</li><li>Memory-Management Information (Base&#x2F; Limit Register)</li><li>I&#x2F;O Status Information (正在做哪個 IO Device 的 IO)</li><li>Accounting Information (你開了幾個檔案)</li></ul></li></ul><p><img src="/notes/" alt="Process Control Block"></p><h2 id="Context-Switch"><a href="#Context-Switch" class="headerlink" title="Context Switch"></a>Context Switch</h2><ul><li><p>藉由 Interrupt，把原來的 Process 替換成另一個 Process</p><ul><li>會把舊 Process 的資料存到 PCB 裡，把新 Process 的資料 Load 到 PCB 裡</li></ul></li><li><p>Context Switch 所花的時間就是 Overhead，在這期間兩個 Process 都在 Idle，為了 Time-Sharing 這是無法避免的</p></li><li><p>Context Switch Time 基於</p><ul><li>Memory Speed</li><li>Register 數量</li><li>用特殊的 Instruction，像是某個 Instruction 可以一次 Load 所有 Register</li><li>Hardware Support: CPU 包含很多 Sets of Registers，一次去記很多程式的狀態，在 Context Switch 得時候就不用寫到 Memory</li></ul></li></ul><p><img src="/notes/" alt="Context Switch"></p><h1 id="Process-Scheduling"><a href="#Process-Scheduling" class="headerlink" title="Process Scheduling"></a>Process Scheduling</h1><ul><li>為了實現 Multiprogramming 和 Time Sharing</li></ul><h3 id="Queues"><a href="#Queues" class="headerlink" title="Queues"></a>Queues</h3><ul><li>Job Queue (New State): 哪些 Process 可以 Load 到 Memory</li><li>Ready Queue (Ready State)</li><li>Device Queue (Wait State)</li></ul><p><img src="/notes/" alt="Process Scheduling Queues"></p><p><img src="/notes/" alt="Process Scheduling Diagram"></p><h2 id="Scheculers"><a href="#Scheculers" class="headerlink" title="Scheculers"></a>Scheculers</h2><h1 id="Operations-on-Processes"><a href="#Operations-on-Processes" class="headerlink" title="Operations on Processes"></a>Operations on Processes</h1><h1 id="Interprocess-Communication"><a href="#Interprocess-Communication" class="headerlink" title="Interprocess Communication"></a>Interprocess Communication</h1>]]></content>
    
    
    
    <tags>
      
      <tag>OS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Javascript Note</title>
    <link href="/notes/2024/07/23/js-note/"/>
    <url>/notes/2024/07/23/js-note/</url>
    
    <content type="html"><![CDATA[<h2 id="let、const、var-的差別"><a href="#let、const、var-的差別" class="headerlink" title="let、const、var 的差別"></a>let、const、var 的差別</h2><iframe width = "100%" height = "400" src="//www.youtube.com/embed/Pychc22EG4Q" frameborder="0" allowfullscreen></iframe><h3 id="var"><a href="#var" class="headerlink" title="var"></a>var</h3><p>var 是 function-scoped 的變數，作用域為整個 function</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">exampleVar</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-keyword">var</span> x = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-literal">true</span>)&#123;<br>        <span class="hljs-keyword">var</span> x = <span class="hljs-number">2</span>;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(x); <span class="hljs-comment">// 2</span><br>    &#125;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(x); <span class="hljs-comment">// 2</span><br>&#125;<br></code></pre></td></tr></table></figure><p>因此上面這個例子，整個 function 的 x 是一樣的</p><h3 id="比較"><a href="#比較" class="headerlink" title="比較"></a>比較</h3><table><thead><tr><th align="center"></th><th align="center">var</th><th align="center">let</th><th align="center">const</th></tr></thead><tbody><tr><td align="center">範圍</td><td align="center">function-scoped</td><td align="center">block-scpoed</td><td align="center">block-scoped</td></tr><tr><td align="center">可重複定義</td><td align="center">O</td><td align="center">X</td><td align="center">X</td></tr><tr><td align="center">可修改</td><td align="center">O</td><td align="center">O</td><td align="center">X</td></tr><tr><td align="center">hoisting</td><td align="center">O</td><td align="center">X</td><td align="center">X</td></tr></tbody></table><h3 id="進階範例"><a href="#進階範例" class="headerlink" title="進階範例"></a>進階範例</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">3</span>; i++) &#123;<br>    <span class="hljs-built_in">setTimeout</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(i); <span class="hljs-comment">// 3, 3, 3</span><br>    &#125;, <span class="hljs-number">100</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>因為 var， i 只有一個，所以每次生成的 closure 捕捉到的 i 會是一樣的</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">3</span>; i++) &#123;<br>    <span class="hljs-built_in">setTimeout</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(i); <span class="hljs-comment">// 0, 1, 2</span><br>    &#125;, <span class="hljs-number">100</span>);<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Javascript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>javascript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>作業系統筆記 OS Structure</title>
    <link href="/notes/2024/07/18/os-chapter2/"/>
    <url>/notes/2024/07/18/os-chapter2/</url>
    
    <content type="html"><![CDATA[<blockquote><p>周志遠教授作業系統開放式課程</p></blockquote><h1 id="OS-Services"><a href="#OS-Services" class="headerlink" title="OS Services"></a>OS Services</h1><h2 id="User-Interface"><a href="#User-Interface" class="headerlink" title="User Interface"></a>User Interface</h2><h3 id="CLI-Command-Line-Interface"><a href="#CLI-Command-Line-Interface" class="headerlink" title="CLI (Command Line Interface)"></a>CLI (Command Line Interface)</h3><ul><li><p>GUI 是 based on CLI，所以 GUI 能做到的是 CLI 一定可以</p></li><li><p><strong>Shell</strong>: Command-line Interpreter (CSHELL, BASH)</p><ul><li>不屬於 OS，你打的指令不是直接交給 OS，是交給 Shell，方便使用者使用指令</li><li>一台電腦可能有很多使用者，每個使用者的喜好不同，介面、顏色、指令等等，可以做一些客製化的調整</li></ul></li></ul><h3 id="GUI-Graphic-User-Interface"><a href="#GUI-Graphic-User-Interface" class="headerlink" title="GUI (Graphic User Interface)"></a>GUI (Graphic User Interface)</h3><ul><li>Microsoft 崛起的原因</li></ul><h2 id="Communication"><a href="#Communication" class="headerlink" title="Communication"></a>Communication</h2><ul><li>不是單指跨電腦的網路，也可以是 Multi-thread、Multi-processor 等同一台電腦內部的溝通</li></ul><h3 id="Message-Passing"><a href="#Message-Passing" class="headerlink" title="Message Passing"></a>Message Passing</h3><ul><li>為了先前提到的 Protection (Base register、Limit register)，程式之間不能直接互相影響，會先把資料複製到 OS，再從 OS 複製到另一支程式</li><li>會比較慢</li></ul><h3 id="Shared-Memory"><a href="#Shared-Memory" class="headerlink" title="Shared Memory"></a>Shared Memory</h3><ul><li>也需要透過 System Call 去建立這塊 Shared Memory，不過像是 Multi-thread 預設就有</li><li>會有 Synchronization 的問題</li></ul><p><img src="/notes/./images/os-chapter2/Communication.png" alt="Communication"></p><p>OS Service 除了 User interface 和 Communication 以外，還有</p><ul><li>Program Execution </li><li>I&#x2F;O operations </li><li>File-system manipulation</li><li>Error detection </li><li>Resource allocation</li><li>Accounting</li><li>Protection and security</li></ul><h1 id="OS-Application-Interface"><a href="#OS-Application-Interface" class="headerlink" title="OS-Application Interface"></a>OS-Application Interface</h1><h2 id="System-Calls"><a href="#System-Calls" class="headerlink" title="System Calls"></a>System Calls</h2><ul><li>OS 提供很多 Services，要使用這些 Service 都會需要透過 System Call，所以 System Call 就是 OS 的 Interface</li><li>也是一種 Software Interrupt，這樣才能去改變 Mode</li><li>為了效能，是使用 Assembly Language 撰寫</li></ul><h2 id="API-Application-Program-Interface"><a href="#API-Application-Program-Interface" class="headerlink" title="API (Application Program Interface)"></a>API (Application Program Interface)</h2><ul><li><p>直接使用 System Call 是一件很麻煩的事情，所以 User 的程式通常是使用 API 來做到這件事，而不是直接 Call System Call。大部分的 API 都是使用 C 語言做成的 Library</p></li><li><p>API 有可能包含很多 System Call，也有可能完全沒有 System Call</p><ul><li>沒有 System Call: 方便使用者使用，像是一些數學的計算</li></ul></li><li><p>一些常見的 API</p><ul><li><p><strong>Win32</strong> API for <strong>Windows</strong></p></li><li><p><strong>POSIX</strong> API for <strong>POSIX-based Systems</strong> (UNIX、 Linux、Mac OS)</p><ul><li>POSIX: (Portable Operating System Interface for Unix)</li><li>我在 Linux 上寫一個程式可以執行，直接拿到 Mac 上一定也可以跑，因為 Interface 的定義完全一樣 (Library 可能不一樣)</li></ul></li><li><p><strong>Java</strong> API for <strong>Java Virtual Machine</strong> (JVM)</p></li></ul></li></ul><p><img src="/notes/./images/os-chapter2/OSInterface.png" alt="OS Interface"></p><h1 id="OS-Structure"><a href="#OS-Structure" class="headerlink" title="OS Structure"></a>OS Structure</h1><h2 id="Simple-OS-Architecture"><a href="#Simple-OS-Architecture" class="headerlink" title="Simple OS Architecture"></a>Simple OS Architecture</h2><ul><li>開發很快，但是系統裡面的架構全部混在一起</li><li>定義不清楚，非常不安全，也不好維護</li></ul><p><img src="/notes/./images/os-chapter2/SimpleOSArchitecture.png" alt="Simple OS Architecture"></p><h2 id="Layered-OS-Architecture"><a href="#Layered-OS-Architecture" class="headerlink" title="Layered OS Architecture"></a>Layered OS Architecture</h2><ul><li>功能分割得很清楚，上層可以 Call 下層，下層無法 Call 上層</li><li>很好 Debug、維護</li><li>因為是 Layerd，可能涉及到許多 Memory Copy，效能不好</li></ul><p><img src="/notes/./images/os-chapter2/LayeredOSArchitecture.png" alt="Layered OS Architecture"></p><h2 id="Microkernel-OS"><a href="#Microkernel-OS" class="headerlink" title="Microkernel OS"></a>Microkernel OS</h2><ul><li><p>Kernel 的程式碼越少越好，比較 Reliable，不要有 bug 就好</p></li><li><p>Modularize 的概念，Kernel 只負責溝通不同 Module，Kernel 以外的全部在 User Space</p></li><li><p>效能比 Layered 還要更糟糕</p><ul><li>User Space 的東西之間要溝通，都需要 <strong>System Call</strong></li><li>為了避免 Synchronization 的問題，都是透過 <strong>Message Passing</strong></li></ul></li></ul><p><img src="/notes/./images/os-chapter2/MicrokernelOS.png" alt="Microkernel OS"></p><h2 id="Modular-OS-Architecture"><a href="#Modular-OS-Architecture" class="headerlink" title="Modular OS Architecture"></a>Modular OS Architecture</h2><ul><li>很常見，現在大多是使用這種架構</li><li>跟 Microkernel OS 的差別在，都是在 Kernel Space，方便 Module 之間溝通，跑起來更有效率</li></ul><p><img src="/notes/./images/os-chapter2/ModularOSArchitecture.png" alt="Modular OS Architecture"></p><h2 id="Virtual-Machine"><a href="#Virtual-Machine" class="headerlink" title="Virtual Machine"></a>Virtual Machine</h2><ul><li>一台電腦有很多使用者，每個人可能會需要自己的 OS</li><li>VM 能夠做一個硬體抽象層，映射到原本電腦的硬體，讓 VM 使用</li></ul><p><img src="/notes/./images/os-chapter2/VirtualMachine.png" alt="Virtual Machine"></p><h3 id="問題"><a href="#問題" class="headerlink" title="問題"></a>問題</h3><ul><li><p>VM 全部都是跑在 User Space，無法直接執行 Privileged Instruction</p><ul><li>需要送出一個 Intrucupt 到原本的 OS (Kernel Space)，然後原本的 OS 再幫它重複執行一次，才在 User Space 做 Kernel Space 的事情</li><li>有些 CPU 會特別支援 Hardware Support，也就是多一個 bit 去記錄 User Mode、Kernel Mode 以及 Virtual Machine Mode，就可以直接執行 Privileged Instruction</li></ul></li><li><p>Critical Instruction</p><ul><li>User Space 可以執行，但是執行結果和在 Kernel Space 的執行結果不一樣</li></ul></li></ul><h3 id="Usage"><a href="#Usage" class="headerlink" title="Usage"></a>Usage</h3><ul><li>提供完全的 Protection，使用者不會互相影響，一個 OS 被 Hack 其它 OS 也沒事</li><li>提供特定的執行環境</li><li>測試開發 OS，避免整台電腦 Crash</li><li>實現資源管理，像是有些雲端計算會用到 VM</li></ul><h3 id="Full-Virtualization"><a href="#Full-Virtualization" class="headerlink" title="Full Virtualization"></a>Full Virtualization</h3><ul><li>Guest OS 的程式碼完全不用動，可以直接裝在原本的 OS 上</li><li>Vmware</li></ul><p><img src="/notes/./images/os-chapter2/FullVirtualization.png" alt="Full Virtualization"></p><h3 id="Para-virtualization"><a href="#Para-virtualization" class="headerlink" title="Para-virtualization"></a>Para-virtualization</h3><ul><li>Guest OS 會需要修改</li><li>有一個 Manager 去管理所有 Guest OS</li><li>Xen</li></ul><p><img src="/notes/./images/os-chapter2/Para-virtualization.png" alt="Para-virtualization"></p><h3 id="Java-Virtual-Machine"><a href="#Java-Virtual-Machine" class="headerlink" title="Java Virtual Machine"></a>Java Virtual Machine</h3><ul><li>Java 執行的方式就像跑在一個 Virual Machine 上</li><li>跟 Nachos 很像，只做 Instruction 的轉換，把 Java Machine 上 Compile 出的 Bytecodes 轉換成其它的</li><li>有一些 Translation 上的優化，像是 **Just-In-Time (JIT)**，記錄 Translation 過的 Instruction</li></ul><p><img src="/notes/./images/os-chapter2/JavaVirtualMachine.png" alt="Java Virtual Machine"></p>]]></content>
    
    
    
    <tags>
      
      <tag>OS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux Design Homework</title>
    <link href="/notes/2024/07/17/linux-design-homework/"/>
    <url>/notes/2024/07/17/linux-design-homework/</url>
    
    <content type="html"><![CDATA[<blockquote><p><a href="https://wiki.csie.ncku.edu.tw/linux/schedule">https://wiki.csie.ncku.edu.tw/linux/schedule</a></p></blockquote><h2 id="2018q1-Homework-quiz4"><a href="#2018q1-Homework-quiz4" class="headerlink" title="2018q1 Homework (quiz4)"></a><a href="https://hackmd.io/@sysprog/linked-list-quiz">2018q1 Homework (quiz4)</a></h2><h3 id="Quiz-1"><a href="#Quiz-1" class="headerlink" title="Quiz 1"></a>Quiz 1</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">node</span> &#123;</span> <span class="hljs-type">int</span> data; <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">node</span> *<span class="hljs-title">next</span>, *<span class="hljs-title">prev</span>;</span> &#125;;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">FuncA</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> node **start, <span class="hljs-type">int</span> value)</span> &#123;<br>    <span class="hljs-keyword">if</span> (!*start) &#123;<br>        <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">node</span> *<span class="hljs-title">new_node</span> =</span> <span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">struct</span> node));<br>        new_node-&gt;data = value;<br>        new_node-&gt;next = new_node-&gt;prev = new_node;<br>        *start = new_node;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">node</span> *<span class="hljs-title">last</span> =</span> (*start)-&gt;prev;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">node</span> *<span class="hljs-title">new_node</span> =</span> <span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">struct</span> node));<br>    new_node-&gt;data = value;<br>    new_node-&gt;next = *start;<br>    (*start)-&gt;prev = new_node;<br>    new_node-&gt;prev = last;<br>    last-&gt;next = new_node;<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">FuncB</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> node **start, <span class="hljs-type">int</span> value)</span> &#123;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">node</span> *<span class="hljs-title">last</span> =</span> (*start)-&gt;prev;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">node</span> *<span class="hljs-title">new_node</span> =</span> <span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">struct</span> node));<br>    new_node-&gt;data = value;<br>    new_node-&gt;next = *start;<br>    new_node-&gt;prev = last;<br>    last-&gt;next = (*start)-&gt;prev = new_node;<br>    *start = new_node;<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">FuncC</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> node **start, <span class="hljs-type">int</span> value1, <span class="hljs-type">int</span> value2)</span> &#123;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">node</span> *<span class="hljs-title">new_node</span> =</span> <span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">struct</span> node));<br>    new_node-&gt;data = value1;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">node</span> *<span class="hljs-title">temp</span> =</span> *start;<br>    <span class="hljs-keyword">while</span> (temp-&gt;data != value2)<br>        temp = temp-&gt;next;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">node</span> *<span class="hljs-title">next</span> =</span> temp-&gt;next;<br>    temp-&gt;next = new_node;<br>    new_node-&gt;prev = temp;<br>    new_node-&gt;next = next;<br>    next-&gt;prev = new_node;<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">display</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> node *start)</span> &#123;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">node</span> *<span class="hljs-title">temp</span> =</span> start;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Traversal in forward direction \n&quot;</span>);<br>    <span class="hljs-keyword">for</span> (; temp-&gt;next != start; temp = temp-&gt;next)<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>, temp-&gt;data);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>, temp-&gt;data);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\nTraversal in reverse direction \n&quot;</span>);<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">node</span> *<span class="hljs-title">last</span> =</span> start-&gt;prev;<br>    <span class="hljs-keyword">for</span> (temp = last; temp-&gt;prev != last; temp = temp-&gt;prev)<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>, temp-&gt;data);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>, temp-&gt;data);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">node</span> *<span class="hljs-title">start</span> =</span> <span class="hljs-literal">NULL</span>;<br>    FuncA(&amp;start, <span class="hljs-number">51</span>); FuncB(&amp;start, <span class="hljs-number">48</span>);<br>    FuncA(&amp;start, <span class="hljs-number">72</span>); FuncA(&amp;start, <span class="hljs-number">86</span>);<br>    FuncC(&amp;start, <span class="hljs-number">63</span>, <span class="hljs-number">51</span>);<br>    display(start);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="FuncA-的作用是"><a href="#FuncA-的作用是" class="headerlink" title="FuncA 的作用是"></a>FuncA 的作用是</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">FuncA</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> node **start, <span class="hljs-type">int</span> value)</span> &#123;<br>    <span class="hljs-comment">// 這是 circular 的 link list</span><br>    <span class="hljs-keyword">if</span> (!*start) &#123;<br>        <span class="hljs-comment">// 初始 node，prev、next 都指向自己</span><br>        <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">node</span> *<span class="hljs-title">new_node</span> =</span> <span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">struct</span> node));<br>        new_node-&gt;data = value;<br>        new_node-&gt;next = new_node-&gt;prev = new_node;<br>        *start = new_node;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">node</span> *<span class="hljs-title">last</span> =</span> (*start)-&gt;prev; <span class="hljs-comment">// 因為是 circular，start 的 prev 就是最後一個 node</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">node</span> *<span class="hljs-title">new_node</span> =</span> <span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">struct</span> node));<br>    new_node-&gt;data = value;<br>    new_node-&gt;next = *start; <span class="hljs-comment">// 這裡可以發現新 node 的 next 是 start，所以是新加在 link list 的最後面</span><br>    (*start)-&gt;prev = new_node; <br>    new_node-&gt;prev = last;<br>    last-&gt;next = new_node;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="Ans"><a href="#Ans" class="headerlink" title="Ans:"></a>Ans:</h5><pre><code class="hljs">(e) 建立新節點，內容是 value，並安插在結尾</code></pre><h4 id="FuncB-的作用是"><a href="#FuncB-的作用是" class="headerlink" title="FuncB 的作用是"></a>FuncB 的作用是</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">FuncB</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> node **start, <span class="hljs-type">int</span> value)</span> &#123;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">node</span> *<span class="hljs-title">last</span> =</span> (*start)-&gt;prev;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">node</span> *<span class="hljs-title">new_node</span> =</span> <span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">struct</span> node));<br>    new_node-&gt;data = value;<br>    new_node-&gt;next = *start;<br>    new_node-&gt;prev = last; <br>    last-&gt;next = (*start)-&gt;prev = new_node; <span class="hljs-comment">// 到這邊是新加一個 node start 的 prev，last 的 next</span><br>    *start = new_node; <span class="hljs-comment">// 更新 start，可以得知新 node 是新的 start，所以變成是加在 list 最前面</span><br>&#125;<br></code></pre></td></tr></table></figure><h5 id="Ans-1"><a href="#Ans-1" class="headerlink" title="Ans:"></a>Ans:</h5><pre><code class="hljs">(d) 建立新節點，內容是 value，並安插在開頭</code></pre><h4 id="FuncC-的作用是"><a href="#FuncC-的作用是" class="headerlink" title="FuncC 的作用是"></a>FuncC 的作用是</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">FuncC</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> node **start, <span class="hljs-type">int</span> value1, <span class="hljs-type">int</span> value2)</span> &#123;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">node</span> *<span class="hljs-title">new_node</span> =</span> <span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">struct</span> node));<br>    new_node-&gt;data = value1;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">node</span> *<span class="hljs-title">temp</span> =</span> *start;<br>    <span class="hljs-keyword">while</span> (temp-&gt;data != value2) <span class="hljs-comment">// 找到 value 為 value2 的 node</span><br>        temp = temp-&gt;next;<br>    <span class="hljs-comment">// 把新加的 value1 的 node 加在 value2 的 node 後面</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">node</span> *<span class="hljs-title">next</span> =</span> temp-&gt;next;<br>    temp-&gt;next = new_node;<br>    new_node-&gt;prev = temp;<br>    new_node-&gt;next = next;<br>    next-&gt;prev = new_node;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="Ans-2"><a href="#Ans-2" class="headerlink" title="Ans:"></a>Ans:</h5><pre><code class="hljs">(e) 找到節點內容為 value2 的節點，並在之後插入新節點，內容為 value1</code></pre><h4 id="在程式輸出中，訊息-Traversal-in-forward-direction-後依序印出哪幾個數字呢？"><a href="#在程式輸出中，訊息-Traversal-in-forward-direction-後依序印出哪幾個數字呢？" class="headerlink" title="在程式輸出中，訊息 Traversal in forward direction 後依序印出哪幾個數字呢？"></a>在程式輸出中，訊息 Traversal in forward direction 後依序印出哪幾個數字呢？</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">node</span> *<span class="hljs-title">start</span> =</span> <span class="hljs-literal">NULL</span>;<br>    FuncA(&amp;start, <span class="hljs-number">51</span>); <span class="hljs-comment">// 51</span><br>    FuncB(&amp;start, <span class="hljs-number">48</span>); <span class="hljs-comment">// 48 -&gt; 51 </span><br>    FuncA(&amp;start, <span class="hljs-number">72</span>); <span class="hljs-comment">// 48 -&gt; 51 -&gt; 72</span><br>    FuncA(&amp;start, <span class="hljs-number">86</span>); <span class="hljs-comment">// 48 -&gt; 51 -&gt; 72 -&gt; 86</span><br>    FuncC(&amp;start, <span class="hljs-number">63</span>, <span class="hljs-number">51</span>); <span class="hljs-comment">// 48 -&gt; 51 -&gt; 63 -&gt; 72 -&gt; 86</span><br>    display(start);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="Ans-3"><a href="#Ans-3" class="headerlink" title="Ans:"></a>Ans:</h5><pre><code class="hljs">48 -&gt; 51 -&gt; 63 -&gt; 72 -&gt; 86</code></pre><h4 id="在程式輸出中，訊息-Traversal-in-reverse-direction-後依序印出哪幾個數字呢？"><a href="#在程式輸出中，訊息-Traversal-in-reverse-direction-後依序印出哪幾個數字呢？" class="headerlink" title="在程式輸出中，訊息 Traversal in reverse direction 後依序印出哪幾個數字呢？"></a>在程式輸出中，訊息 Traversal in reverse direction 後依序印出哪幾個數字呢？</h4><h5 id="Ans-4"><a href="#Ans-4" class="headerlink" title="Ans:"></a>Ans:</h5><pre><code class="hljs">86 -&gt; 72 -&gt; 63 -&gt; 51 -&gt; 48</code></pre><h3 id="Quiz-2"><a href="#Quiz-2" class="headerlink" title="Quiz 2"></a>Quiz 2</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><br><span class="hljs-comment">/* Link list node */</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">node</span> &#123;</span> <span class="hljs-type">int</span> data; <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">node</span> *<span class="hljs-title">next</span>;</span> &#125;;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">FuncX</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> node *head, <span class="hljs-type">int</span> *data)</span> &#123;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">node</span> *<span class="hljs-title">node</span>;</span><br>    <span class="hljs-keyword">for</span> (node = head-&gt;next; node &amp;&amp; node != head; node = node-&gt;next)<br>        data++;<br>    <span class="hljs-keyword">return</span> node - head;<br>&#125;<br><br><span class="hljs-keyword">struct</span> node *<span class="hljs-title function_">node_new</span><span class="hljs-params">(<span class="hljs-type">int</span> data)</span> &#123;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">node</span> *<span class="hljs-title">temp</span> =</span> <span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">struct</span> node));<br>    temp-&gt;data = data; temp-&gt;next = <span class="hljs-literal">NULL</span>;<br>    <span class="hljs-keyword">return</span> temp;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">int</span> count = <span class="hljs-number">0</span>;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">node</span> *<span class="hljs-title">head</span> =</span> node_new(<span class="hljs-number">0</span>);<br>    head-&gt;next = node_new(<span class="hljs-number">1</span>);<br>    head-&gt;next-&gt;next = node_new(<span class="hljs-number">2</span>);<br>    head-&gt;next-&gt;next-&gt;next = node_new(<span class="hljs-number">3</span>);<br>    head-&gt;next-&gt;next-&gt;next-&gt;next = node_new(<span class="hljs-number">4</span>);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;K1 &gt;&gt; %s\n&quot;</span>, FuncX(head, &amp;count) ? <span class="hljs-string">&quot;Yes&quot;</span> : <span class="hljs-string">&quot;No&quot;</span>);<br>    head-&gt;next-&gt;next-&gt;next-&gt;next = head;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;K2 &gt;&gt; %s\n&quot;</span>, FuncX(head, &amp;count) ? <span class="hljs-string">&quot;Yes&quot;</span> : <span class="hljs-string">&quot;No&quot;</span>);<br>    head-&gt;next-&gt;next-&gt;next-&gt;next-&gt;next = head-&gt;next;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;K3 &gt;&gt; %s\n&quot;</span>, FuncX(head, &amp;count) ? <span class="hljs-string">&quot;Yes&quot;</span> : <span class="hljs-string">&quot;No&quot;</span>);<br>    head-&gt;next = head-&gt;next-&gt;next-&gt;next-&gt;next-&gt;next-&gt;next-&gt;next-&gt;next;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;K4 &gt;&gt; %s\n&quot;</span>, FuncX(head, &amp;count) ? <span class="hljs-string">&quot;Yes&quot;</span> : <span class="hljs-string">&quot;No&quot;</span>);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;K5 &gt;&gt; %d\n&quot;</span>, head-&gt;next-&gt;data);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;count &gt;&gt; %d\n&quot;</span>, count);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="FuncX-的作用是-涵蓋程式執行行為的正確描述最多者"><a href="#FuncX-的作用是-涵蓋程式執行行為的正確描述最多者" class="headerlink" title="FuncX 的作用是 (涵蓋程式執行行為的正確描述最多者)"></a>FuncX 的作用是 (涵蓋程式執行行為的正確描述最多者)</h4><h5 id="Ans-5"><a href="#Ans-5" class="headerlink" title="Ans:"></a>Ans:</h5><pre><code class="hljs">(f) 判斷是否為 circular linked list，若為 circular 則回傳 0，其他非零值，過程中計算走訪的節點總數</code></pre><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">int</span> count = <span class="hljs-number">0</span>;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">node</span> *<span class="hljs-title">head</span> =</span> node_new(<span class="hljs-number">0</span>); <span class="hljs-comment">// 0</span><br>    head-&gt;next = node_new(<span class="hljs-number">1</span>); <span class="hljs-comment">// 0 -&gt; 1</span><br>    head-&gt;next-&gt;next = node_new(<span class="hljs-number">2</span>); <span class="hljs-comment">// 0 -&gt; 1 -&gt; 2</span><br>    head-&gt;next-&gt;next-&gt;next = node_new(<span class="hljs-number">3</span>); <span class="hljs-comment">// 0 -&gt; 1 -&gt; 2 -&gt; 3</span><br>    head-&gt;next-&gt;next-&gt;next-&gt;next = node_new(<span class="hljs-number">4</span>); <span class="hljs-comment">// 0 -&gt; 1 -&gt; 2 -&gt; 3 -&gt; 4</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;K1 &gt;&gt; %s\n&quot;</span>, FuncX(head, &amp;count) ? <span class="hljs-string">&quot;Yes&quot;</span> : <span class="hljs-string">&quot;No&quot;</span>); <span class="hljs-comment">// Yes</span><br>    head-&gt;next-&gt;next-&gt;next-&gt;next = head; <span class="hljs-comment">// 0 -&gt; 1 -&gt; 2 -&gt; 3 -&gt; 0 -&gt; ...</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;K2 &gt;&gt; %s\n&quot;</span>, FuncX(head, &amp;count) ? <span class="hljs-string">&quot;Yes&quot;</span> : <span class="hljs-string">&quot;No&quot;</span>); <span class="hljs-comment">// No</span><br>    head-&gt;next-&gt;next-&gt;next-&gt;next-&gt;next = head-&gt;next; <span class="hljs-comment">// 0 -&gt; 1 -&gt; 2 -&gt; 3 -&gt; 0 -&gt; ...</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;K3 &gt;&gt; %s\n&quot;</span>, FuncX(head, &amp;count) ? <span class="hljs-string">&quot;Yes&quot;</span> : <span class="hljs-string">&quot;No&quot;</span>); <span class="hljs-comment">// No</span><br>    head-&gt;next = head-&gt;next-&gt;next-&gt;next-&gt;next-&gt;next-&gt;next-&gt;next-&gt;next; <span class="hljs-comment">// 0 -&gt; 0 -&gt; ...</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;K4 &gt;&gt; %s\n&quot;</span>, FuncX(head, &amp;count) ? <span class="hljs-string">&quot;Yes&quot;</span> : <span class="hljs-string">&quot;No&quot;</span>); <span class="hljs-comment">// No</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;K5 &gt;&gt; %d\n&quot;</span>, head-&gt;next-&gt;data); <span class="hljs-comment">// 0</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;count &gt;&gt; %d\n&quot;</span>, count); <span class="hljs-comment">// 10</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="K1-後面接的輸出為何"><a href="#K1-後面接的輸出為何" class="headerlink" title="K1 &gt;&gt; 後面接的輸出為何"></a>K1 &gt;&gt; 後面接的輸出為何</h4><h5 id="Ans-6"><a href="#Ans-6" class="headerlink" title="Ans:"></a>Ans:</h5><pre><code class="hljs">Yes</code></pre><h4 id="K2-後面接的輸出為何"><a href="#K2-後面接的輸出為何" class="headerlink" title="K2 &gt;&gt; 後面接的輸出為何"></a>K2 &gt;&gt; 後面接的輸出為何</h4><h5 id="Ans-7"><a href="#Ans-7" class="headerlink" title="Ans:"></a>Ans:</h5><pre><code class="hljs">No</code></pre><h4 id="K3-後面接的輸出為何"><a href="#K3-後面接的輸出為何" class="headerlink" title="K3 &gt;&gt; 後面接的輸出為何"></a>K3 &gt;&gt; 後面接的輸出為何</h4><h5 id="Ans-8"><a href="#Ans-8" class="headerlink" title="Ans:"></a>Ans:</h5><pre><code class="hljs">No</code></pre><h4 id="K4-後面接的輸出為何"><a href="#K4-後面接的輸出為何" class="headerlink" title="K4 &gt;&gt; 後面接的輸出為何"></a>K4 &gt;&gt; 後面接的輸出為何</h4><h5 id="Ans-9"><a href="#Ans-9" class="headerlink" title="Ans:"></a>Ans:</h5><pre><code class="hljs">No</code></pre><h4 id="K5-後面接的輸出為何"><a href="#K5-後面接的輸出為何" class="headerlink" title="K5 &gt;&gt; 後面接的輸出為何"></a>K5 &gt;&gt; 後面接的輸出為何</h4><h5 id="Ans-10"><a href="#Ans-10" class="headerlink" title="Ans:"></a>Ans:</h5><pre><code class="hljs">0</code></pre><h4 id="count-後面接的輸出為何"><a href="#count-後面接的輸出為何" class="headerlink" title="count &gt;&gt; 後面接的輸出為何"></a>count &gt;&gt; 後面接的輸出為何</h4><h5 id="Ans-11"><a href="#Ans-11" class="headerlink" title="Ans:"></a>Ans:</h5><pre><code class="hljs">10</code></pre><h3 id="訂正"><a href="#訂正" class="headerlink" title="訂正"></a>訂正</h3><p>FuncX 的作用應為 <code>(e) 判斷是否為 circular linked list，若為 circular 則回傳 0，其他非零值</code>，沒辦法計算結點總數，因為它傳入的是 count 的 pointer，且在 FuncX 裡面是用 <code>data++</code> 而非 <code>(*data)++</code>，所以 main() 裡面的 count 應為 0</p><h2 id="2020q1-第-1-週測驗題"><a href="#2020q1-第-1-週測驗題" class="headerlink" title="2020q1 第 1 週測驗題"></a><a href="https://hackmd.io/@sysprog/linux2020-quiz1">2020q1 第 1 週測驗題</a></h2><h3 id="Quiz-1-1"><a href="#Quiz-1-1" class="headerlink" title="Quiz 1"></a>Quiz 1</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> __<span class="hljs-title">list</span> &#123;</span><br>    <span class="hljs-type">int</span> data;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> __<span class="hljs-title">list</span> *<span class="hljs-title">next</span>;</span><br>&#125; <span class="hljs-built_in">list</span>;<br><br><span class="hljs-comment">// 在不存在環狀結構的狀況下，以下函式能夠對 linked list 元素從小到大排序:</span><br><span class="hljs-built_in">list</span> *<span class="hljs-title function_">sort</span><span class="hljs-params">(<span class="hljs-built_in">list</span> *start)</span> &#123;<br>    <span class="hljs-keyword">if</span> (!start || !start-&gt;next)<br>        <span class="hljs-keyword">return</span> start;<br>    <span class="hljs-built_in">list</span> *left = start;<br>    <span class="hljs-built_in">list</span> *right = left-&gt;next;<br>    LL0;<br><br>    left = sort(left);<br>    right = sort(right);<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-built_in">list</span> *merge = <span class="hljs-literal">NULL</span>; left || right; ) &#123;<br>        <span class="hljs-keyword">if</span> (!right || (left &amp;&amp; left-&gt;data &lt; right-&gt;data)) &#123;<br>            <span class="hljs-keyword">if</span> (!merge) &#123;<br>                LL1;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                LL2;<br>                merge = merge-&gt;next;<br>            &#125;<br>            LL3;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">if</span> (!merge) &#123;<br>                LL4;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                LL5;<br>                merge = merge-&gt;next;<br>            &#125;<br>            LL6;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> start;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="LL0"><a href="#LL0" class="headerlink" title="LL0 &#x3D; ?"></a>LL0 &#x3D; ?</h4><h5 id="Ans-12"><a href="#Ans-12" class="headerlink" title="Ans:"></a>Ans:</h5><pre><code class="hljs">(a) left-&gt;next = NULL</code></pre><h4 id="LL1"><a href="#LL1" class="headerlink" title="LL1 &#x3D; ?"></a>LL1 &#x3D; ?</h4><pre><code class="hljs">start = merge = left</code></pre><h4 id="LL2"><a href="#LL2" class="headerlink" title="LL2 &#x3D; ?"></a>LL2 &#x3D; ?</h4><pre><code class="hljs">merge-&gt;next = left</code></pre><h4 id="LL3"><a href="#LL3" class="headerlink" title="LL3 &#x3D; ?"></a>LL3 &#x3D; ?</h4><pre><code class="hljs">left = left-&gt;next</code></pre><h4 id="LL4"><a href="#LL4" class="headerlink" title="LL4 &#x3D; ?"></a>LL4 &#x3D; ?</h4><pre><code class="hljs">start = merge = right</code></pre><h4 id="LL5"><a href="#LL5" class="headerlink" title="LL5 &#x3D; ?"></a>LL5 &#x3D; ?</h4><pre><code class="hljs">merge-&gt;next = right</code></pre><h4 id="LL6"><a href="#LL6" class="headerlink" title="LL6 &#x3D; ?"></a>LL6 &#x3D; ?</h4><pre><code class="hljs">right = right-&gt;next</code></pre><ul><li><h3 id="解釋上述程式運作原理"><a href="#解釋上述程式運作原理" class="headerlink" title="解釋上述程式運作原理"></a>解釋上述程式運作原理</h3><p>  顯然這份程式碼是在做遞迴版的 Link list 的 <code>Insertion Sort</code>。</p><p>  當它分割成 left 和 right 兩份時，在運行最下方的 for loop 時 left 那份不能碰到 right 那份，兩者不應該重疊，因此可以合理推測 LL0 是 <code>left-&gt;next = NULL</code>。</p><p>  至於 for loop 做的事情只是單純一個一個 node 比大小而已，因此像是 <code>right 為空</code>或 <code>left 值 &lt; right 值</code>時，就更新 merge-&gt;next 的值為 left，然後由於最後是 return start node，因此當 merge 為空時 (第一個比較的出來的 node)，也要設定 start node，所以 LL1 是 <code>start = merge = left</code>。</p></li><li><h3 id="指出程式改進空間，特別是考慮到-Optimizing-merge-sort"><a href="#指出程式改進空間，特別是考慮到-Optimizing-merge-sort" class="headerlink" title="指出程式改進空間，特別是考慮到 Optimizing merge sort"></a>指出程式改進空間，特別是考慮到 <a href="https://en.wikipedia.org/wiki/Merge_sort#Optimizing_merge_sort">Optimizing merge sort</a></h3><p>  由於是在這份程式碼中， left 永遠只會有一個 node，並將其插入 right 中的 list。但是 Insertion Sort 的時間複雜度為 $\Theta(n^2)$。</p><p>  最好優化的方式自然會聯想到 <code>Merge Sort</code>，其時間複雜度為 $\Theta(n log(n))$，只要在這邊去尋找 list 的中點，將其設為 right，也就是讓 left 和 right 的長度相近，一人一半。</p></li><li><h3 id="將上述-singly-linked-list-擴充為-circular-doubly-linked-list-並重新實作對應的-sort"><a href="#將上述-singly-linked-list-擴充為-circular-doubly-linked-list-並重新實作對應的-sort" class="headerlink" title="將上述 singly-linked list 擴充為 circular doubly-linked list 並重新實作對應的 sort"></a>將上述 singly-linked list 擴充為 circular doubly-linked list 並重新實作對應的 sort</h3></li><li><h3 id="依循-Linux-核心-include-linux-list-h-程式碼的方式，改寫上述排序程式"><a href="#依循-Linux-核心-include-linux-list-h-程式碼的方式，改寫上述排序程式" class="headerlink" title="依循 Linux 核心 include&#x2F;linux&#x2F;list.h 程式碼的方式，改寫上述排序程式"></a>依循 Linux 核心 include&#x2F;linux&#x2F;list.h 程式碼的方式，改寫上述排序程式</h3></li><li><h3 id="嘗試將原本遞迴的程式改寫為-iterative-版本"><a href="#嘗試將原本遞迴的程式改寫為-iterative-版本" class="headerlink" title="嘗試將原本遞迴的程式改寫為 iterative 版本"></a>嘗試將原本遞迴的程式改寫為 iterative 版本</h3></li></ul>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>作業系統筆記 Introduction</title>
    <link href="/notes/2024/07/09/os-chapter1/"/>
    <url>/notes/2024/07/09/os-chapter1/</url>
    
    <content type="html"><![CDATA[<blockquote><p>周志遠教授作業系統開放式課程</p></blockquote><h1 id="Computer-System"><a href="#Computer-System" class="headerlink" title="Computer System"></a>Computer System</h1><ul><li>由 Hardware、OS、Application、User 組成<ul><li>User：people、machines</li><li>Application：使用 system resources 來解決問題的方式，像是各種軟體</li><li>Operation System：<strong>controls</strong> 與 <strong>coordinates</strong> 資源的使用</li><li>Hardware：提供基本的計算資源（CPU、memory、IO devices）</li></ul></li></ul><h1 id="What-is-an-Operation-System"><a href="#What-is-an-Operation-System" class="headerlink" title="What is an Operation System"></a>What is an Operation System</h1><ul><li><p><strong>Permanent</strong> Software</p><ul><li>電腦啟動後永遠存在，沒有它電腦就不會運作</li></ul></li><li><p><strong>Abstracts</strong> 硬體資源給使用者使用</p><ul><li>把底層的各種資源變成一堆 API，給使用者方便使用，virtual 的概念</li></ul></li></ul><h2 id="General-Purpose-Operating-Systems"><a href="#General-Purpose-Operating-Systems" class="headerlink" title="General-Purpose Operating Systems"></a>General-Purpose Operating Systems</h2><ul><li>Linker 會 link System Library，裡面有一堆 System call 的 API</li><li>使用 printf 的時候要印到螢幕，是 OS 負責的，所以要 system call<ul><li>user 呼叫 printf -&gt; printf 呼叫 system call -&gt; system call 呼叫 driver…</li></ul></li><li>Device drivers 是 OS 的一部分</li></ul><p><img src="/notes/./images/os-chapter1/GeneralPurposeOperatingSystems.png" alt="General-Purpose Operating Systems"></p><h2 id="OS-的定義"><a href="#OS-的定義" class="headerlink" title="OS 的定義"></a>OS 的定義</h2><ul><li>Resource allocator<ul><li><strong>manages</strong> 和 <strong>allocates resources</strong> 來確保公平性和效率</li></ul></li><li>Control program<ul><li><strong>controls</strong> 程式的執行 (driver) 和 IO devices 的操作</li></ul></li><li>Kernel<ul><li>OS 又稱為 Kernel</li></ul></li></ul><h2 id="OS-的目的"><a href="#OS-的目的" class="headerlink" title="OS 的目的"></a>OS 的目的</h2><ul><li>方便性 (convenience)<ul><li>像是 windows 的崛起，也就是發展出圖形介面，讓使用者更方便操作</li></ul></li><li>效率 (Efficiency)<ul><li>更有效率的使用資源，當問題很複雜時，Efficiency 是最後追求的東西</li><li>像是很多人用 Linux，是因為圖形介面也會吃資源，但那不是必要的</li></ul></li><li>兩者衝突，追求方便性效率就下降，追求效率方面性就下降</li></ul><h2 id="OS-的重要性"><a href="#OS-的重要性" class="headerlink" title="OS 的重要性"></a>OS 的重要性</h2><ul><li>OS 是 user program 和 hardware 之間 <strong>唯一</strong> 的 interface，一定需要經過它</li><li>OS 絕對不能有 bug，一旦 crash 掉整台電腦就掛了</li><li>OS 和電腦的架構息息相關，因此隨著需求不同，也發展出形形色色的 OS</li></ul><h1 id="Computer-System-Organization"><a href="#Computer-System-Organization" class="headerlink" title="Computer-System Organization"></a>Computer-System Organization</h1><ul><li>由一個 Bus 連接 CPU、Memory、IO Device 等，作業系統就負責 <strong>Control</strong> 和 <strong>Coordinate</strong></li></ul><p><img src="/notes/./images/os-chapter1/ComputerSystemOrganization.png" alt="Computer-System Organization"></p><h2 id="Device-Controller-Hardware"><a href="#Device-Controller-Hardware" class="headerlink" title="Device Controller (Hardware)"></a>Device Controller (Hardware)</h2><ul><li>負責控制最 low level 的硬體，每個 Device 會有一個 Device Controller 來做溝通</li><li>Status reg 用來記錄現在 device controller 是 busy 還是 idle</li><li>Data reg 和 buffer 都是用來存資料，會先寫到 reg 再寫到 buffer</li><li>CPU 下指令後，Device controller 就能夠去 access disk 資料到自己的 local buffer</li><li>Memory 是 CPU 在用的，所以 CPU 負責 移入&#x2F; 移出 memory 的資料到 Device Controller 上的 local buffer</li></ul><p><img src="/notes/./images/os-chapter1/DeviceController.png" alt="Device Controller"></p><p>由於 Device Controller 上的 Buffer 空間是有限的，因此會需要用一些技巧來解決，像是 Busy&#x2F; wait、Interrupt</p><h2 id="Busy-wait-output"><a href="#Busy-wait-output" class="headerlink" title="Busy&#x2F;wait output"></a>Busy&#x2F;wait output</h2><ul><li>最簡單暴力的運行方式，但是很浪費 CPU，CPU 變成用來監控 Buffer</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">define</span> OUT_CHAR 0x1000 <span class="hljs-comment">// device data register</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> OUT_STATUS 0x1001 <span class="hljs-comment">// device status register</span></span><br><br>current_char = mystring;<br><span class="hljs-keyword">while</span> (*current_char != <span class="hljs-string">&#x27;\0&#x27;</span>) &#123;<br>  <span class="hljs-built_in">poke</span>(OUT_CHAR,*current_char); <span class="hljs-comment">// 寫到 device controller 的 buffer</span><br>  <span class="hljs-keyword">while</span> (<span class="hljs-built_in">peek</span>(OUT_STATUS) != <span class="hljs-number">0</span>); <span class="hljs-comment">// busy waiting</span><br>  current_char++;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Interrupt-I-O"><a href="#Interrupt-I-O" class="headerlink" title="Interrupt I&#x2F;O"></a>Interrupt I&#x2F;O</h2><ul><li>原本 CPU 在執行某程式碼，Interrupt 可以打斷這件事情，要求 CPU 先做其他事情，做完之後再回去執行原本的程式碼</li><li>現在的作業系統都是這種形式</li></ul><p><img src="/notes/./images/os-chapter1/InterruptDrivenIO.png" alt="Interrupt-Driven I/O"></p><p>又可以分成 Hardware 和 Software</p><h3 id="Hardware-Interrupt"><a href="#Hardware-Interrupt" class="headerlink" title="Hardware Interrupt"></a>Hardware Interrupt</h3><ul><li>又稱為 Signal</li></ul><h4 id="Interrupt-Service-Routine"><a href="#Interrupt-Service-Routine" class="headerlink" title="Interrupt Service Routine"></a>Interrupt Service Routine</h4><ul><li>interrupt vector 是 array of function pointers，array 大小是固定的<ul><li>因為每個 function 的程式碼大小不同，所以這邊用指標來儲存，每個欄位是 4 bytes</li></ul></li><li>signal 都會有一個 singal number，根據這個 number 去找 vector 上的欄位</li><li>每個 port 的 hardware 有燒死的 singal number， 裝 driver 的時候會 overwrite 那個欄位的 fucntion pointer 的位置，去執行你要處理的程式碼</li></ul><p><img src="/notes/./images/os-chapter1/Hardwareinterrupt.png" alt="Hardware interrupt"></p><h3 id="Softwarae-Interrupt"><a href="#Softwarae-Interrupt" class="headerlink" title="Softwarae Interrupt"></a>Softwarae Interrupt</h3><ul><li>又稱為 Trap</li></ul><h4 id="Interrupt-Service-Routine-1"><a href="#Interrupt-Service-Routine-1" class="headerlink" title="Interrupt Service Routine"></a>Interrupt Service Routine</h4><ul><li>是用 switch case 而不是 array，因為軟體有無限的可能性，可以任意定義各種不同的 system call</li><li>流程跟 hardware interrupt 差不多，根據 system call 的 number 來去找尋對應的 function call</li><li>通常是使用者的程式去 Trigger 的，又可以分成主動和被動<ul><li>主動，也就是去 call <strong>System Call</strong></li><li>被動像是出現 Error 的時候要處理</li></ul></li></ul><p><img src="/notes/./images/os-chapter1/Softwareinterrupt.png" alt="Software interrupt"></p><p>不管是 Hardware Interrupt 或是 Software Interrupt，Interrupt 的時候必須記得被打斷的程式的 Instruction Address，才能再處理完 Interrupt 回去繼續執行。</p><p>有時候 Interrupt 還會有 Hierachy，像是有時候動滑鼠會沒有反應，是因為它卡在某 Interrupt routine 裡面，所以沒有處理到滑鼠的 Interrupt</p><h1 id="Storage-Device-Hierarchy"><a href="#Storage-Device-Hierarchy" class="headerlink" title="Storage-Device Hierarchy"></a>Storage-Device Hierarchy</h1><p><img src="/notes/./images/os-chapter1/StorageDeviceHierarchy.png" alt="Storage-Device Hierarchy"></p><ul><li>真正的大型的系統最後還是用 tapes，因為非常 reliable，不太容易壞，而且很便宜</li><li>這是最傳統的架構，現在有很多其他的 storage device 會插在中間</li><li>要考量的點<ul><li>speed, cost, <strong>volatility</strong></li><li>volatile 關掉會遺失，memory 以上的全部都是 volatile</li></ul></li><li><strong>Main memory</strong> 是 CPU 能夠直接 access 的唯一大型的 storage</li><li>Secondary storage<ul><li>memory 以下都叫做 secondary storage，代表 CPU 沒辦法直接讀取</li><li><strong>是大型的 non-volatile 的 storage</strong></li></ul></li></ul><h3 id="Random-Access-Memory"><a href="#Random-Access-Memory" class="headerlink" title="Random-Access Memory"></a>Random-Access Memory</h3><ul><li><p>DRAM (Dynamic RAM)</p><ul><li>one transistor</li><li>less power</li><li>must be periodically refreshed </li><li>體積小，速度比較慢</li><li>因為 CPU 有很多 core， RAM 的速度其實就那樣，channel 的 bus 其實才是真正的 bottleneck</li><li>Main Memory</li></ul></li><li><p>SRAM (Static RAM)</p><ul><li>six transistors</li><li>more power</li><li>Cache Memory</li></ul></li></ul><p>Random Access 重要的地方是，你讀取任何位置的資料，時間都是一樣的，才能確保每次執行的結果相同，如果不一樣的話使用者會很難控制電腦</p><h3 id="Disk-Mechanism"><a href="#Disk-Mechanism" class="headerlink" title="Disk Mechanism"></a>Disk Mechanism</h3><ul><li>讀取的時間跟資料的位置有關係</li><li>速度計算<ul><li>Transfer Time &#x3D; data size &#x2F; transfer rate</li><li>Positioning Time &#x3D; Seek Time (Cylinder) + Rotational Latency (Sector)</li></ul></li><li>如果是連續資料的讀取，其實 Hard Drive 並不會輸 SSD</li></ul><p><img src="/notes/./images/os-chapter1/PerformanceOfVariousStorage.png" alt="Performance Of Various Storage"></p><h3 id="Caching"><a href="#Caching" class="headerlink" title="Caching"></a>Caching</h3><ul><li>把速度比較慢的 Storage 複製到速度比較快的 Storage</li><li>如果這層找不到資料，會一層一層往下檢查，直到找到，所以有時候會比沒有 Caching 還慢</li></ul><p><img src="/notes/./images/os-chapter1/Caching.png" alt="Caching"></p><h4 id="Coherency-and-Consistency-Issue"><a href="#Coherency-and-Consistency-Issue" class="headerlink" title="Coherency and Consistency Issue"></a>Coherency and Consistency Issue</h4><ul><li><p>對資料做修改時，如果 Cache 修改資料時沒有更新到 Memory，其他程式在讀取時，會發生這種問題。像是 Multi-Core Processor 就會需要去處理，因為大家的 L1 Cache 是不同的，但是 L2、L3 相同</p></li><li><p>Single task accessing</p><ul><li>基本上沒問題，只會用到最上層的</li></ul></li><li><p>Multi-task Accessing</p><ul><li>要處理大量這類的問題</li></ul></li><li><p>Distributed System</p><ul><li>更加複雜，還要考慮到網路的問題</li></ul></li></ul><h1 id="Hardware-Protection"><a href="#Hardware-Protection" class="headerlink" title="Hardware Protection"></a>Hardware Protection</h1><p>不是指 Security (網路攻擊、惡意攻擊)，指的是很多程式在執行，或是很多使用者在執行時，不會影響彼此，像是 Memory 的內容只有我自己能夠讀取，其他使用者無法讀取</p><h2 id="Dual-Mode"><a href="#Dual-Mode" class="headerlink" title="Dual-Mode"></a>Dual-Mode</h2><ul><li>藉由 <strong>Hardware Support</strong> 來做最基本的 Protection，其他軟體會基於 Hardware 來實現 Protection<ul><li>User Mode - 來自使用者執行的程式</li><li>Monitor Mode (Kernel Mode) - 來自 OS 執行使用者的程式</li></ul></li><li>Call Interrupt 時，它知道你正在用 System Call，所以它會把 Mode bit 變成 0 (Kernel Mode)，沒有的話就是 1 (User Mode)</li></ul><h3 id="Priviledge-Instructions"><a href="#Priviledge-Instructions" class="headerlink" title="Priviledge Instructions"></a>Priviledge Instructions</h3><ul><li>必須在 Kernel Mode 才能執行的 Instruction，如果他發現 Mode bit 是 1，它會告訴 OS，送給你一個 fault</li><li>保護電腦，不然使用者隨便寫個 Instruction 送到 CPU 就可以控制硬體</li></ul><h2 id="I-O-Protection"><a href="#I-O-Protection" class="headerlink" title="I&#x2F;O Protection"></a>I&#x2F;O Protection</h2><ul><li>每個 I&#x2F;O Instructions 都是 <strong>Previledge Instructions</strong>，都要透過 OS</li><li>早期有個 Bypass Hack 的方式，也就是去改寫 Interrupt Vector 裡面的值，所以 OS 就能去執行我自己想要的程式碼</li></ul><h2 id="Memory-Protection"><a href="#Memory-Protection" class="headerlink" title="Memory Protection"></a>Memory Protection</h2><ul><li><p>Protect</p><ul><li>要保護 Interrupt Vector、Interrupt Service Routines</li><li>不能 Overwrite 別人的程式碼</li></ul></li><li><p>Haredware Support: 使用兩個 register 來記錄能夠讀取的記憶體區間</p><ul><li>Base register: 開始的位址</li><li>Limit register: 這段佔記憶體多長</li><li>超過這段空間就會有 <strong>Segmentation Fault</strong></li><li>修改 Base register 和 Limit register 都是 Priviledge Instructions</li></ul></li></ul><p><img src="/notes/./images/os-chapter1/UseofBaseandLimitRegister.png" alt="Use of Base and Limit Register"><br><img src="/notes/./images/os-chapter1/HardwareAddressProtection.png" alt="Hardware Address Protection"></p><h2 id="CPU-Protection"><a href="#CPU-Protection" class="headerlink" title="CPU Protection"></a>CPU Protection</h2><ul><li>阻止某隻程式霸佔 CPU，像是無窮迴圈</li><li>Hardware Support: <strong>Timer</strong><ul><li>Timer 是慢慢減少，當變成 0 時，會送出 Interrupt</li><li>Timer 通常用來實現 Time Sharing</li></ul></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>OS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>作業系統筆記 Historical Prospective</title>
    <link href="/notes/2024/07/02/os-chapter0/"/>
    <url>/notes/2024/07/02/os-chapter0/</url>
    
    <content type="html"><![CDATA[<blockquote><p>周志遠教授作業系統開放式課程</p></blockquote><p>作業系統介於硬體和軟體之間，是不可或缺的</p><h1 id="Mainframe-Systems"><a href="#Mainframe-Systems" class="headerlink" title="Mainframe Systems"></a>Mainframe Systems</h1><ul><li>最早的電腦，體積很大</li><li>IO 很慢，做的事情非常單一</li><li>演化順序：Batch -&gt; Multi-programming -&gt; Time-shared</li><li>現在仍然存在，意旨專門處理一件事情的機器，很多伺服器在用，負責大量資料的處理</li></ul><h2 id="Batch"><a href="#Batch" class="headerlink" title="Batch"></a>Batch</h2><ul><li>電腦管理者要親自決定執行順序，決定哪個程式要先執行</li><li>工作很單純，所以 OS 不需要做甚麼特別的事情，除了基本工作以外，只需要把一項工作切換到下一個</li><li>缺點<ul><li>一次只能處理一個程式</li><li>沒有 <strong>interaction</strong>，在執行一個工作的過程中，使用者完全沒辦法做任何改變</li><li>IO 非常慢，導致 CPU 常常掛機，浪費資源<ul><li>IO 速度遠比 CPU 速度慢</li></ul></li></ul></li></ul><p><img src="/notes/./images/os-chapter0/BatchSystem.png" alt="Batch System"></p><h2 id="Multi-programming"><a href="#Multi-programming" class="headerlink" title="Multi-programming"></a>Multi-programming</h2><ul><li>讓系統裡面放多個程式<ul><li>當一個程式在做 IO 時，就可以切換到別的程式，overlap CPU 和 IO 的計算，保證 CPU 持續工作</li></ul></li><li>Spooling (Simutaneous Peripheral Operation On-Line)<ul><li>不用 CPU 干預就可以完成 I&#x2F;O 的工作</li><li>CPU 只需要在 IO 做完的時候被通知就好</li></ul></li><li>CPU 在執行的時候只能讀取 memory，所以我們把多個程式同時 load 到 main memory<ul><li>要 load disk 的哪些程式到 memory？-&gt; <strong>Job Scheduling</strong>  </li><li>要 load memory 的哪些程式到 CPU？-&gt; <strong>CPU Scheduling</strong></li></ul></li><li>在其中，OS 的工作包含：<ul><li>Memory management，要分配多少記憶體給這些程式</li><li>CPU Scheduling，CPU 要執行 memory 的哪些程式</li><li>IO system，如何透過 interrupt，實現 Spooling</li></ul></li></ul><h2 id="Time-Sharing-System-Multi-tasking"><a href="#Time-Sharing-System-Multi-tasking" class="headerlink" title="Time-Sharing System (Multi-tasking)"></a>Time-Sharing System (Multi-tasking)</h2><ul><li>Multi-programming 讓 CPU 的使用率變高，但是對於單一程式而言，可能會執行更慢</li><li>使用者想要隨時與程式做互動，也希望可以很多使用者同時使用電腦</li><li>用時間的觀念去切割資源，讓所有程式一起執行</li><li>很頻繁切換 CPU 和 IO，就可以偵測使用者的 input，就有互動的感覺</li><li>不是一次做完一個程式的計算，而是每個程式只計算幾毫秒，就切換到下一個程式，讓使用者以為所有程式同時在執行</li><li>在其中，OS 的工作包含<ul><li>Virtual memory，把 disk 當作 memory，因為我想要塞更多程式到 memory，但是 memory 不夠大</li><li>File system 和 disk management，有了 interactive，使用者就可以直接管理檔案</li><li>Process synchronization 和 deadlock，程式和程式之間可以溝通，當他們同時修改 memory 的內容時就會有問題</li></ul></li></ul><p><img src="/notes/./images/os-chapter0/MainframeSystemSummary.png" alt="Mainframe System Summary"></p><h1 id="Computer-system-architecture"><a href="#Computer-system-architecture" class="headerlink" title="Computer-system architecture"></a>Computer-system architecture</h1><h2 id="Desktop-Systems-single-processor"><a href="#Desktop-Systems-single-processor" class="headerlink" title="Desktop Systems: single processor"></a>Desktop Systems: single processor</h2><ul><li>PC (Personal Computers)，只給一位 user 使用</li><li>GUI (User <strong>convenience</strong> and <strong>responsiveness</strong>)</li><li>I&#x2F;O devices</li><li>Windows, MacOS, Unix, Linux</li></ul><h2 id="Parallel-Systems-tightly-coupled"><a href="#Parallel-Systems-tightly-coupled" class="headerlink" title="Parallel Systems: tightly coupled"></a>Parallel Systems: tightly coupled</h2><ul><li>又稱為 <strong>Multiprocessor</strong> or <strong>tightly coupled system</strong></li><li>很多 CPU 緊密在一起</li><li>這些 CPU 用同個 <strong>shared memory</strong></li><li>Purposes<ul><li>Throughput<ul><li>計算量增加</li></ul></li><li>Economical<ul><li>很多東西可以共用，memory、CPU、IO device、主機板…</li></ul></li><li>Reliability<ul><li>一個 CPU 掛了，其他還能繼續工作</li></ul></li></ul></li><li>現今所有系統都是這種系統</li></ul><p><img src="/notes/./images/os-chapter0/ParallelSystems.png" alt="Parallel Systems"></p><h3 id="SMP-Symmetric-multiprocessor-system"><a href="#SMP-Symmetric-multiprocessor-system" class="headerlink" title="SMP (Symmetric multiprocessor system)"></a>SMP (Symmetric multiprocessor system)</h3><ul><li>每個 CPU 的角色相同，都由 OS 控制，沒有 Master</li><li>比較簡單，所以比較普及，我們手上有的系統幾乎都是這類</li><li>需要 <strong>synchronization</strong>，增加 overhead</li><li>Master CPU 無法用來計算，只能用來管理</li></ul><h3 id="AMP-Asymmetric-multiprocessor-system"><a href="#AMP-Asymmetric-multiprocessor-system" class="headerlink" title="AMP (Asymmetric multiprocessor system)"></a>AMP (Asymmetric multiprocessor system)</h3><ul><li>超級電腦等需要大量計算的會用這類</li><li>有一個 Master CPU，只用來管理其他 CPU ，所以 core 可以比較多</li></ul><h3 id="Multi-Core-Processor"><a href="#Multi-Core-Processor" class="headerlink" title="Multi-Core Processor"></a>Multi-Core Processor</h3><ul><li>一個 CPU 裡面有很多 Core</li></ul><p><img src="/notes/./images/os-chapter0/MultiCoreProcessor.png" alt="Multi-Core Processor"></p><h3 id="Many-Core-Processor"><a href="#Many-Core-Processor" class="headerlink" title="Many-Core Processor"></a>Many-Core Processor</h3><ul><li>GPGPU<ul><li>Single Instruction Multiple Data (SIMD) 的操作</li><li>上千個 core</li></ul></li><li>Intel Xeon Phi</li><li>TILE64</li></ul><h3 id="Memory-Access-Architecture"><a href="#Memory-Access-Architecture" class="headerlink" title="Memory Access Architecture"></a>Memory Access Architecture</h3><h4 id="Uniform-Memory-Access-UMA"><a href="#Uniform-Memory-Access-UMA" class="headerlink" title="Uniform Memory Access (UMA)"></a>Uniform Memory Access (UMA)</h4><ul><li>每個 CPU access memory 的速度相同，使用者不用在乎現在是在哪個 CPU 上執行</li><li>CPU 增加時，memory 可能開始有 bottleneck</li></ul><p><img src="/notes/./images/os-chapter0/UMA.png" alt="UMA"></p><h4 id="Non-Uniform-Memory-Access-NUMA"><a href="#Non-Uniform-Memory-Access-NUMA" class="headerlink" title="Non-Uniform Memory Access (NUMA)"></a>Non-Uniform Memory Access (NUMA)</h4><ul><li>每個 CPU 的 access time 變得不同</li><li>hierarchy 的架構，可以建構更大的電腦</li><li>高效能計算系統都是 NUMA</li></ul><p><img src="/notes/./images/os-chapter0/NUMA.png" alt="NUMA"></p><h2 id="Distributed-Systems-loosely-coupled"><a href="#Distributed-Systems-loosely-coupled" class="headerlink" title="Distributed Systems: loosely coupled"></a>Distributed Systems: loosely coupled</h2><ul><li>每個 processor 有 local memory，不會 share</li><li>很好擴展更多裝置</li><li>Purposes<ul><li>Resource sharing</li><li>Load sharing<ul><li>某電腦工作量太大可以分給別台做</li></ul></li><li>Reliability<ul><li>一台電腦壞掉不會影響其他台</li></ul></li></ul></li></ul><h3 id="Client-Server"><a href="#Client-Server" class="headerlink" title="Client-Server"></a>Client-Server</h3><ul><li>很好管理與控制資源</li><li>Server 可能會變成 bottleneck 或是 single failure point</li><li>FTP</li></ul><h3 id="Peer-to-Peer"><a href="#Peer-to-Peer" class="headerlink" title="Peer-to-Peer"></a>Peer-to-Peer</h3><ul><li>Decentralized，每個系統的角色是一樣的</li><li>ppStream, bitTorrent, Internet</li></ul><h3 id="Clustered-Systems"><a href="#Clustered-Systems" class="headerlink" title="Clustered Systems"></a>Clustered Systems</h3><ul><li>Share Storage</li><li>通常用 Local Area Network (LAN)，在同個區域，所以會更快</li><li>Asymmetric clustering, Symmetric clustering</li></ul><p><img src="/notes/./images/os-chapter0/SystemArchitecture.png" alt="System Architecture"></p><h1 id="Special-purpose-Systems"><a href="#Special-purpose-Systems" class="headerlink" title="Special-purpose Systems"></a>Special-purpose Systems</h1><h2 id="Real-Time-Operating-Systems"><a href="#Real-Time-Operating-Systems" class="headerlink" title="Real-Time Operating Systems"></a>Real-Time Operating Systems</h2><ul><li>Well-defined <strong>fixed-time contraints</strong><ul><li>Real-time 代表會在 deadlines 之前做完，跟做得速度沒關係</li></ul></li></ul><h3 id="Soft-real-time"><a href="#Soft-real-time" class="headerlink" title="Soft real-time"></a>Soft real-time</h3><ul><li>盡量完成，沒完成也不會有什麼損失</li><li>會有 priority，比較重要的會先做</li><li>Ex: multimedia streaming<ul><li>畫面不是馬上畫出來，可能會先出現線條，然後顏色，最後高解析度</li></ul></li><li></li></ul><h3 id="Hard-real-time"><a href="#Hard-real-time" class="headerlink" title="Hard real-time"></a>Hard real-time</h3><ul><li>沒有在 deadline 完成，會造成嚴重的後果</li><li>Secondary storage limited or absent<ul><li>沒有 disk，因為讀取太慢，而且讀取時間不好掌握</li></ul></li><li>Ex: nuclear power plant controller</li></ul><h2 id="Multimedia-Systems"><a href="#Multimedia-Systems" class="headerlink" title="Multimedia Systems"></a>Multimedia Systems</h2><ul><li>A wide range of applications including audio and video files</li><li>Issues<ul><li>Timing contraints，屬於 soft real-time</li><li>On-demand&#x2F;live streaming</li><li>Compression，有各種壓縮技術</li></ul></li></ul><h2 id="Handheld-Embedded-Systems"><a href="#Handheld-Embedded-Systems" class="headerlink" title="Handheld&#x2F;Embedded Systems"></a>Handheld&#x2F;Embedded Systems</h2><ul><li>Hardware specialized OS</li><li>Issues<ul><li>Limited memory</li><li>Slow processors</li><li>Battery consumption</li><li>Samll display screens</li></ul></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>OS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Unity Compute Shader</title>
    <link href="/notes/2024/06/12/unity-render-1/"/>
    <url>/notes/2024/06/12/unity-render-1/</url>
    
    <content type="html"><![CDATA[<p>相信大家在遊戲中都有看過一些很複雜炫泡的特效，一定會很好奇為什麼這樣做不會 Lag，像是各種複雜的粒子效果、大量物體同時移動、物理模擬等等。</p><p><img src="/notes/./images/unity-render-1/ComputeShaderDemo.gif" alt="Compute Shader Demo"></p><p><img src="/notes/./images/unity-render-1/ComputeShaderDemo1.gif" alt="Compute Shader Demo"></p><p>這些酷酷特效的背後到底做了哪些工作呢？這篇文章將來探討如何在 Unity 使用 Compute Shader 加速計算，還會提及一些比較常見的優化遊戲效能的技術。</p><p>本文有點長，而且內容有點 Hardcore，涉及到 CPU 和 GPU 的協作、Shader 的應用、HLSL 等等，可能需要一些圖學的背景知識會比較好理解，算是比較進階的教學。</p><h2 id="CPU、GPU-基本介紹"><a href="#CPU、GPU-基本介紹" class="headerlink" title="CPU、GPU 基本介紹"></a>CPU、GPU 基本介紹</h2><p>大家都知道，GPU (顯示卡) 是用來處理各種圖形渲染的工作，想要暢玩 3A 大作必定要先升級你的顯卡。那麼 GPU 為什麼有能力處理遊戲渲染呢？只用 CPU 不行嗎？</p><p>事實上是可以的 XD，只是非常非常慢，下面這個影片就沒有用 GPU，單純用最猛的 CPU 去跑 GTA-5，結果是跑得動的，但是 FPS 低到不行，根本玩不下去</p><iframe width = "100%" height = "315" src="//www.youtube.com/embed/oDIaHj-CGSI" frameborder="0" allowfullscreen></iframe><br><br><p>至於為什麼會這樣，就要先了解兩者的工作差異，這邊就拿最近最紅的 NVDIA Demo 的範例來介紹</p><p><img src="https://j.gifs.com/mL45Op.gif" alt="NVDIA CPU Example"></p><p>CPU 就像是一個天才，什麼都會、什麼都能做，能夠精確地完成任務，但是只能一項一項做。</p><p>在你的電腦中，CPU 扮演著大腦的角色，負責處理各種複雜的工作，處理作業系統和應用程式的所有運算任務，像是不斷切換正在執行的程式，讓它們看起來好像在同時執行一樣，或是處理你滑鼠點擊、鍵盤輸入等等，最底層的硬體都是由 CPU 負責的。</p><p><img src="https://miro.medium.com/v2/resize:fit:924/1*aQQcuLKQgFKEECPhkEKTqQ.gif" alt="NVDIA GPU Example"></p><p>而 GPU 就像是一堆普通人，每個人只會做相同類型的普通計算，人與人之間的工作沒有關聯，不會影響彼此。這些人沒辦法做複雜的工作，但是它們可以<strong>同時工作</strong>，完成大量計算的任務。</p><p>在圖形渲染中，以最簡單的例子來講，我們會需要去處理每個 Vertex 的 Transformation，把模型的每個 vertex 投影到螢幕上 (每個 vertex 要乘上相同的變換矩陣)。我們還要處理每個 Pixel 的 Lighting (每個 Pixel 要乘上相同的光照計算公式)…</p><p>可以看到，每個 vertex、pixel 都要做相同的工作 (乘上相同的某某東西)，這時候就可以利用 GPU 強大的平行計算能力，快速處理這些<strong>龐大且相同的工作</strong>。</p><p><img src="https://angus945.github.io/learn/compute-shader/compute-shader-basis/cpu-vs-gpu.gif" alt="CPU vs GPU"></p><p>事實上，現代 CPU 通常都有 4核、8核等等，也擁有平行計算的能力，但是跟 GPU 的上百、上千核來比還是相形見絀，當然這邊不是說 CPU 就比不上 GPU，只是說兩者擅長的工作不同。</p><h2 id="GPGPU-General-Purpose-GPU-computing"><a href="#GPGPU-General-Purpose-GPU-computing" class="headerlink" title="GPGPU (General-Purpose GPU computing)"></a>GPGPU (General-Purpose GPU computing)</h2><p>最近幾年 NVDIA 的市值蒸蒸日上，全因為 NVDIA 在十幾年前下的一步棋，也就是推出 CUDA (NVDIA 對 GPGPU 的正式名稱)。當時 NVDIA 投入了大量的資金成本在研發 CUDA，外界卻是質疑一片，完全沒人看好這個操作，誰知道在 2024 年的現在，這成為自駕車發展、加密貨幣挖礦、AI 時代的關鍵。</p><p><img src="https://blogs.nvidia.com/wp-content/uploads/2018/05/AI-Revolution-Moores-Law.png" alt="CUDA"></p><p>那麼 GPGPU 到底是什麼？簡單來說，在早期 GPU 主要用於圖形處理，用於加速電腦圖形渲染。後來人們開始意識到 GPU 具有強大的平行運算潛力，不應該僅僅局限於圖形處理。黃仁勳看準這點，於是 NVIDIA 於 2006 年推出了 CUDA 平台，開啟了 GPU 通用計算的大門。CUDA 允許開發者使用類 C 語言（CUDA C&#x2F;C++）編寫程式來利用 GPU 的平行運算能力，加速各種類型的應用程式。</p><p>以前 GPU 都只拿來做圖形處理，要算數學都只能靠 CPU。現在，我們能夠把大量的數學丟給 GPU 做，利用他強大的平行計算能力快速出結果，不再侷限於圖形處理，這也是為什麼它叫做 GPGPU (圖形處理器通用計算)。</p><p>介紹了那麼多背景知識，終於可以進入 Unity 的部分了</p><h2 id="Compute-Shader"><a href="#Compute-Shader" class="headerlink" title="Compute Shader"></a>Compute Shader</h2><p>現在你已經了解 GPGPU 是什麼東西，而 Compute Shader 就是在 Unity 中實現 GPGPU 技術之一，我們可以自己寫一些程式到 GPU 上面跑，也就是前面說的，<strong>我們能夠把大量的數學丟給 GPU 做，利用他強大的平行計算能力快速出結果</strong>，在 Unity 中我們就可以利用 Compute Shader，減少 CPU 的 loading，增加遊戲的效能。</p><p>想像一下現在有個場景長這樣</p><p><img src="/notes/./images/unity-render-1/ComputeShaderDemo2.gif" alt="Compute Shader Demo"></p><p>場景共有 1000000 個粒子，如果把這些全部都塞在 Update() (CPU 端) 裡面去算會是多可怕的事情，因此我們勢必要直接丟給 GPU 去計算並直接渲染出來，這時候就可以用 Compute Shader 來達成這件事情，CPU 做的事情就只有準備 Data (記憶體要給多少之類的) 以及啟動 Compute Shader。</p><h3 id="建立-Compute-Shader"><a href="#建立-Compute-Shader" class="headerlink" title="建立 Compute Shader"></a>建立 Compute Shader</h3><p>在 Unity 新增 Compute Shader，點擊右鍵就可以直接新增 .compute 檔案<br><img src="/notes/./images/unity-render-1/AddComputeShader.png" alt="Add Compute Shader"></p><p>這邊順便新增等等會用到的檔案</p><p><img src="/notes/./images/unity-render-1/Assets.png" alt="Assets"></p><h3 id="執行-Compute-Shader"><a href="#執行-Compute-Shader" class="headerlink" title="執行 Compute Shader"></a>執行 Compute Shader</h3><h4 id="Shader-端"><a href="#Shader-端" class="headerlink" title="Shader 端"></a>Shader 端</h4><p>Unity 的 Compute Shader 的語言是 HLSL，打開檔案可以看到下面的內容</p><p><img src="/notes/./images/unity-render-1/ComputeShaderStart.png" alt="Compute Shader Start Example"></p><ul><li><code>#pragma kernel CSMain</code> 代表的是 compute kernel，這個 kernel 會對應到檔案中的一個函式名稱。一個檔案可以定義多個 kernel，也就是多個 <code>#pragma kernel 函式名稱</code>，這樣你可以全部塞同個檔案，之後要用的時候就在 C# call <code>shader.FindKernel(函式名稱)</code> 就好。</li><li><code>RWTexture2D&lt;float4&gt; Result;</code> 是一個可以讀寫的 Texture，GPU 可以把算好的資料存進去，之後拿來用</li><li><code>[numthreads(8,8,1)]</code> 是你宣告一個 Thread Group 中有幾個 Thread，等等會詳細介紹</li><li><code>void CSMain (uint3 id : SV_DispatchThreadID)</code> <ul><li>CSMain 是你函式的名稱，也就是前面 <code>#pragma kernel</code> 對應到的函式</li><li><code>SV_DispatchThreadID</code> 是你當前 Thread 的 ID，這樣 GPU 才知道現在在算哪一個 Thread 的內容</li></ul></li><li><code>Result[id.xy] = float4(id.x &amp; id.y, (id.x &amp; 15)/15.0, (id.y &amp; 15)/15.0, 0.0);</code> 是你在這個 Thread 會寫進 Texture 的內容，可以看到這邊藉由 SV_DispatchThreadID 來判斷要寫進 Texture 的哪個位置</li></ul><h4 id="C-端"><a href="#C-端" class="headerlink" title="C# 端"></a>C# 端</h4><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-keyword">using</span> UnityEngine;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">TestComputeShader</span> : <span class="hljs-title">MonoBehaviour</span><br>&#123;<br>    [<span class="hljs-meta">SerializeField</span>] ComputeShader computeShader;<br>    [<span class="hljs-meta">SerializeField</span>] RenderTexture renderTexture;<br>    <span class="hljs-keyword">private</span> <span class="hljs-built_in">int</span> _kernelIndex;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Start</span>()</span><br>    &#123;<br>        _kernelIndex = computeShader.FindKernel(<span class="hljs-string">&quot;CSMain&quot;</span>);<br><br>        computeShader.SetTexture(_kernelIndex, <span class="hljs-string">&quot;Result&quot;</span>, renderTexture);<br>        computeShader.Dispatch(_kernelIndex, renderTexture.width / <span class="hljs-number">8</span>, renderTexture.height / <span class="hljs-number">8</span>, <span class="hljs-number">1</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>在這邊，我會傳入先前建立的 Compute Shader 和 RenderTexture。</p><ul><li><code>computeShader.FindKernel(&quot;CSMain&quot;);</code> 能夠去尋找對應的 kernel，並回傳一個 kernel index 之後做使用</li><li><code>computeShader.SetTexture(_kernelIndex, &quot;Result&quot;, renderTexture);</code> 綁定計算的資源。這邊的 “Result” 是對應到 Compute Shader 檔案裡的 <code>RWTexture2D&lt;float4&gt; Result;</code>。這邊在做的事情就是把 Result 的資料 Bind 到我自己的 Render Texture 上面，也就是說我更新 Result 等同於更新我的 Render Texture。</li><li><code>computeShader.Dispatch(_kernelIndex, renderTexture.width / 8, renderTexture.height / 8, 1);</code> 這個就是去啟動 Compute Shader，並宣告要有幾個 Thread Group，之後會詳細介紹。</li></ul><p>到目前為止，程式碼的部分已經完成，剩下一些步驟</p><p><img src="/notes/./images/unity-render-1/RenderTexture.png" alt="Render Texture"></p><p>記得要勾選 Random Write，這樣這個 Texture 才能支援 <a href="https://zh.wikipedia.org/zh-tw/%E9%9A%A8%E6%A9%9F%E5%AD%98%E5%8F%96">Random Access</a></p><p><img src="/notes/./images/unity-render-1/TestComputeShader.png" alt="Test Compute Shader"></p><p>隨便個物件，塞入我們剛剛建立好的 assets，並執行它</p><p><img src="/notes/./images/unity-render-1/TestComputeShaderResult.png" alt="Test Compute Shader Result"></p><p>遊戲開始的時候可以看到我們的 Render Texture 長相變了！上面的顏色就是你 Texture 上每個 Texel 的 RGB 值，也就是 Unity 預設的 <code>Result[id.xy] = float4(id.x &amp; id.y, (id.x &amp; 15)/15.0, (id.y &amp; 15)/15.0, 0.0);</code>，float4 的四個參數就是 RGBA。這樣的結果代表你的 Compute Shader 確實有執行，並且成功把結果寫進你的 Texture 裡面。</p><h3 id="Thread-執行緒"><a href="#Thread-執行緒" class="headerlink" title="Thread 執行緒"></a>Thread 執行緒</h3><p>先來補一下剛剛挖的坑，也就是 <code>numthreads(8,8,1)</code> 和 <code>computeShader.Dispatch(_kernelIndex, renderTexture.width / 8, renderTexture.height / 8, 1)</code> 到底在做什麼</p><p>我們知道 GPU 具有強大的平行計算能力，那是因為 GPU 含有成千上萬個 Thread，每個 Thread 都能執行一個小程式。在 Compute Shader 中，一個 Kernel 會被分配到一堆 Thread 上面去執行 (像是剛剛的 CSMain)，因此我們要告訴 GPU 現在需要幾個 Thread。</p><p><img src="http://img.frankorz.com/dx-grid-of-thread-group.png" alt="Thread Group and Thread"></p><p>而在 GPU 中，一群 Thread 可以組成 Thread Group，一群 Thread Group 可以組成 Grid，且 Thread Group 和 Grid 都是三維的架構。因此</p><ul><li><code>numthreads(8,8,1)</code> 就是告訴 GPU 這個 Thread Group 的 XYZ 軸分別有幾個 Thread。</li><li><code>computeShader.Dispatch(_kernelIndex, renderTexture.width / 8, renderTexture.height / 8, 1)</code> 就是告訴 GPU 這個 Grid 的 XYZ 軸分別有幾個 Thread Group</li></ul><p>這樣的架構能讓我們更方便管理和使用計算的資源，所以這邊我就根據我的 Render Texture 解析度，來去分配 Thread 的數量</p><hr><h3 id="Uniform-Data"><a href="#Uniform-Data" class="headerlink" title="Uniform Data"></a>Uniform Data</h3><p>在 CPU 端除了綁定資源以外 (buffer、texture)，你也可以傳入一些 Uniform Data，這些 Data 在這次計算的時候是不會改變的，作為一個 Constant 來使用。</p><p>舉個例子，我現在想讓 GPU 有 <code>float Time</code> 可以使用，我想讓 Texture 的 G 值隨著時間去做改變</p><h4 id="Shader-端-1"><a href="#Shader-端-1" class="headerlink" title="Shader 端"></a>Shader 端</h4><p><img src="/notes/./images/unity-render-1/ComputeShaderExampleTime.png" alt="Compute Shader Example Time"></p><h4 id="C-端-1"><a href="#C-端-1" class="headerlink" title="C# 端"></a>C# 端</h4><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-keyword">using</span> UnityEngine;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">TestComputeShader</span> : <span class="hljs-title">MonoBehaviour</span><br>&#123;<br>    [<span class="hljs-meta">SerializeField</span>] ComputeShader computeShader;<br>    [<span class="hljs-meta">SerializeField</span>] RenderTexture renderTexture;<br>    <span class="hljs-keyword">private</span> <span class="hljs-built_in">int</span> _kernelIndex;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Start</span>()</span><br>    &#123;<br>        _kernelIndex = computeShader.FindKernel(<span class="hljs-string">&quot;CSMain&quot;</span>);<br><br>        computeShader.SetTexture(_kernelIndex, <span class="hljs-string">&quot;Result&quot;</span>, renderTexture);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Update</span>()</span><br>    &#123;<br>        computeShader.SetFloat(<span class="hljs-string">&quot;_Time&quot;</span>, Time.time);<br>        computeShader.Dispatch(_kernelIndex, renderTexture.width / <span class="hljs-number">8</span>, renderTexture.height / <span class="hljs-number">8</span>, <span class="hljs-number">1</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="結果"><a href="#結果" class="headerlink" title="結果"></a>結果</h4><p><img src="/notes/./images/unity-render-1/ComputeShaderDemo3.gif" alt="Compute Shader Demo"></p><p>現在你已經知道怎麼在 Unity 中建立並啟動 Compute Shader，並輸出一個簡單的結果，你也可以試著改改看 Compute Shader 的內容，輸出各種不同的結果</p><p><img src="/notes/./images/unity-render-1/MoreComputeShaderExample.gif" alt="More Compute Shader Example"></p><p>以上這些都是透過 GPU 去計算出來的結果，更多範例可以參考 <a href="https://www.shadertoy.com/">Shader Toy</a>，不過要注意的是這網站使用的語言是 <strong>GLSL</strong>，而且是寫在 <strong>Fragment Shader</strong> 上面，這裡提供的例子使用的語言是 <strong>HLSL</strong>，而且是寫在<strong>Compute Shader</strong>上面。接下來會介紹更多 Compute Shader 的應用方式</p><h2 id="移動大量物體"><a href="#移動大量物體" class="headerlink" title="移動大量物體"></a>移動大量物體</h2><p>現在，先定個目標：我希望在場景中渲染 16384 個物件，並同時移動它們，某物件的下一個位置是根據當前位置去計算的，因此彼此之間不會互相影響。</p><p>這裡我提供四種不同的方法，逐漸優化遊戲的效能。</p><h3 id="一般寫法"><a href="#一般寫法" class="headerlink" title="一般寫法"></a>一般寫法</h3><p>最一般的寫法很直覺，直接在 Start() 建立 16384 個物件並儲存起來。接著，在 Update() 中開個 for 迴圈遍歷所有物件，根據當前位置去改變物件下一偵的位置</p><h4 id="C-端-2"><a href="#C-端-2" class="headerlink" title="C# 端"></a>C# 端</h4><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-keyword">private</span> GameObject[] _Cubes;<br><span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> Instances = <span class="hljs-number">16384</span>;<br><br><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">InitCubes</span>()</span><br>&#123;<br>    _Cubes = <span class="hljs-keyword">new</span> GameObject[Instances];<br>    <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>; i &lt; _Cubes.Length; i++)<br>    &#123;<br>        _Cubes[i] = GameObject.CreatePrimitive(PrimitiveType.Cube);<br>        _Cubes[i].transform.localScale = <span class="hljs-keyword">new</span> Vector3(<span class="hljs-number">10</span>, <span class="hljs-number">10</span>, <span class="hljs-number">10</span>);<br>        _Cubes[i].transform.position = <span class="hljs-keyword">new</span> Vector3(i * <span class="hljs-number">2</span>, <span class="hljs-number">0</span>, transform.position.z);<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Start</span>()</span><br>&#123;<br>    InitCubes();<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Update</span>()</span><br>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>; i &lt; _Cubes.Length; i++)<br>    &#123;<br>        <span class="hljs-built_in">float</span> x = _Cubes[i].transform.position.x;<br>        <span class="hljs-built_in">float</span> y = _Cubes[i].transform.position.y;<br>        <span class="hljs-built_in">float</span> z = _Cubes[i].transform.position.z;<br><br>        <span class="hljs-comment">// 我隨便亂寫的位置移動公式</span><br>        Vector3 newPos = <span class="hljs-keyword">new</span> Vector3(<br>                (<span class="hljs-built_in">float</span>)x,<br>                (<span class="hljs-built_in">float</span>)(Math.Tan(x / <span class="hljs-number">500</span> + Time.time) - Math.Cos(x / <span class="hljs-number">10</span> + z / <span class="hljs-number">200</span> + Time.time)) * <span class="hljs-number">100</span>,<br>                (<span class="hljs-built_in">float</span>)Math.Sin(x / <span class="hljs-number">10</span> + y / <span class="hljs-number">200</span> - Time.time) * <span class="hljs-number">200</span><br>            );<br>        _Cubes[i].transform.position = newPos;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h4><p><img src="/notes/./images/unity-render-1/Naive.gif" alt="Naive"></p><p>可以發現這種直白作法的 FPS 差不多是 24 FPS，代表一秒只能畫 24 張，最主要原因就是 CPU loading 太大，拖累了進度</p><h3 id="比較好的做法-Compute-Shader-CPU-Read-Back"><a href="#比較好的做法-Compute-Shader-CPU-Read-Back" class="headerlink" title="比較好的做法 (Compute Shader + CPU Read Back)"></a>比較好的做法 (Compute Shader + CPU Read Back)</h3><p>第二種做法是把計算所有物件位置的任務丟給 GPU 去算，算出每個物件下一個位置的資料，最後 CPU 只要負責等待結果回傳，根據 GPU 算好的資料去更新物件的位置</p><h4 id="Shader-端-2"><a href="#Shader-端-2" class="headerlink" title="Shader 端"></a>Shader 端</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">pragma</span> kernel CSMain</span><br><br>RWStructuredBuffer&lt;float3&gt; CubeBuffer;<br><span class="hljs-type">float</span> Time;<br><br>[numthreads(<span class="hljs-number">1024</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>)]<br><span class="hljs-type">void</span> <span class="hljs-title function_">CSMain</span> <span class="hljs-params">(uint3 id : SV_DispatchThreadID)</span><br>&#123;<br>    <span class="hljs-type">float</span> x = CubeBuffer[id.x].x;<br>    <span class="hljs-type">float</span> y = CubeBuffer[id.x].y;<br>    <span class="hljs-type">float</span> z = CubeBuffer[id.x].z;<br><br>    <span class="hljs-comment">// 我亂寫的計算位置的公式</span><br>    CubeBuffer[id.x] = float3(<br>            x, <br>            (<span class="hljs-built_in">tan</span>(x/<span class="hljs-number">500</span>+ Time) - <span class="hljs-built_in">cos</span>(x/<span class="hljs-number">10</span>+z/<span class="hljs-number">200</span> + Time))*<span class="hljs-number">100</span>, <br>            <span class="hljs-built_in">sin</span>(x/<span class="hljs-number">10</span>+y/<span class="hljs-number">200</span> - Time)*<span class="hljs-number">200</span><br>        );<br>&#125;<br></code></pre></td></tr></table></figure><p>這邊有一個 Buffer，內容包含所有物件的位置，接著根據當前位置去計算下一個位置，再存回 Buffer 即可。</p><h4 id="C-端-3"><a href="#C-端-3" class="headerlink" title="C# 端"></a>C# 端</h4><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-keyword">public</span> ComputeShader computeShader;<br><span class="hljs-keyword">private</span> <span class="hljs-built_in">int</span> _kernelIndex;<br><span class="hljs-keyword">private</span> ComputeBuffer _CubeBuffer;<br><span class="hljs-keyword">private</span> Vector3[] _CubeArray;<br><span class="hljs-keyword">private</span> GameObject[] _Cubes;<br><span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> Instances = <span class="hljs-number">16384</span>;<br><br><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">InitCubes</span>()</span><br>&#123;<br>    _Cubes = <span class="hljs-keyword">new</span> GameObject[Instances];<br>    _CubeArray = <span class="hljs-keyword">new</span> Vector3[Instances];<br>    <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>; i &lt; _CubeArray.Length; i++)<br>    &#123;<br>        _Cubes[i] = GameObject.CreatePrimitive(PrimitiveType.Cube);<br>        _Cubes[i].transform.localScale = <span class="hljs-keyword">new</span> Vector3(<span class="hljs-number">10</span>, <span class="hljs-number">10</span>, <span class="hljs-number">10</span>);<br>        _Cubes[i].transform.position = <span class="hljs-keyword">new</span> Vector3(i * <span class="hljs-number">2</span>, <span class="hljs-number">0</span>, transform.position.z);<br>        _CubeArray[i] = _Cubes[i].transform.position;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">InitShader</span>()</span><br>&#123;<br>    _kernelIndex = computeShader.FindKernel(<span class="hljs-string">&quot;CSMain&quot;</span>);<br>    _CubeBuffer = <span class="hljs-keyword">new</span> ComputeBuffer(_CubeArray.Length, <span class="hljs-number">3</span> * <span class="hljs-keyword">sizeof</span>(<span class="hljs-built_in">float</span>));<br>    _CubeBuffer.SetData(_CubeArray);<br>    computeShader.SetBuffer(_kernelIndex, <span class="hljs-string">&quot;CubeBuffer&quot;</span>, _CubeBuffer);<br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Start</span>()</span><br>&#123;<br>    InitCubes();<br>    InitShader();<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Update</span>()</span><br>&#123;<br>    computeShader.SetFloat(<span class="hljs-string">&quot;Time&quot;</span>, Time.time);<br>    computeShader.Dispatch(_kernelIndex, <span class="hljs-number">16</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>);<br><br>    <span class="hljs-comment">// 等待結果回傳</span><br>    _CubeBuffer.GetData(_CubeArray);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>; i &lt; _CubeArray.Length; i++)<br>    &#123;<br>        _Cubes[i].transform.position = _CubeArray[i];<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>我們在 Start() 的地方宣告一個 Buffer，內容包含剛開始所有物件的位置，接著就是傳入資料，啟動 Compute Shader。在 Update() 裡面的 <code>GetData()</code> 可以 Block 下面的程式碼，也就是直到 GPU 算好後才繼續往下執行操作，避免發生 GPU 還沒算好 CPU 就讀取的情況。</p><p>注意，這裡我宣告 16 個 Thread Group，每個 Thread Group 有 1024 個 Thread，一共有 16 * 1024 &#x3D; 16384 個 Thread，剛剛好等於我們擁有的物件數量，也就是說每個 Thread 就負責處理一個物件的位置。</p><p>只要最後數量對就好，有幾個 Thread Group、每個 Thread Group 有幾個 Thread 不是很重要。為了方便，我只宣告在 X 象限，這樣讀取 Buffer 的時候可以直接用 <code>CubeBuffer[id.x]</code> 就好，不用管 id.y、id.z</p><h4 id="效果-1"><a href="#效果-1" class="headerlink" title="效果"></a>效果</h4><p><img src="/notes/./images/unity-render-1/CPUReadBack.gif" alt="CPU Read Back"></p><p>可以發現這種作法的 FPS 有些許上升，來到了 32，代表一秒可以畫 32 張，但是上升的很不明顯，最主要就是因為 CPU 在等 GPU 算完才繼續執行，白白浪費時間在那邊掛機。雖然 GPU 確實算很快，但這作法不能完全發揮 Compute Shader 的功力</p><h3 id="GPU-Instancing"><a href="#GPU-Instancing" class="headerlink" title="GPU Instancing"></a>GPU Instancing</h3><p>這邊先介紹一個跟 Compute Shader 比較沒關的優化方法，也就是 GPU Instancing。當我們想繪製大量且相同的 Mesh 時，可以用這種方法。</p><h4 id="Draw-call"><a href="#Draw-call" class="headerlink" title="Draw call"></a>Draw call</h4><p>在 Unity 中，CPU 命令 GPU 去繪製 Mesh + Material 的步驟就是 <strong>Draw Call</strong>，當場景中有大量物件時，意味這我們會有很多 CPU 命令 GPU 做事的步驟，但是這是一件非常花時間的事情</p><p><img src="/notes/./images/unity-render-1/Bottleneck.png" alt="CPU Bottleneck"></p><p>既然我們要畫 Mesh 和 Material 都一樣，為什麼不畫一次就好？GPU instancing 的概念就像是告訴 GPU 說：「嘿，這些方塊都長得一樣，你只要畫一次，然後把它們放到對的地方就好。」，這樣就不需要重複告訴 GPU 如何畫每個方塊，而是告訴 GPU 如何畫一個方塊，然後告訴它在哪裡重複使用這個畫好的方塊。這種做法可以大幅提高效能。</p><h4 id="Shader-端-3"><a href="#Shader-端-3" class="headerlink" title="Shader 端"></a>Shader 端</h4><p>跟這邊沒關係，所以跟第二個做法一樣，不用改</p><h4 id="C-端-4"><a href="#C-端-4" class="headerlink" title="C# 端"></a>C# 端</h4><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-keyword">public</span> ComputeShader computeShader;<br><span class="hljs-keyword">private</span> <span class="hljs-built_in">int</span> _kernelIndex;<br><span class="hljs-keyword">private</span> ComputeBuffer _CubeBuffer;<br><span class="hljs-keyword">private</span> Vector3[] _CubeArray;<br><br><span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> Instances = <span class="hljs-number">16384</span>;<br><span class="hljs-keyword">public</span> Mesh mesh;<br><span class="hljs-keyword">public</span> Material material;<br><span class="hljs-keyword">private</span> List&lt;List&lt;Matrix4x4&gt;&gt; batches = <span class="hljs-keyword">new</span> List&lt;List&lt;Matrix4x4&gt;&gt;();<br><br><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">InitCubes</span>()</span><br>&#123;<br>    <span class="hljs-built_in">int</span> AddedMatrices = <span class="hljs-number">0</span>;<br>    _CubeArray = <span class="hljs-keyword">new</span> Vector3[Instances];<br>    batches.Add(<span class="hljs-keyword">new</span> List&lt;Matrix4x4&gt;());<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>; i &lt; Instances; i++)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (AddedMatrices &gt;= <span class="hljs-number">1000</span>)<br>        &#123;<br>            AddedMatrices = <span class="hljs-number">0</span>;<br>            batches.Add(<span class="hljs-keyword">new</span> List&lt;Matrix4x4&gt;());<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            AddedMatrices++;<br>            Vector3 position = <span class="hljs-keyword">new</span> Vector3(i * <span class="hljs-number">2</span>, <span class="hljs-number">0</span>, transform.position.z);<br>            batches[batches.Count - <span class="hljs-number">1</span>].Add(Matrix4x4.TRS(Vector3.zero, Quaternion.identity, Vector3.one * <span class="hljs-number">10f</span>));<br>            _CubeArray[i] = position;<br>        &#125;<br><br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">InitShader</span>()</span><br>&#123;<br>    _kernelIndex = computeShader.FindKernel(<span class="hljs-string">&quot;CSMain&quot;</span>);<br>    _CubeBuffer = <span class="hljs-keyword">new</span> ComputeBuffer(_CubeArray.Length, <span class="hljs-number">3</span> * <span class="hljs-keyword">sizeof</span>(<span class="hljs-built_in">float</span>));<br>    _CubeBuffer.SetData(_CubeArray);<br>    computeShader.SetBuffer(_kernelIndex, <span class="hljs-string">&quot;CubeBuffer&quot;</span>, _CubeBuffer);<br>    material.SetBuffer(<span class="hljs-string">&quot;CubeBuffer&quot;</span>, _CubeBuffer);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Start</span>()</span><br>&#123;<br>    InitCubes();<br>    InitShader();<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Update</span>()</span><br>&#123;<br>    computeShader.SetFloat(<span class="hljs-string">&quot;Time&quot;</span>, Time.time);<br>    material.SetFloat(<span class="hljs-string">&quot;Time&quot;</span>, Time.time);<br>    computeShader.Dispatch(_kernelIndex, <span class="hljs-number">16</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>);<br>    _CubeBuffer.GetData(_CubeArray);<br>    <span class="hljs-built_in">int</span> batchIndex = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>; i &lt; batches.Count; i++)<br>    &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> j = <span class="hljs-number">0</span>; j &lt; batches[i].Count; j++)<br>        &#123;<br>            batches[i][j] = Matrix4x4.TRS(<br>                _CubeArray[batchIndex], <br>                Quaternion.identity, <br>                Vector3.one * <span class="hljs-number">10f</span><br>            );<br>            batchIndex++;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>; i &lt; batches.Count; i++)<br>    &#123;<br>        Graphics.DrawMeshInstanced(mesh, <span class="hljs-number">0</span>, material, batches[i]);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>這邊就不詳細介紹程式碼，有興趣可以去看 <a href="https://www.youtube.com/watch?v=eyaxqo9JV4w">Unity GPU Instancing in less than 7 minutes!</a> 的教學。</p><p>簡單來說就是把一些物件打包成一個個 Batch（<code>DrawMeshInstanced</code>一個 batch 只能塞 1023 個東西，所以這邊讓他超過 1000 的話就裝進下個 batch）。然後把每個物件的 Transform Matrix 算好，之後就傳給 GPU 去移動位置。</p><h4 id="效果-2"><a href="#效果-2" class="headerlink" title="效果"></a>效果</h4><p><img src="/notes/./images/unity-render-1/GPUInstancing.gif" alt="GPU Instancing"></p><p>可以發現這種作法大幅提升了效能，FPS 竟然能上升到 110 左右，可見 Draw Call 是多可怕的東西，這也叫做 CPU Bottleneck。另外，上圖中的 Batches 就是 Draw Call 的數量，從原本的 1000 多減少到 67。</p><p>然而，我們還沒發會 Compute Shader 真正的功用，這不是最快的，我們要更快，還要再快<br><img src="https://memes.tw/download-image?name=4a039a33933c7902c7bfbba3b62993dc.png" alt="Faster Faster Faster"></p><h3 id="Indirect-Rendering"><a href="#Indirect-Rendering" class="headerlink" title="Indirect Rendering"></a>Indirect Rendering</h3><p>仔細想想，我們第三種作法的流程是 </p><ol><li>CPU 宣告 Buffer，傳給 GPU (Compute Shader)</li><li>GPU (Compute Shader) 算好新的位置，傳給 CPU</li><li>CPU 掛機耍廢，直到 GPU 算好回傳 CPU 才接收新位置的資料</li><li>CPU 把剛接收的資料傳給 GPU 去渲染</li></ol><p>有沒有覺得哪裡怪怪的？CPU 耍廢到接收資料，剛收到又傳回 GPU？？為什麼不直接全部交給 GPU 做就好，可以減少 CPU 和 GPU 之間的溝通成本，還可以讓 CPU 去忙其他事情，Indirect Rendering 就是這種概念。</p><p>為了讓 GPU 直接讀取新位置資料，去更新當前位置，我們會需要自己寫 Vertex Shader。Vertex Shader 就是運行在 GPU 上，用來控制每個 Vertex 的相關訊息。想法就是，Compute Shader 算好後存在 Buffer 中（Buffer 就是一段記憶體），接著我們讓 Vertex Shader 直接去讀取這段記憶體位置，直接取得 Buffer 裡面的內容，更新 Vertex 的位置，省略掉 CPU 等待、回傳的步驟，全程都在 GPU 上面執行。</p><h4 id="Compute-Shader-端"><a href="#Compute-Shader-端" class="headerlink" title="Compute Shader 端"></a>Compute Shader 端</h4><p>不用改</p><h4 id="Vertex-Shader-端"><a href="#Vertex-Shader-端" class="headerlink" title="Vertex Shader 端"></a>Vertex Shader 端</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs c">uniform float4x4 _ObjectToWorld;<br>StructuredBuffer&lt;float3&gt; CubeBuffer;<br><br>v2f <span class="hljs-title function_">vert</span> <span class="hljs-params">(appdata v, uint instanceID : SV_InstanceID)</span><br>&#123;<br>    v2f o;<br>    float4 bufferData = float4(CubeBuffer[instanceID], <span class="hljs-number">0</span>);<br>    float4x4 translationMatrix = float4x4(<br>        <span class="hljs-number">1.0</span>, <span class="hljs-number">0.0</span>, <span class="hljs-number">0.0</span>, bufferData.x,<br>        <span class="hljs-number">0.0</span>, <span class="hljs-number">1.0</span>, <span class="hljs-number">0.0</span>, bufferData.y,<br>        <span class="hljs-number">0.0</span>, <span class="hljs-number">0.0</span>, <span class="hljs-number">1.0</span>, bufferData.z,<br>        <span class="hljs-number">0.0</span>, <span class="hljs-number">0.0</span>, <span class="hljs-number">0.0</span>, <span class="hljs-number">1.0</span><br>    );<br><br>    float4 worldPos = mul(translationMatrix, mul(_ObjectToWorld, v.vertex));<br>    o.vertex = UnityObjectToClipPos(worldPos);<br>    <span class="hljs-keyword">return</span> o;<br>&#125;<br></code></pre></td></tr></table></figure><p>這裡就不介紹 Vertex Shader 怎麼寫了，因此省略掉很多程式碼，只是想表達我讀取 Buffer，並做成 Transform Matrix 去更新頂點位置的過程</p><h4 id="C-端-5"><a href="#C-端-5" class="headerlink" title="C# 端"></a>C# 端</h4><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-keyword">public</span> ComputeShader computeShader;<br><span class="hljs-keyword">private</span> <span class="hljs-built_in">int</span> _kernelIndex;<br><span class="hljs-keyword">private</span> ComputeBuffer _CubeBuffer;<br><span class="hljs-keyword">private</span> Vector3[] _CubeArray;<br><br><span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> Instances = <span class="hljs-number">16384</span>;<br><span class="hljs-keyword">public</span> Mesh mesh;<br><span class="hljs-keyword">public</span> Material material;<br><br><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">InitCubes</span>()</span><br>&#123;<br>    _CubeArray = <span class="hljs-keyword">new</span> Vector3[Instances];<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>; i &lt; Instances; i++)<br>    &#123;<br>        Vector3 position = <span class="hljs-keyword">new</span> Vector3(i * <span class="hljs-number">2</span>, <span class="hljs-number">0</span>, transform.position.z);<br>        _CubeArray[i] = position;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">InitShader</span>()</span><br>&#123;<br>    _kernelIndex = computeShader.FindKernel(<span class="hljs-string">&quot;CSMain&quot;</span>);<br>    _CubeBuffer = <span class="hljs-keyword">new</span> ComputeBuffer(_CubeArray.Length, <span class="hljs-number">3</span> * <span class="hljs-keyword">sizeof</span>(<span class="hljs-built_in">float</span>));<br>    _CubeBuffer.SetData(_CubeArray);<br>    computeShader.SetBuffer(_kernelIndex, <span class="hljs-string">&quot;CubeBuffer&quot;</span>, _CubeBuffer);<br>    material.SetBuffer(<span class="hljs-string">&quot;CubeBuffer&quot;</span>, _CubeBuffer);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Start</span>()</span><br>&#123;<br>    InitCubes();<br>    InitShader();<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Update</span>()</span><br>&#123;<br>    computeShader.SetFloat(<span class="hljs-string">&quot;Time&quot;</span>, Time.time);<br>    computeShader.Dispatch(_kernelIndex, <span class="hljs-number">16</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>);<br><br>    RenderParams rp = <span class="hljs-keyword">new</span> RenderParams(material);<br>    rp.matProps = <span class="hljs-keyword">new</span> MaterialPropertyBlock();<br>    rp.matProps.SetMatrix(<span class="hljs-string">&quot;_ObjectToWorld&quot;</span>, Matrix4x4.TRS(Vector3.zero, Quaternion.identity, Vector3.one * <span class="hljs-number">10f</span>));<br>    Graphics.RenderMeshPrimitives(rp, mesh, <span class="hljs-number">0</span>, Instances);<br>&#125;<br></code></pre></td></tr></table></figure><p>跟第三種作法不同的地方是，我的 GPU instancing 換成 <code>RenderMeshPrimitives</code>，因為我要自己寫移動 Vertex Shader 的程式碼，而且 <code>RenderMeshPrimitives</code> 沒有 Batch Size 的限制，會是更好的選擇。</p><h4 id="效果-3"><a href="#效果-3" class="headerlink" title="效果"></a>效果</h4><p><img src="/notes/./images/unity-render-1/IndirectRendering.gif" alt="Indirect Rendering"></p><p>透過這種作法，可以看到我的 FPS 上升到 400 左右，畫面順到不行，不說我還以為我的 CPU 特別猛（GIF 看起來會比較卡，最後有附上影片）</p><p>不過這種作法也有缺點，就是不能辨別碰撞、Culling 等等，因為<strong>實際上物體並沒有移動，只有物體的頂點移動而已</strong>，不過這也可以透過其他方式解決，只是原本 CPU 會幫你弄好，現在要自己寫比較麻煩而已，但是效能會好上許多。</p><p><img src="/notes/./images/unity-render-1/Culling.gif" alt="Culling"></p><p>像上面這個例子，物體原本的位置沒有移動，只有頂點在移動，因此當原本的位置跑到鏡頭外面，會直接被 Culling 掉，只能自己寫判斷了。</p><hr><p>以上是本篇教學，花費我許多時間，不過我也因此學到很多東西。</p><p>我認為 Computer Shader 真的是一項值得深入探討的技術，像是<strong>原神</strong>渲染技術分享中就有提到，有超過一半的 Feature 都有使用到 Compute Shader 優化。了解遊戲背後的技術是一件很有趣的事情，這樣玩遊戲跑圖的時候都可以想到一些有的沒的，偷偷思考場景看到的特效背後的原理</p><p>後來發現上面的例子可能沒有真的到 16384 個物件，有些太遠的都被 Culling 掉了 qq，感謝你看到這邊</p><ul><li>專案 Github: <a href="https://github.com/933yee/Unity-Compute-Shader">https://github.com/933yee/Unity-Compute-Shader</a></li></ul><iframe width = "100%" height = "400" src="//www.youtube.com/embed/6tuy4PYs7Rc" frameborder="0" allowfullscreen></iframe><h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><ul><li><a href="https://frankorz.com/2021/04/17/compute-shader/">Compute Shader 简介</a> 大推這篇文章</li><li><a href="https://home.gamer.com.tw/creationDetail.php?sn=5476357">[達人專欄] 【筆記】初學指南，計算著色器</a></li><li><a href="https://www.youtube.com/watch?v=7lp8O53VDOo">Unity compute shader for vertices deform</a></li><li><a href="https://www.youtube.com/watch?v=ap6fdCmE1JA">https://www.youtube.com/watch?v=ap6fdCmE1JA</a></li><li><a href="https://www.youtube.com/watch?v=s-cDYtNfsl4">Real-time fluid simulation in Unity</a></li><li><a href="https://www.youtube.com/watch?v=IrYPkSIvpIw">Unity Performance Tips: Draw Calls</a></li><li><a href="https://www.youtube.com/watch?v=eyaxqo9JV4w">Unity GPU Instancing in less than 7 minutes!</a></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>Unity</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Compiler 筆記 (4)</title>
    <link href="/notes/2024/05/16/compiler-4/"/>
    <url>/notes/2024/05/16/compiler-4/</url>
    
    <content type="html"><![CDATA[<blockquote><p>參考 清華大學 李政崑老師 編譯器設計講義</p></blockquote><h2 id="leftmost-and-rightmost-derivations"><a href="#leftmost-and-rightmost-derivations" class="headerlink" title="leftmost and rightmost derivations"></a>leftmost and rightmost derivations</h2><p><a href="https://www.youtube.com/watch?v=K_aMajzrKF4">leftmost and rightmost derivations</a></p><ul><li><p>介紹 leftmost 和 rightmost derivations</p></li><li><p>A left-recursive grammar might cause a recursive-decent parser, even one with back-tracking, into an infinite loop.</p><ul><li>That is, when we try to expand A, we may eventually find ourselves again trying to expand A without having consumed any input.</li></ul></li></ul><h2 id="Push-Down-Automata"><a href="#Push-Down-Automata" class="headerlink" title="Push Down Automata"></a>Push Down Automata</h2><p><a href="https://www.youtube.com/watch?app=desktop&v=4ejIAmp_Atw">Pushdown Automata (Introduction)</a></p><ul><li>PDA &#x3D; Finite State Machine + A Stack</li><li>PDA &#x3D; A input tape + A finite control unit + A stack with infinite size</li></ul><p><a href="https://www.youtube.com/watch?v=JtRyd7Svlew">Pushdown Automata (Formal Definition)</a></p><ul><li>介紹 $M &#x3D; (Q, \Sigma, \Gamma, \delta, q_0, Z_0, F)$</li><li>介紹 $\delta$ 的 input 和 output</li></ul><p><a href="https://www.youtube.com/watch?v=eY7fwj5jvC4">Pushdown Automata (Graphical Notation)</a></p><ul><li>介紹 PDA 的 Graph </li><li>介紹簡單範例: L &#x3D; {$0^n 1^n$ | n $\ge$ 0}</li><li>一個 language 會被 accept 一旦它能達到 final state 或讓 stack 變空</li></ul><p><a href="https://www.youtube.com/watch?v=TEQcJybMMFU">Pushdown Automata Example (Even Palindrome) PART-1</a></p><ul><li>介紹 Palindrome 的範例</li></ul><p><a href="https://www.youtube.com/watch?v=BxA-aI2dyRo">Pushdown Automata Example (Even Palindrome) PART-2</a></p><ul><li>繼續上一部的 Palindrome 範例，詳細介紹 epsilon 是怎麼運作的</li></ul><h2 id="Parsers"><a href="#Parsers" class="headerlink" title="Parsers"></a>Parsers</h2><p><a href="https://www.youtube.com/watch?v=OIKL6wFjFOo">Introduction to Parsers</a></p><ul><li>介紹 Bottom-up Parser vs. Top-Down Parser</li><li>整個 Parser 的生態結構</li></ul><h3 id="Top-Down-Parsers"><a href="#Top-Down-Parsers" class="headerlink" title="Top Down Parsers"></a>Top Down Parsers</h3><p><a href="https://www.youtube.com/watch?v=iddRD8tJi44">Top Down Parsers - Recursive Descent Parsers</a></p><ul><li>介紹 Recursive Descent Parsers</li></ul><p><a href="https://www.youtube.com/watch?v=v_wvcuJ6mGY">Top Down Parsers - LL(1) Parsers</a></p><ul><li>介紹 Recursive Descent Parsers 的名稱由來</li><li>介紹 LL(1) 的名稱由來</li><li>簡單介紹 FIRST() 和 FOLLOW()</li></ul><p><a href="https://www.youtube.com/watch?v=oOCromcWnfc">FIRST() and FOLLOW() Functions</a></p><ul><li>非常重要的影片，多看幾次</li><li>計算 FIRST() 從下往上，計算 FOLLOW() 從上往下</li><li>FISRT() 要包含 epsilon，FOLLOW() 不用</li><li>計算 FOLLOW() 前最好把 FIRST() 都列好，比較好算</li><li>FOLLOW() 大概可以分成三種 case，就算遇到 epsilon 也一樣方法：<ol><li>The <strong>following terminal symbol</strong> will be selected as FOLLOW</li><li>The <strong>FIRST of the following non-terminal</strong> will be selected as FOLLOW</li><li>If it is the right most in the RHS, the <strong>FOLLOW of the LHS</strong> will be selected</li></ol></li></ul><p><a href="https://www.youtube.com/watch?v=jv4dwxukVvU">FIRST() and FOLLOW() Functions – Solved Problems (Set 1)</a></p><ul><li>更多 FIRST FOLLOW 的範例</li><li>不確定 Q2 Q3 的 FIRST(S) 要不要有 epsilon<ul><li>不用，如果全部產生的 non-terminals FIRST 都有 epsilon 才要</li></ul></li></ul><p><a href="https://www.youtube.com/watch?v=Wo4bafMawFA">FIRST() and FOLLOW() Functions – Solved Problems (Set 2)</a></p><ul><li>更多 FIRST FOLLOW 的範例</li></ul><p><a href="https://www.youtube.com/watch?v=DT-cbznw9aY">LL(1) Parsing Table</a></p><p><a href="https://www.youtube.com/watch?v=clkHOgZUGWU">LL(1) Parsing</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>Compilier</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Flutter 筆記</title>
    <link href="/notes/2024/05/03/flutter-notes/"/>
    <url>/notes/2024/05/03/flutter-notes/</url>
    
    <content type="html"><![CDATA[<figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;package:flutter/material.dart&#x27;</span>;<br><br><span class="hljs-keyword">void</span> main() &#123;<br>  runApp(<span class="hljs-keyword">const</span> MyApp());<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyApp</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">StatelessWidget</span> </span>&#123;<br>  <span class="hljs-keyword">const</span> MyApp(&#123;Key? key&#125;) : <span class="hljs-keyword">super</span>(key: key);<br><br>  <span class="hljs-meta">@override</span><br>  Widget build(BuildContext context) &#123;<br>    <span class="hljs-keyword">return</span> MaterialApp(<br>      debugShowCheckedModeBanner: <span class="hljs-keyword">false</span>,<br>      home: Scaffold(<br>          backgroundColor: Colors.deepPurple[<span class="hljs-number">200</span>],<br>          appBar: AppBar(<br>              title: <span class="hljs-keyword">const</span> Text(<span class="hljs-string">&quot;Hello World&quot;</span>),<br>              backgroundColor: Colors.deepPurple[<span class="hljs-number">400</span>],<br>              elevation: <span class="hljs-number">0</span>,<br>              leading: IconButton(<br>                icon: <span class="hljs-keyword">const</span> Icon(Icons.menu),<br>                onPressed: () &#123;&#125;,<br>              )),<br>          body: Center(<br>              child: Container(<br>            height: <span class="hljs-number">500</span>,<br>            width: <span class="hljs-number">300</span>,<br>            decoration: BoxDecoration(<br>              color: Colors.deepPurple,<br>              borderRadius: BorderRadius.circular(<span class="hljs-number">20</span>),<br>            ),<br>            padding: <span class="hljs-keyword">const</span> EdgeInsets.all(<span class="hljs-number">20</span>),<br>            child: Column(<br>              mainAxisAlignment: MainAxisAlignment.spaceEvenly,<br>              children: [<br>                <span class="hljs-keyword">const</span> Text(<br>                  <span class="hljs-string">&quot;Hello World&quot;</span>,<br>                  style: TextStyle(<br>                    color: Colors.white,<br>                    fontSize: <span class="hljs-number">30</span>,<br>                  ),<br>                ),<br>                Expanded(<br>                  child: Container(<br>                    color: Colors.deepPurple[<span class="hljs-number">100</span>],<br>                  ),<br>                ),<br>                Expanded(<br>                  flex: <span class="hljs-number">2</span>,<br>                  child: Container(<br>                    color: Colors.deepPurple[<span class="hljs-number">200</span>],<br>                  ),<br>                ),<br>                Expanded(<br>                  child: Container(<br>                    color: Colors.deepPurple[<span class="hljs-number">300</span>],<br>                  ),<br>                )<br>              ],<br>            ),<br>          ))),<br>    );<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/notes/./images/flutter-notes/demo1.png" alt="demo 1"></p><h3 id="ListView-and-GridView"><a href="#ListView-and-GridView" class="headerlink" title="ListView and GridView"></a>ListView and GridView</h3><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyApp</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">StatelessWidget</span> </span>&#123;<br>  MyApp(&#123;Key? key&#125;) : <span class="hljs-keyword">super</span>(key: key);<br>  <span class="hljs-keyword">final</span> <span class="hljs-built_in">List</span> names = [<br>    <span class="hljs-string">&#x27;John&#x27;</span>,<br>    <span class="hljs-string">&#x27;Doe&#x27;</span>,<br>    <span class="hljs-string">&#x27;Smith&#x27;</span>,<br>    <span class="hljs-string">&#x27;Alex&#x27;</span>,<br>    <span class="hljs-string">&#x27;James&#x27;</span>,<br>    <span class="hljs-string">&#x27;Robert&#x27;</span>,<br>    <span class="hljs-string">&#x27;William&#x27;</span>,<br>    <span class="hljs-string">&#x27;David&#x27;</span>,<br>    <span class="hljs-string">&#x27;Richard&#x27;</span>,<br>    <span class="hljs-string">&#x27;Joseph&#x27;</span><br>  ];<br>  <span class="hljs-meta">@override</span><br>  Widget build(BuildContext context) &#123;<br>    <span class="hljs-keyword">return</span> MaterialApp(<br>        debugShowCheckedModeBanner: <span class="hljs-keyword">false</span>,<br>        home: Scaffold(<br>            body: Column(<br>          children: [<br>            Expanded(<br>              child: ListView.builder(<br>                  itemCount: <span class="hljs-number">10</span>,<br>                  itemBuilder: (context, index) =&gt; ListTile(<br>                        title: Text(<span class="hljs-string">&#x27;Item <span class="hljs-subst">$index</span>&#x27;</span>),<br>                      )),<br>            ),<br>            Expanded(<br>              flex: <span class="hljs-number">2</span>,<br>              child: GridView.builder(<br>                itemCount: <span class="hljs-number">64</span>,<br>                gridDelegate: SliverGridDelegateWithFixedCrossAxisCount(<br>                    crossAxisCount: <span class="hljs-number">8</span>),<br>                itemBuilder: (count, index) =&gt; Container(<br>                    color: Colors.deepPurple, margin: EdgeInsets.all(<span class="hljs-number">2</span>)),<br>              ),<br>            ),<br>            Expanded(<br>              child: ListView.builder(<br>                  itemCount: names.length,<br>                  itemBuilder: (context, index) =&gt;<br>                      ListTile(title: Text(names[index]))),<br>            ),<br>          ],<br>        )));<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/notes/./images/flutter-notes/demo2.png" alt="demo 2"></p><h3 id="Stack-and-GestureDetector"><a href="#Stack-and-GestureDetector" class="headerlink" title="Stack and GestureDetector"></a>Stack and GestureDetector</h3><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyApp</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">StatelessWidget</span> </span>&#123;<br>  MyApp(&#123;Key? key&#125;) : <span class="hljs-keyword">super</span>(key: key);<br><br>  <span class="hljs-keyword">void</span> userTapped() &#123;<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;User tapped the container&quot;</span>);<br>  &#125;<br><br>  <span class="hljs-meta">@override</span><br>  Widget build(BuildContext context) &#123;<br>    <span class="hljs-keyword">return</span> MaterialApp(<br>        debugShowCheckedModeBanner: <span class="hljs-keyword">false</span>,<br>        home: Scaffold(<br>          body: Center(<br>            child: Stack(<br>              alignment: Alignment.center,<br>              children: [<br>                Container(<br>                  height: <span class="hljs-number">300</span>,<br>                  width: <span class="hljs-number">300</span>,<br>                  color: Colors.deepPurple,<br>                ),<br>                Container(<br>                  height: <span class="hljs-number">200</span>,<br>                  width: <span class="hljs-number">200</span>,<br>                  color: Colors.deepPurple[<span class="hljs-number">400</span>],<br>                ),<br>                GestureDetector(<br>                  onTap: userTapped,<br>                  child: Container(<br>                    height: <span class="hljs-number">100</span>,<br>                    width: <span class="hljs-number">100</span>,<br>                    color: Colors.deepPurple[<span class="hljs-number">200</span>],<br>                    child: Center(child: Text(<span class="hljs-string">&quot;Tap me!&quot;</span>)),<br>                  ),<br>                )<br>              ],<br>            ),<br>          ),<br>        ));<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/notes/./images/flutter-notes/demo3.png" alt="demo 3"></p><h3 id="Navigation"><a href="#Navigation" class="headerlink" title="Navigation"></a>Navigation</h3><h4 id="Main"><a href="#Main" class="headerlink" title="Main"></a>Main</h4><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-keyword">void</span> main() &#123;<br>  runApp(MyApp());<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyApp</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">StatelessWidget</span> </span>&#123;<br>  <span class="hljs-keyword">const</span> MyApp(&#123;Key? key&#125;) : <span class="hljs-keyword">super</span>(key: key);<br><br>  <span class="hljs-meta">@override</span><br>  Widget build(BuildContext context) &#123;<br>    <span class="hljs-keyword">return</span> MaterialApp(<br>      debugShowCheckedModeBanner: <span class="hljs-keyword">false</span>,<br>      home: FirstPage(),<br>      routes: &#123;<br>        <span class="hljs-string">&#x27;/second&#x27;</span>: (context) =&gt; <span class="hljs-keyword">const</span> SecondPage(),<br>      &#125;,<br>    );<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="First-Page"><a href="#First-Page" class="headerlink" title="First Page"></a>First Page</h4><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FirstPage</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">StatelessWidget</span> </span>&#123;<br>  <span class="hljs-keyword">const</span> FirstPage(&#123;<span class="hljs-keyword">super</span>.key&#125;);<br><br>  <span class="hljs-meta">@override</span><br>  Widget build(BuildContext context) &#123;<br>    <span class="hljs-keyword">return</span> Scaffold(<br>      appBar: AppBar(title: <span class="hljs-keyword">const</span> Text(<span class="hljs-string">&#x27;First Page&#x27;</span>)),<br>      body: Center(<br>          child: ElevatedButton(<br>        child: Text(<span class="hljs-string">&quot;Go to Second Page&quot;</span>),<br>        onPressed: () &#123;<br>          Navigator.pushNamed(context, <span class="hljs-string">&#x27;/second&#x27;</span>);<br>        &#125;,<br>      )),<br>    );<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="Second-Page"><a href="#Second-Page" class="headerlink" title="Second Page"></a>Second Page</h4><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SecondPage</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">StatelessWidget</span> </span>&#123;<br>  <span class="hljs-keyword">const</span> SecondPage(&#123;<span class="hljs-keyword">super</span>.key&#125;);<br><br>  <span class="hljs-meta">@override</span><br>  Widget build(BuildContext context) &#123;<br>    <span class="hljs-keyword">return</span> Scaffold(<br>      appBar: AppBar(title: <span class="hljs-keyword">const</span> Text(<span class="hljs-string">&#x27;Second Page&#x27;</span>)),<br>    );<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="Drawer-And-Navigation"><a href="#Drawer-And-Navigation" class="headerlink" title="Drawer And Navigation"></a>Drawer And Navigation</h3><h4 id="Main-1"><a href="#Main-1" class="headerlink" title="Main"></a>Main</h4><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-keyword">void</span> main() &#123;<br>  runApp(MyApp());<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyApp</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">StatelessWidget</span> </span>&#123;<br>  <span class="hljs-keyword">const</span> MyApp(&#123;Key? key&#125;) : <span class="hljs-keyword">super</span>(key: key);<br><br>  <span class="hljs-meta">@override</span><br>  Widget build(BuildContext context) &#123;<br>    <span class="hljs-keyword">return</span> MaterialApp(<br>      debugShowCheckedModeBanner: <span class="hljs-keyword">false</span>,<br>      home: FirstPage(),<br>      routes: &#123;<br>        <span class="hljs-string">&#x27;/firstpage&#x27;</span>: (context) =&gt; FirstPage(),<br>        <span class="hljs-string">&#x27;/homepage&#x27;</span>: (context) =&gt; HomePage(),<br>        <span class="hljs-string">&#x27;/settingspage&#x27;</span>: (context) =&gt; SettingsPage(),<br>      &#125;,<br>    );<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="First-Page-1"><a href="#First-Page-1" class="headerlink" title="First Page"></a>First Page</h4><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FirstPage</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">StatelessWidget</span> </span>&#123;<br>  <span class="hljs-keyword">const</span> FirstPage(&#123;<span class="hljs-keyword">super</span>.key&#125;);<br><br>  <span class="hljs-meta">@override</span><br>  Widget build(BuildContext context) &#123;<br>    <span class="hljs-keyword">return</span> Scaffold(<br>      appBar: AppBar(title: <span class="hljs-keyword">const</span> Text(<span class="hljs-string">&#x27;First Page&#x27;</span>)),<br>      drawer: Drawer(<br>          backgroundColor: Colors.deepPurple[<span class="hljs-number">100</span>],<br>          child: Column(<br>            children: [<br>              DrawerHeader(<br>                  child: Icon(<br>                Icons.favorite,<br>                size: <span class="hljs-number">48</span>,<br>              )),<br>              ListTile(<br>                leading: Icon(Icons.home),<br>                title: <span class="hljs-keyword">const</span> Text(<span class="hljs-string">&#x27;Home&#x27;</span>),<br>                onTap: () &#123;<br>                  Navigator.pop(context);<br>                  Navigator.pushNamed(context, <span class="hljs-string">&#x27;/homepage&#x27;</span>);<br>                &#125;,<br>              ),<br>              ListTile(<br>                leading: Icon(Icons.settings),<br>                title: <span class="hljs-keyword">const</span> Text(<span class="hljs-string">&#x27;Settings&#x27;</span>),<br>                onTap: () &#123;<br>                  Navigator.pop(context);<br>                  Navigator.pushNamed(context, <span class="hljs-string">&#x27;/settingspage&#x27;</span>);<br>                &#125;,<br>              ),<br>            ],<br>          )),<br>    );<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="Home"><a href="#Home" class="headerlink" title="Home"></a>Home</h4><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HomePage</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">StatelessWidget</span> </span>&#123;<br>  <span class="hljs-keyword">const</span> HomePage(&#123;<span class="hljs-keyword">super</span>.key&#125;);<br><br>  <span class="hljs-meta">@override</span><br>  Widget build(BuildContext context) &#123;<br>    <span class="hljs-keyword">return</span> Scaffold(<br>      appBar: AppBar(title: <span class="hljs-keyword">const</span> Text(<span class="hljs-string">&#x27;Home Page&#x27;</span>)),<br>    );<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/notes/./images/flutter-notes/demo4.png" alt="demo 4"></p><h3 id="Bottom-Navigation"><a href="#Bottom-Navigation" class="headerlink" title="Bottom Navigation"></a>Bottom Navigation</h3><h4 id="Main-2"><a href="#Main-2" class="headerlink" title="Main"></a>Main</h4><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-keyword">void</span> main() &#123;<br>  runApp(MyApp());<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyApp</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">StatelessWidget</span> </span>&#123;<br>  <span class="hljs-keyword">const</span> MyApp(&#123;Key? key&#125;) : <span class="hljs-keyword">super</span>(key: key);<br><br>  <span class="hljs-meta">@override</span><br>  Widget build(BuildContext context) &#123;<br>    <span class="hljs-keyword">return</span> MaterialApp(<br>      debugShowCheckedModeBanner: <span class="hljs-keyword">false</span>,<br>      home: FirstPage(),<br>      routes: &#123;<br>        <span class="hljs-string">&#x27;/firstpage&#x27;</span>: (context) =&gt; FirstPage(),<br>        <span class="hljs-string">&#x27;/homepage&#x27;</span>: (context) =&gt; HomePage(),<br>        <span class="hljs-string">&#x27;/settingspage&#x27;</span>: (context) =&gt; SettingsPage(),<br>      &#125;,<br>    );<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="First-Page-StateFul"><a href="#First-Page-StateFul" class="headerlink" title="First Page (StateFul)"></a>First Page (StateFul)</h4><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FirstPage</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">StatefulWidget</span> </span>&#123;<br>  FirstPage(&#123;<span class="hljs-keyword">super</span>.key&#125;);<br><br>  <span class="hljs-meta">@override</span><br>  State&lt;FirstPage&gt; createState() =&gt; _FirstPageState();<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">_FirstPageState</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">State</span>&lt;<span class="hljs-title">FirstPage</span>&gt; </span>&#123;<br>  <span class="hljs-built_in">int</span> _selectedIndex = <span class="hljs-number">0</span>;<br><br>  <span class="hljs-keyword">void</span> _navigateBottomBar(<span class="hljs-built_in">int</span> index) &#123;<br>    setState(() &#123;<br>      _selectedIndex = index;<br>    &#125;);<br>  &#125;<br><br>  <span class="hljs-keyword">final</span> <span class="hljs-built_in">List</span> _pages = [<br>    HomePage(),<br>    ProfilePage(),<br>    SettingsPage(),<br>  ];<br><br>  <span class="hljs-meta">@override</span><br>  Widget build(BuildContext context) &#123;<br>    <span class="hljs-keyword">return</span> Scaffold(<br>      appBar: AppBar(title: <span class="hljs-keyword">const</span> Text(<span class="hljs-string">&#x27;First Page&#x27;</span>)),<br>      body: _pages[_selectedIndex],<br>      bottomNavigationBar: BottomNavigationBar(<br>        currentIndex: _selectedIndex,<br>        onTap: _navigateBottomBar,<br>        items: [<br>          BottomNavigationBarItem(icon: Icon(Icons.home), label: <span class="hljs-string">&#x27;Home&#x27;</span>),<br>          BottomNavigationBarItem(icon: Icon(Icons.person), label: <span class="hljs-string">&#x27;Profile&#x27;</span>),<br>          BottomNavigationBarItem(<br>              icon: Icon(Icons.settings), label: <span class="hljs-string">&#x27;Settings&#x27;</span>),<br>        ],<br>      ),<br>    );<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="Hone"><a href="#Hone" class="headerlink" title="Hone"></a>Hone</h4><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HomePage</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">StatelessWidget</span> </span>&#123;<br>  <span class="hljs-keyword">const</span> HomePage(&#123;<span class="hljs-keyword">super</span>.key&#125;);<br><br>  <span class="hljs-meta">@override</span><br>  Widget build(BuildContext context) &#123;<br>    <span class="hljs-keyword">return</span> Scaffold(<br>      body: Center(child: Text(<span class="hljs-string">&#x27;Home Page&#x27;</span>)),<br>      backgroundColor: Colors.amber[<span class="hljs-number">100</span>],<br>    );<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/notes/./images/flutter-notes/demo5.png" alt="demo 5"></p><h3 id="Counter-App"><a href="#Counter-App" class="headerlink" title="Counter App"></a>Counter App</h3><h4 id="Main-3"><a href="#Main-3" class="headerlink" title="Main"></a>Main</h4><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-keyword">void</span> main() &#123;<br>  runApp(<span class="hljs-keyword">const</span> MyApp());<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyApp</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">StatelessWidget</span> </span>&#123;<br>  <span class="hljs-keyword">const</span> MyApp(&#123;<span class="hljs-keyword">super</span>.key&#125;);<br><br>  <span class="hljs-meta">@override</span><br>  Widget build(BuildContext context) &#123;<br>    <span class="hljs-keyword">return</span> MaterialApp(<br>      debugShowCheckedModeBanner: <span class="hljs-keyword">false</span>,<br>      home: CounterPage(),<br>    );<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="Counter-Page"><a href="#Counter-Page" class="headerlink" title="Counter Page"></a>Counter Page</h4><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CounterPage</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">StatefulWidget</span> </span>&#123;<br>  <span class="hljs-keyword">const</span> CounterPage(&#123;<span class="hljs-keyword">super</span>.key&#125;);<br><br>  <span class="hljs-meta">@override</span><br>  State&lt;CounterPage&gt; createState() =&gt; _CounterPageState();<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">_CounterPageState</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">State</span>&lt;<span class="hljs-title">CounterPage</span>&gt; </span>&#123;<br>  <span class="hljs-built_in">int</span> _counter = <span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">void</span> _incrementCounter() &#123;<br>    setState(() &#123;<br>      _counter++;<br>    &#125;);<br>  &#125;<br><br>  <span class="hljs-meta">@override</span><br>  Widget build(BuildContext context) &#123;<br>    <span class="hljs-keyword">return</span> Scaffold(<br>      body: Center(<br>        child: Column(<br>          mainAxisAlignment: MainAxisAlignment.center,<br>          children: [<br>            Text(<span class="hljs-string">&quot;You pushed the button this many times:&quot;</span>),<br>            Text(<br>              <span class="hljs-string">&#x27;<span class="hljs-subst">$_counter</span>&#x27;</span>,<br>              style: TextStyle(fontSize: <span class="hljs-number">40</span>),<br>            ),<br>            ElevatedButton(<br>                onPressed: _incrementCounter, child: Text(<span class="hljs-string">&quot;Increment&quot;</span>))<br>          ],<br>        ),<br>      ),<br>    );<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="TextField"><a href="#TextField" class="headerlink" title="TextField"></a>TextField</h3><h4 id="Main-4"><a href="#Main-4" class="headerlink" title="Main"></a>Main</h4><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-keyword">void</span> main() &#123;<br>  runApp(<span class="hljs-keyword">const</span> MyApp());<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyApp</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">StatelessWidget</span> </span>&#123;<br>  <span class="hljs-keyword">const</span> MyApp(&#123;<span class="hljs-keyword">super</span>.key&#125;);<br><br>  <span class="hljs-meta">@override</span><br>  Widget build(BuildContext context) &#123;<br>    <span class="hljs-keyword">return</span> MaterialApp(<br>      debugShowCheckedModeBanner: <span class="hljs-keyword">false</span>,<br>      home: ToDoPage(),<br>    );<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="ToDoPage"><a href="#ToDoPage" class="headerlink" title="ToDoPage"></a>ToDoPage</h4><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ToDoPage</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">StatefulWidget</span> </span>&#123;<br>  <span class="hljs-keyword">const</span> ToDoPage(&#123;<span class="hljs-keyword">super</span>.key&#125;);<br><br>  <span class="hljs-meta">@override</span><br>  State&lt;ToDoPage&gt; createState() =&gt; _ToDoPageState();<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">_ToDoPageState</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">State</span>&lt;<span class="hljs-title">ToDoPage</span>&gt; </span>&#123;<br>  TextEditingController myController = TextEditingController();<br>  <span class="hljs-built_in">String</span> greetingMessage = <span class="hljs-string">&quot;&quot;</span>;<br><br>  <span class="hljs-keyword">void</span> greetUser() &#123;<br>    setState(() &#123;<br>      greetingMessage = <span class="hljs-string">&quot;Hello, <span class="hljs-subst">$&#123;myController.text&#125;</span>&quot;</span>;<br>    &#125;);<br>  &#125;<br><br>  <span class="hljs-meta">@override</span><br>  Widget build(BuildContext context) &#123;<br>    <span class="hljs-keyword">return</span> Scaffold(<br>      body: Center(<br>        child: Padding(<br>          padding: <span class="hljs-keyword">const</span> EdgeInsets.all(<span class="hljs-number">25.0</span>),<br>          child: Column(<br>            mainAxisAlignment: MainAxisAlignment.center,<br>            children: [<br>              Text(greetingMessage),<br>              TextField(<br>                controller: myController,<br>                decoration: InputDecoration(<br>                  border: OutlineInputBorder(),<br>                  labelText: <span class="hljs-string">&quot;Enter your name&quot;</span>,<br>                ),<br>              ),<br>              ElevatedButton(onPressed: greetUser, child: Text(<span class="hljs-string">&quot;Tap&quot;</span>))<br>            ],<br>          ),<br>        ),<br>      ),<br>    );<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/notes/./images/flutter-notes/demo6.png" alt="demo 6"></p>]]></content>
    
    
    
    <tags>
      
      <tag>Flutter</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>專題</title>
    <link href="/notes/2024/04/27/%E5%B0%88%E9%A1%8C/"/>
    <url>/notes/2024/04/27/%E5%B0%88%E9%A1%8C/</url>
    
    <content type="html"><![CDATA[<h1 id="還沒看完"><a href="#還沒看完" class="headerlink" title="還沒看完"></a>還沒看完</h1><ul><li><p><a href="https://gamedevelopment.tutsplus.com/forward-rendering-vs-deferred-rendering--gamedev-12342a">Forward Rendering vs. Deferred Rendering</a></p></li><li><p><a href="https://zhuanlan.zhihu.com/p/447161601">UE4笔记-自定义一个UPrimitiveComponent-0</a><br>比較粗略的教學</p></li><li><p><a href="https://www.bilibili.com/read/cv27302584/?jump_opus=1">UE5自定义MeshComponent解析</a></p></li><li><p><a href="https://zhuanlan.zhihu.com/p/580731018">虚幻引擎 自定义VertexFactory（一）</a></p></li><li><p><a href="https://medium.com/@lordned/unreal-engine-4-rendering-overview-part-1-c47f2da65346">Unreal Engine 4 Rendering Part 1: Introduction</a></p></li><li><p><a href="https://unreal.shadeup.dev/docs/instancing">Indirect Instancing in UE5</a><br>只有 project，沒有介紹，有點難懂</p></li><li><p><a href="https://dev.epicgames.com/documentation/en-us/unreal-engine/designing-visuals-rendering-and-graphics-with-unreal-engine">Designing Visuals, Rendering, and Graphics</a><br>UE5 官方文件</p></li><li><p><a href="https://www.cnblogs.com/timlly/p/14588598.html#322-%E4%BB%8Efprimitivesceneproxy%E5%88%B0fmeshbatch">剖析虚幻渲染体系（03）- 渲染机制</a><br>大佬寫的，看不完</p></li></ul><h1 id="看完的"><a href="#看完的" class="headerlink" title="看完的"></a>看完的</h1><h2 id="Creating-a-Custom-Mesh-Component-in-UE4"><a href="#Creating-a-Custom-Mesh-Component-in-UE4" class="headerlink" title="Creating a Custom Mesh Component in UE4"></a>Creating a Custom Mesh Component in UE4</h2><p>教你怎麼在 UE4 寫自己的 Mesh Component，內容包含 Custom Mesh Component、Scene Proxy、Vertex Factory、Vertex Shader 等介紹，還有附 Project Github，可惜介紹沒有寫完，且不會再更新了<br><a href="https://medium.com/realities-io/creating-a-custom-mesh-component-in-ue4-part-0-intro-2c762c5f0cd6">Creating a Custom Mesh Component in UE4 | Part 0: Intro</a><br><a href="https://medium.com/realities-io/creating-a-custom-mesh-component-in-ue4-part-1-an-in-depth-explanation-of-vertex-factories-4a6fd9fd58f2">Creating a Custom Mesh Component in UE4 | Part 1: An In-depth Explanation of Vertex Factories</a><br><a href="https://medium.com/realities-io/creating-a-custom-mesh-component-in-ue4-part-2-implementing-the-vertex-factory-4e21e51a1e10">Creating a Custom Mesh Component in UE4 | Part 2: Implementing the Vertex Factory</a><br><a href="https://medium.com/realities-io/creating-a-custom-mesh-component-in-ue4-part-3-the-mesh-components-scene-proxy-6965a3ea4cc9">Creating a Custom Mesh Component in UE4 | Part 3: The Mesh Component’s Scene Proxy</a></p><p>翻譯版<br><a href="https://zhuanlan.zhihu.com/p/361322348">创建虚幻自定义Mesh组件 | Part 1: 深度解释顶点工厂（Vertex Factory）</a><br><a href="https://zhuanlan.zhihu.com/p/361601866">创建虚幻自定义Mesh组件 | Part 2: 顶点工厂的实现</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>計算機圖學 筆記</title>
    <link href="/notes/2024/04/12/computer-graphics/"/>
    <url>/notes/2024/04/12/computer-graphics/</url>
    
    <content type="html"><![CDATA[<blockquote><p>參考 清華大學 李潤容老師 計算機圖學講義</p></blockquote><h1 id="Introduction-to-Computer-Graphics"><a href="#Introduction-to-Computer-Graphics" class="headerlink" title="Introduction to Computer Graphics"></a>Introduction to Computer Graphics</h1><h2 id="What-is-Computer-Graphics"><a href="#What-is-Computer-Graphics" class="headerlink" title="What is Computer Graphics"></a>What is Computer Graphics</h2><table><thead><tr><th align="center">Input</th><th align="center">Output</th><th align="center">Category</th></tr></thead><tbody><tr><td align="center">Image</td><td align="center">Image</td><td align="center">Image Processing</td></tr><tr><td align="center">Description Images</td><td align="center">Description</td><td align="center">Computer Vision&#x2F; Pattern Recognition</td></tr><tr><td align="center">Description</td><td align="center">Image</td><td align="center">Computer Graphics</td></tr></tbody></table><h3 id="Image-Processing"><a href="#Image-Processing" class="headerlink" title="Image Processing"></a>Image Processing</h3><ul><li>Performing various types of operations on an input image, and output an image with some useful information</li><li>Ex: Edge Detection, Image Compression</li></ul><h3 id="Computer-Vision-Pattern-Recognition"><a href="#Computer-Vision-Pattern-Recognition" class="headerlink" title="Computer Vision &#x2F; Pattern Recognition"></a>Computer Vision &#x2F; Pattern Recognition</h3><ul><li>Computer Vision<ul><li>Building a artificial system that obtain information from images</li></ul></li><li>Pattern Recognition<ul><li>Classify data based on either prior knowledge or on statistical information extracted from the patterns</li></ul></li><li>Ex: Object Detection, Tracking, Classification, Recognition</li></ul><h3 id="Computer-Graphics"><a href="#Computer-Graphics" class="headerlink" title="Computer Graphics"></a>Computer Graphics</h3><ul><li>Concern the pictorial synthesis of real or imaginary objects from their computer-based models</li><li>2D graphics<ul><li>Ex: Texts, 2D lines&#x2F; polygons&#x2F; images…</li></ul></li><li>3D graphics<ul><li>Project the objects onto 2D projection plane and render</li></ul></li><li>Types<ul><li>Passive Stereo<ul><li>The 3D effect is achieved by presenting slightly different images to each eye using techniques such as polarization or color filtering.</li><li>Ex:Anaglyphic 3D glasses (紅藍 3D 眼鏡)、Polarization 3D glasses (偏光 3D 眼鏡)</li></ul></li><li>Active Stereo<ul><li>Involve synchronizing shutter glasses or alternate-frame sequencing with the display to present different images to each eye at high speed.</li><li>Ex: Shutter Glasses、VR display</li></ul></li></ul></li></ul><h1 id="Graphics-Hardware-System"><a href="#Graphics-Hardware-System" class="headerlink" title="Graphics Hardware System"></a>Graphics Hardware System</h1><h2 id="GPU"><a href="#GPU" class="headerlink" title="GPU"></a>GPU</h2><ul><li>Graphics Processing Unit</li><li>Very high complexity with massively parallelism</li></ul><h2 id="Frame-Buffer"><a href="#Frame-Buffer" class="headerlink" title="Frame Buffer"></a>Frame Buffer</h2><ul><li>Memory location for storing display data during processing<ul><li>Front buffer (Current display buffer)</li><li>Back buffer (Nexy display buffer)</li></ul></li></ul><h3 id="Screen-Display-Refresh"><a href="#Screen-Display-Refresh" class="headerlink" title="Screen&#x2F; Display Refresh"></a>Screen&#x2F; Display Refresh</h3><ul><li>Retrieve <strong>front buffer</strong> pixels for displaying pixel colors on screen</li><li>Constant refresh rate</li><li>Scan-line based display<ul><li>從左上往右，一行一行往下顯示</li></ul></li></ul><h3 id="Single-Buffering"><a href="#Single-Buffering" class="headerlink" title="Single Buffering"></a>Single Buffering</h3><ul><li>Display after rendering complete<ul><li>cannot render during display</li></ul></li><li>Rendering during displaying<ul><li>Display incomplete result</li><li>畫面可能會有黑黑的</li></ul></li></ul><p><img src="/notes/./images/computer-graphics/SingleBuffering.png" alt="Single Buffering"></p><h3 id="Double-Buffering"><a href="#Double-Buffering" class="headerlink" title="Double Buffering"></a>Double Buffering</h3><ul><li>A techinique to prevent from displaying incomplete frame</li></ul><p><img src="/notes/./images/computer-graphics/DoubleBuffering.png" alt="Double Buffering"></p><h3 id="Full-Screen-Display"><a href="#Full-Screen-Display" class="headerlink" title="Full Screen Display"></a>Full Screen Display</h3><ul><li>Uses Double Buffering or Triple Buffering</li><li>Flip display by changing <strong>display base address</strong> to corresponding buffer</li></ul><h3 id="Window-Mode-Display"><a href="#Window-Mode-Display" class="headerlink" title="Window Mode Display"></a>Window Mode Display</h3><ul><li>Uses Double Buffering or Triple Buffering</li><li>Flip display by using 2D bitblt to move <strong>back buffer</strong> frame on to <strong>front buffer</strong> display</li></ul><h1 id="3D-Graphics-Pipeline"><a href="#3D-Graphics-Pipeline" class="headerlink" title="3D Graphics Pipeline"></a>3D Graphics Pipeline</h1><ul><li>Almost everything you see on the display is processed by the graphics pipeline<ul><li>Windows UI、Video Games 等</li><li>不過像播影片就不算，它是直接寫到 frame buffer，沒有經過 graphics pipeline</li></ul></li><li>It is realized by graphics hardware (GPU) or by software (CPU)<ul><li>用 hardware 可以比較快，但如果沒有 GPU 加速，用 software (CPU) 也可以算</li></ul></li></ul><h2 id="Graphics-Rendering-Process"><a href="#Graphics-Rendering-Process" class="headerlink" title="Graphics Rendering Process"></a>Graphics Rendering Process</h2><p><img src="/notes/./images/computer-graphics/GraphicsRenderingProcess.png" alt="Graphics Rendering Process"></p><h3 id="3D-Graphics-Engine"><a href="#3D-Graphics-Engine" class="headerlink" title="3D Graphics Engine"></a>3D Graphics Engine</h3><ul><li>屬於硬體，Graphics pipeline 就在這邊</li></ul><h3 id="Driver"><a href="#Driver" class="headerlink" title="Driver"></a>Driver</h3><ul><li>不是所有的硬體可以解決所有問題，有些事情你會以為硬體幫你做，其實是 Driver 在做。有時候有 Bug，它會幫你用 Driver (software) 的方式繞過去，看起來是硬體修復了</li><li>做 Hardware 的人通常也負責做 Driver，雖然它算是軟體</li></ul><h2 id="Inside-a-3D-Graphics-Pipeline"><a href="#Inside-a-3D-Graphics-Pipeline" class="headerlink" title="Inside a 3D Graphics Pipeline"></a>Inside a 3D Graphics Pipeline</h2><h3 id="Fixed-Function-Pipeline"><a href="#Fixed-Function-Pipeline" class="headerlink" title="Fixed Function Pipeline"></a>Fixed Function Pipeline</h3><p>每個 Stage 功能都是寫死的，像是 Transform and Lighting，所以效果都看起來差不多，現在很少用</p><p><img src="https://cg2010studio.files.wordpress.com/2011/09/opengles_1x_pipeline.gif" alt="OpenGL ESv1.1"></p><h3 id="Programmable-Pipeline"><a href="#Programmable-Pipeline" class="headerlink" title="Programmable Pipeline"></a>Programmable Pipeline</h3><p>把 Fixed Function Pipeline 其中某幾個功能包裝成 Shader，讓 programmer 可以自己改，像是多了 Vertex Shader 來取代原本的 Transform and Lighting</p><p><img src="https://cg2010studio.com/wp-content/uploads/2011/09/opengles_2x_pipeline.gif" alt="OpenGL ESv2.0"></p><p><img src="/notes/./images/computer-graphics/Overviewofa3DGraphicsPipeline.png" alt="Overview of a 3D Graphics Pipeline"></p><h4 id="Modeling"><a href="#Modeling" class="headerlink" title="Modeling"></a>Modeling</h4><p><img src="/notes/./images/computer-graphics/Modeling.png" alt="Modeling"></p><h4 id="Transform"><a href="#Transform" class="headerlink" title="Transform"></a>Transform</h4><p>放大、縮小、平移、旋轉</p><ol><li>Geometrical Transformation (Model Transformation)</li></ol><ul><li>From <strong>Object Space</strong> to <strong>World Space</strong><ul><li>每個物體有自己的座標系</li></ul></li></ul><p><img src="/notes/./images/computer-graphics/GeometricalTransformation.png" alt="Geometrical Transformation"></p><ol start="2"><li>Viewing Transformation</li></ol><ul><li>From <strong>World Space</strong> to <strong>View Space</strong></li></ul><p><img src="/notes/./images/computer-graphics/ViewingTransformation.png" alt="Viewing Transformation"></p><ol start="3"><li>Projection Transformation</li></ol><ul><li>From <strong>View Space</strong> to <strong>Screen Space</strong></li></ul><p><img src="/notes/./images/computer-graphics/ProjectionTransformation.png" alt="Projection Transformation"></p><h4 id="Lighting"><a href="#Lighting" class="headerlink" title="Lighting"></a>Lighting</h4><p>Simulate the Effect of Light-Object Interaction</p><ul><li>簡化成 Ambient(環境光) + Diffuse(漫反射光) + Specular Reflection(鏡面光)</li></ul><p><img src="http://learnopengl.com/img/lighting/basic_lighting_phong.png" alt="Lighting"></p><ul><li><a href="https://learnopengl-cn.readthedocs.io/zh/latest/02%20Lighting/02%20Basic%20Lighting/">光照基础 - LearnOpenGL-CN</a></li></ul><h4 id="Triangle-Setup"><a href="#Triangle-Setup" class="headerlink" title="Triangle Setup"></a>Triangle Setup</h4><p>對於一個三角形，算出每邊的斜率，三個頂點的座標不一定是整數，但是畫的點座標必須是整數，所以要得到三角形內部的所有整數座標</p><p><img src="/notes/./images/computer-graphics/TriangleSetup.png" alt="Triangle Setup"></p><h4 id="Rasterization"><a href="#Rasterization" class="headerlink" title="Rasterization"></a>Rasterization</h4><ul><li>根據頂點的顏色，用內插法算出三角形內部的顏色</li></ul><p><img src="/notes/./images/computer-graphics/TriangleRasterization.png" alt="Triangle Rasterization"></p><ul><li>Line Rasterization</li></ul><p><img src="/notes/./images/computer-graphics/LineRasterization.png" alt="Line Rasterization"></p><h4 id="Hidden-Surface-Removal"><a href="#Hidden-Surface-Removal" class="headerlink" title="Hidden Surface Removal"></a>Hidden Surface Removal</h4><p>移除被擋住、看不到的地方</p><p><img src="https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcQtEhHXHQSecUmH7ZSasawmMxaeKglIcD1yOQ&usqp=CAU" alt="Hidden Surface Removal"></p><h4 id="Texture-Mapping"><a href="#Texture-Mapping" class="headerlink" title="Texture Mapping"></a>Texture Mapping</h4><p><img src="https://glasnost.itcarlow.ie/~powerk/GeneralGraphicsNotes/texturemapping/texture_mapping.jpg" alt="Texture Mapping"></p><h4 id="Rendering"><a href="#Rendering" class="headerlink" title="Rendering"></a>Rendering</h4><h5 id="Color-Composition"><a href="#Color-Composition" class="headerlink" title="Color Composition"></a>Color Composition</h5><p>Render with lighting and texturing<br><img src="/notes/./images/computer-graphics/ColorComposition.png" alt="Color Composition"></p><h5 id="Blending"><a href="#Blending" class="headerlink" title="Blending"></a>Blending</h5><p>Translucent Effect<br><img src="/notes/./images/computer-graphics/Blending.png" alt="Blending"><br>物體透明度和桌子透明度都變 50%，然後混合</p><h4 id="Advanced-Features"><a href="#Advanced-Features" class="headerlink" title="Advanced Features"></a>Advanced Features</h4><h5 id="Shadow"><a href="#Shadow" class="headerlink" title="Shadow"></a>Shadow</h5><ul><li>Hard Shadow</li><li>Soft Shadow</li></ul><p><img src="https://www.peachpit.com/content/images/chap3_0321316312/elementLinks/dir2_03_22.jpg" alt="Shadow"></p><h5 id="Anti-Aliasing"><a href="#Anti-Aliasing" class="headerlink" title="Anti-Aliasing"></a>Anti-Aliasing</h5><p>Smooth out the Jaggy Edges<br><img src="https://camo.githubusercontent.com/d02e9089abb4f56ece4a30705261fd7d9554947a8dc2f4e3006b358bb5700ca1/68747470733a2f2f686172647a6f6e652e65732f6170702f75706c6f6164732d686172647a6f6e652e65732f323032302f30342f416e74692d416c696173696e672d312e6a7067" alt="Anti-Aliasing"></p><h5 id="Shader"><a href="#Shader" class="headerlink" title="Shader"></a>Shader</h5><p><img src="/notes/./images/computer-graphics/Shader.png" alt="Shader"></p><h6 id="Vertex-Shader"><a href="#Vertex-Shader" class="headerlink" title="Vertex Shader"></a>Vertex Shader</h6><ul><li>Process vertices<ul><li>Transformation</li><li>Lighting </li><li>Displacement</li></ul></li><li>Operate on a single input vertex and produce a single output vertex</li></ul><h6 id="Tessellation-Geometry-Shader"><a href="#Tessellation-Geometry-Shader" class="headerlink" title="Tessellation&#x2F;Geometry Shader"></a>Tessellation&#x2F;Geometry Shader</h6><ul><li>近的時候可以切成很多小三角形，遠的時候切比較大</li><li>Process priitives<ul><li>Point sprite tessellation</li><li>Wide line tessellation</li><li>Shadow volume generation</li><li>Surface subdivision</li></ul></li><li>Inputs one primitive and outputs can be more than one primitives</li></ul><h6 id="Pixel-Shader"><a href="#Pixel-Shader" class="headerlink" title="Pixel Shader"></a>Pixel Shader</h6><ul><li>Process pixels<ul><li>Texture mapping</li><li>Color combine</li><li>Per-pixel lighting</li><li>…</li></ul></li><li>Inputs one pixel and outputs one pixel at same position, or no pixel at all</li></ul><h1 id="Introduction-to-OpenGL"><a href="#Introduction-to-OpenGL" class="headerlink" title="Introduction to OpenGL"></a>Introduction to OpenGL</h1><h2 id="What-is-OpenGL"><a href="#What-is-OpenGL" class="headerlink" title="What is OpenGL"></a>What is OpenGL</h2><ul><li>Open Graphics Library (OpenGL) is an open standard for <strong>cross-language</strong>, <strong>cross-platform</strong> API specification</li><li>OpenGL is a set of <strong>APIs</strong> used to write 2D&#x2F;3D graphics applications</li><li>OpenGL defines the function specification of each API and leaves the implementation to the vendors themselves<ul><li>OpenGL 只有定 SPEC，具體怎麼做留給硬體廠商</li><li>每個硬體可能執行運算的方式不太一樣，像是做加法時，可能精度不一樣</li></ul></li></ul><h2 id="Other-Graphics-APIs"><a href="#Other-Graphics-APIs" class="headerlink" title="Other Graphics APIs"></a>Other Graphics APIs</h2><ul><li>Direct3D<ul><li><strong>Proprietary</strong> Microsoft Windows 3D graphics API</li></ul></li><li>Vulkan</li><li>OpenGL ES <ul><li>OpenGL for Emnedded Systems</li></ul></li><li>Web-based OpenGL</li><li>Metal</li><li>Mantle</li></ul><h2 id="OpenGL-vs-Direct3D"><a href="#OpenGL-vs-Direct3D" class="headerlink" title="OpenGL vs. Direct3D"></a>OpenGL vs. Direct3D</h2><p><img src="/notes/./images/computer-graphics/OpenGLvsDirect3D.png" alt="OpenGL vs. Direct3D"></p><h2 id="OpenGL-Extension"><a href="#OpenGL-Extension" class="headerlink" title="OpenGL Extension"></a>OpenGL Extension</h2><p>硬體廠商可以寫自己的 OpenGL Extension，像是 AMD、NVDIA…</p><ul><li>Advantages<ul><li>Develop new functionality before new API spec is released</li><li>Hardware vendors can expose their new hardware features via extension first</li><li>Extension becomes core function (or extension) after being approved by ARB(Architecture Review Board)</li></ul></li><li>Disadvantages<ul><li>It is vendor specific before approved by ARB</li><li>Compatibility</li></ul></li><li>GLEW&#x2F;GLAD can help in querying and loading OpenGL extensions</li></ul><h2 id="Why-OpenGL"><a href="#Why-OpenGL" class="headerlink" title="Why OpenGL"></a>Why OpenGL</h2><ul><li>Cross-platform<ul><li>Windows Mac OSX, Linux</li></ul></li><li>Better backward compatibility<ul><li>舊的 OpenGL code 通常還是可以跑</li></ul></li><li>Run on various hardware platforms<ul><li>OpenGL, OpenGL ES, WebGL</li></ul></li></ul><h2 id="Convention-of-an-OpenGL-API"><a href="#Convention-of-an-OpenGL-API" class="headerlink" title="Convention of an OpenGL API"></a>Convention of an OpenGL API</h2><p><img src="/notes/./images/computer-graphics/ConventionofanOpenGLAPI.png" alt="Convention of an OpenGL API"></p><h3 id="Data-Types"><a href="#Data-Types" class="headerlink" title="Data Types"></a>Data Types</h3><p>C++ data types 和 OpenGL data types 大部分一樣，但還是有些許不同<br><img src="/notes/./images/computer-graphics/OpenGLDataTypes.png" alt="OpenGL Data Types"></p><h2 id="OpenGL-Pipeline"><a href="#OpenGL-Pipeline" class="headerlink" title="OpenGL Pipeline"></a>OpenGL Pipeline</h2><p><img src="/notes/./images/computer-graphics/OpenGLPipeline.png" alt="OpenGL Pipeline"><br><a href="http://romain.vergne.free.fr/teaching/IS/SI03-pipeline.html">Image synthesis and OpenGL: graphics pipeline</a></p><p><img src="/notes/./images/computer-graphics/OpenGLPipeline2.png" alt="OpenGL Pipeline"></p><ul><li>紅色代表 programmable，虛線代表可以不需要，但還是建議要寫 fragment shader 比較好</li></ul><h2 id="OpenGL-Shading-Language"><a href="#OpenGL-Shading-Language" class="headerlink" title="OpenGL Shading Language"></a>OpenGL Shading Language</h2><ul><li>High-Level shading language based on C programming language</li><li>DirectX + HLSL vs. OpenGL + GLSL</li><li>Hardware vendors will provide shader compiler to optimize the shader codes for deriving best performance running on their hardware architecture</li></ul><h2 id="OpenGL-工具"><a href="#OpenGL-工具" class="headerlink" title="OpenGL 工具"></a>OpenGL 工具</h2><h3 id="OpenGL-Context-Window-Creation"><a href="#OpenGL-Context-Window-Creation" class="headerlink" title="OpenGL Context&#x2F;Window Creation"></a>OpenGL Context&#x2F;Window Creation</h3><ul><li><strong>context</strong> stores all the states associated with the instance of OpenGL rendering</li><li><strong>window</strong> is the window where your rendering result displayed</li><li><strong>event handlings</strong> process different kinds of input such as keyboard and mouse</li></ul><p>A cross-platform toolkit for writing OpenGL programs</p><ul><li>Support application frameworks to control the platform’s <strong>window system</strong> and <strong>event handling</strong></li></ul><h5 id="GLUT"><a href="#GLUT" class="headerlink" title="GLUT"></a>GLUT</h5><ul><li>Pretty old and no longer maintained</li></ul><h4 id="Freeglut"><a href="#Freeglut" class="headerlink" title="Freeglut"></a>Freeglut</h4><ul><li>An alternative to GLUT</li><li><a href="https://freeglut.sourceforge.net/">https://freeglut.sourceforge.net/</a></li></ul><h5 id="GLFW"><a href="#GLFW" class="headerlink" title="GLFW"></a>GLFW</h5><ul><li><a href="https://www.glfw.org/">https://www.glfw.org/</a></li></ul><h3 id="OpenGL-Loading-Libraries"><a href="#OpenGL-Loading-Libraries" class="headerlink" title="OpenGL Loading Libraries"></a>OpenGL Loading Libraries</h3><p>OpenGL loader checks the graphics driver for which OpenGL version profile is supported and gets all the function pointers as well as the supported extensions</p><h5 id="GLEW"><a href="#GLEW" class="headerlink" title="GLEW"></a>GLEW</h5><p>The OpenGL Extension Wrangler Library</p><ul><li>A cross-platform open-source C&#x2F;C++ extension loading library</li><li>Provides efficient run-time mechanisms for determining which OpenGL extensions are supported on the target platform</li><li><a href="http://glew.sourceforge.net/">http://glew.sourceforge.net/</a></li></ul><h5 id="GLAD"><a href="#GLAD" class="headerlink" title="GLAD"></a>GLAD</h5><p>Multi-Language GL&#x2F;GLES&#x2F;EGL&#x2F;GLX&#x2F;WGL Loader-Generator based on the official specs</p><ul><li>An tool (with a web-service) for generating OpenGL, OpenGL ES, EGL, GLX and WGL headers (and loaders) based on the official XML specifications</li><li>You can customized to the version you like without including those deprecated or legacy functions</li><li><a href="https://glad.dav1d.de/">https://glad.dav1d.de/</a></li></ul><h3 id="Other-OpenGL-Useful-Utilities"><a href="#Other-OpenGL-Useful-Utilities" class="headerlink" title="Other OpenGL Useful Utilities"></a>Other OpenGL Useful Utilities</h3><h5 id="GLM"><a href="#GLM" class="headerlink" title="GLM"></a>GLM</h5><p>OpenGL mathematics libraries</p><ul><li>A header only C++ mathematics library for graphics software based on the OpenGL Shading Language (GLSL) specifications</li><li><a href="https://glm.g-truc.net/0.9.9/index.html">https://glm.g-truc.net/0.9.9/index.html</a></li></ul><h5 id="stb-image-h"><a href="#stb-image-h" class="headerlink" title="stb_image.h"></a>stb_image.h</h5><p>Image and texture</p><ul><li>An image-loading library that supports several popular formats</li><li><a href="https://github.com/nothings/stb/blob/master/stb_imag">https://github.com/nothings/stb/blob/master/stb_imag</a></li></ul><h4 id="Asset-Model-loader"><a href="#Asset-Model-loader" class="headerlink" title="Asset&#x2F;Model loader"></a>Asset&#x2F;Model loader</h4><h5 id="Open-Asset-Import"><a href="#Open-Asset-Import" class="headerlink" title="Open Asset Import"></a>Open Asset Import</h5><ul><li>A loader with support to a variety of 3D file formats</li><li><a href="http://www.assimp.org/">http://www.assimp.org/</a></li></ul><h5 id="TinyOBJ-loader"><a href="#TinyOBJ-loader" class="headerlink" title="TinyOBJ loader"></a>TinyOBJ loader</h5><ul><li>A simple wavefront boj file loader</li><li><a href="https://github.com/tinyobjloader/tinyobjloader">https://github.com/tinyobjloader/tinyobjloader</a></li></ul><h5 id="glm"><a href="#glm" class="headerlink" title="glm"></a>glm</h5><ul><li>A simple wavefront obj file loader</li><li>Not the OpenGL Mathematics Library</li><li><a href="http://devernay.free.fr/hacks/glm/">http://devernay.free.fr/hacks/glm/</a></li></ul><h2 id="OpenGL-Application-Framework"><a href="#OpenGL-Application-Framework" class="headerlink" title="OpenGL Application Framework"></a>OpenGL Application Framework</h2><p>[P42]</p>]]></content>
    
    
    
    <tags>
      
      <tag>CG</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Unity 新手教學 - 導入物件</title>
    <link href="/notes/2024/04/10/unity-tutorial-3/"/>
    <url>/notes/2024/04/10/unity-tutorial-3/</url>
    
    <content type="html"><![CDATA[<p>在這次教學中，我們將學習如何導入自己的圖片、音樂，或是將來自 Sketchfab 和 Unity Asset Store 的酷炫 3D 物件導入到你的 Unity 專案中</p><h2 id="導入自己的資源"><a href="#導入自己的資源" class="headerlink" title="導入自己的資源"></a>導入自己的資源</h2><p>導入自己的物件非常簡單，可以在 Project View 空白處點擊右鍵，Import New Asset，然後選擇要導入的物件即可</p><p><img src="/notes/./images/unity-tutorial-3/ImportNewAsset.png" alt="Import New Asset"></p><p>還有另一個方法，可以直接把那個東西拉進來就好（我都這樣，因為我很懶 XD</p><p><img src="/notes/./images/unity-tutorial-3/ImportDemo.gif" alt="Import Demo"></p><h3 id="導入圖片"><a href="#導入圖片" class="headerlink" title="導入圖片"></a>導入圖片</h3><p>值得一提的是，導入的圖片會自動變成 Texture，所以可以直接用在 3D 模型、UI 元素、粒子效果上面<br><img src="/notes/./images/unity-tutorial-3/Texture.png" alt="Texture"></p><h2 id="Unity-Asset-Store"><a href="#Unity-Asset-Store" class="headerlink" title="Unity Asset Store"></a>Unity Asset Store</h2><h3 id="什麼是-Unity-Asset-Store？"><a href="#什麼是-Unity-Asset-Store？" class="headerlink" title="什麼是 Unity Asset Store？"></a>什麼是 Unity Asset Store？</h3><p><a href="https://assetstore.unity.com/zh-CN">Unity Asset Store</a> 是 Unity 官方提供的一個平台，類似於 APP store，但是專注於 Unity 開發的資源。這裡有各種各樣的資源，包括 2D pixel art、3D 模型、材質、音效、程式碼，甚至是完整的專案模板、各種輔助型的工具。無論你是需要一個小工具還是一個完整的遊戲框架，Unity Asset Store 都能滿足你的需求。</p><h3 id="如何使用？"><a href="#如何使用？" class="headerlink" title="如何使用？"></a>如何使用？</h3><p>我這邊隨便選擇一個 <a href="https://assetstore.unity.com/packages/3d/environments/landscapes/mars-landscape-3d-175814">Mars Landscape 3D</a> 的 Package，確認右邊的 <strong>Original Unity version</strong> 符合當前版本後，點擊右邊的 <strong>Add to My Assets</strong>，它應該會叫你先登入帳號</p><p><img src="/notes/./images/unity-tutorial-3/AddNewAsset.png" alt="Add New Asset"></p><p>登入並 <strong>Add to My Assets</strong> 後，就成功加入了到你帳號的 Assets 裡面了</p><p><img src="/notes/./images/unity-tutorial-3/AddNewAsset2.png" alt="Add New Asset"></p><p>接著點擊 <strong>Open In Unity</strong>，它會自動幫你打開 Unity 裡面的 Package Manager</p><p><img src="/notes/./images/unity-tutorial-3/PackageManager.png" alt="Package Manager"></p><p>Package Manager 會有你所有的 Assets，之後你想要檢視 Package Manager 的話，也可以從上方的 Windows 裡面打開</p><p><img src="/notes/./images/unity-tutorial-3/PackageManager2.png" alt="Package Manager"></p><p>點擊右上方的 <strong>Download</strong>，下載完後再點 <strong>Import</strong>，然後繼續點 <strong>Import</strong></p><p><img src="/notes/./images/unity-tutorial-3/PackageManager3.png" alt="Package Manager"></p><p>現在這個 Unity Asset Store 的 Package 就成功導入到你的專案中了！</p><p><img src="/notes/./images/unity-tutorial-3/ProjectView.png" alt="Project View"></p><p><img src="/notes/./images/unity-tutorial-3/DemoScene.png" alt="Demo Scene"></p><p>不喜歡這個場景中的天空？沒問題！這邊再導入另一個在 Unity Asset Store 上的 Package - <a href="https://assetstore.unity.com/packages/2d/textures-materials/sky/skybox-series-free-103633">Skybox Series Free</a>，這 Package 提供許多精緻好看的 Skybox Material</p><p><img src="/notes/./images/unity-tutorial-3/SkyboxUnityAssetStore.png" alt="Skybox Unity Asset Store"></p><h4 id="Skybox"><a href="#Skybox" class="headerlink" title="Skybox"></a>Skybox</h4><p>Unity Skybox 是一種用於創建場景背景的特殊 Material，Unity 提供了幾種預設的 Skybox Shader，像是 6 Sided、Cubemap、Procedural 等，想要有更多動態效果，也可以自定義 Skybox Shader，不過這會比較進階一點</p><h5 id="6-Sided"><a href="#6-Sided" class="headerlink" title="6 Sided"></a>6 Sided</h5><p>我們可以在 Assets 中新增一個 Material</p><p><img src="/notes/./images/unity-tutorial-3/NewMaterial.png" alt="New Material"></p><p>在這個材質的 Inspector 中，把上方的 Shader 改成 6 Sided</p><p><img src="/notes/./images/unity-tutorial-3/SixSided.png" alt="Six Sided"><br><img src="/notes/./images/unity-tutorial-3/MaterialInspector.png" alt="Material Inspector"></p><p>可以看到它要我們放六張 Texture 進去，分別對應到正方體的六個面，就可以做出一個 Skybox</p><p><img src="https://opengameart.org/sites/default/files/Sorsele.jpg" alt="Skybox"></p><p>這邊我就直接拿導入的 Skybox Material 來演示怎麼改變場景中的天空</p><h5 id="全域改變"><a href="#全域改變" class="headerlink" title="全域改變"></a>全域改變</h5><p><img src="/notes/./images/unity-tutorial-3/Lighting.png" alt="Lighting"></p><p>在上方 Window 裡面的 Rendering 中可以找到 Lighting，點選後會跳出一個視窗</p><p><img src="/notes/./images/unity-tutorial-3/LightingInspector.png" alt="Lighting Inspector"></p><p>在這個視窗上方的 Environment 中會找到一個 <strong>Skybox Material</strong>，可以直接把剛剛導入的 Package 中的 Material 拖曳進去，或是直接拖曳到場景中也可以，都是做全域的改變，會影響所有場景的 Camera 的 Skybox</p><p><img src="/notes/./images/unity-tutorial-3/GlobalSkybox.gif" alt="Global Skybox"></p><h5 id="局部改變"><a href="#局部改變" class="headerlink" title="局部改變"></a>局部改變</h5><p>比較好的做法是在 Camera 裡面新增一個 Skybox Component</p><p><img src="/notes/./images/unity-tutorial-3/CameraInspector.png" alt="Camera Inspector"></p><p>一樣把想要的 Skybox Material 拖曳進去，這樣只會影響這個 Camera，且會 Override Lighting Tab 的設定</p><p><img src="/notes/./images/unity-tutorial-3/LocalSkybox.gif" alt="Local Skybox"></p><h4 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h4><p>每次 Import Package 後，可以先去找這個 Package 所提供的 Demo Scene，執行看看有沒有問題，確保這個 Package 是和你現在的 Unity 專案相容的，避免未來出現問題卻找不到問題點在哪</p><h2 id="Sketchfab"><a href="#Sketchfab" class="headerlink" title="Sketchfab"></a>Sketchfab</h2><h3 id="什麼是-Sketchfab？"><a href="#什麼是-Sketchfab？" class="headerlink" title="什麼是 Sketchfab？"></a>什麼是 Sketchfab？</h3><p><a href="https://sketchfab.com/">Sketchfab</a> 是一個線上的平台，提供大量的 3D 模型資源，從建築到角色、動物等各種類型的物件都可以在這裡取得。這些模型通常由社群或專業的模型師製作，你可以在 Sketchfab 上瀏覽、分享，甚至購買這些模型來使用在你的專案中。</p><h3 id="如何使用？-1"><a href="#如何使用？-1" class="headerlink" title="如何使用？"></a>如何使用？</h3><p>這邊隨便選擇一個 Pop cat 的 3D 模型，右上角兩個符號代表這模型有動畫，且是可以下載的</p><p><img src="/notes/./images/unity-tutorial-3/SketchfabModel.png" alt="Sketchfab Model"></p><p><img src="/notes/./images/unity-tutorial-3/SketchfabModel2.png" alt="Sketchfab Model"></p><p><img src="/notes/./images/unity-tutorial-3/SketchfabModel3.png" alt="Sketchfab Model"></p><p>可以看到這邊沒有 Unity 支援的 .fbx、.dae (Collada)、.dxf 和 .obj. 等格式，不過有提供 .blend，所以我們可以自己開 blender 轉換成 .fbx</p><p><img src="/notes/./images/unity-tutorial-3/Blender.png" alt="Blender"></p><p>導出成 .fbx 的時候，記得把右上角的 Path Mode 改成 Copy，並點擊右邊的 Embed Textures，之後導入進 Unity 中才能生成對應的 Texture</p><p><img src="/notes/./images/unity-tutorial-3/Blender2.png" alt="Blender"></p><p>按照先前說的方式導入模型進 Unity 後，你會發現它沒有 Texture</p><p><img src="/notes/./images/unity-tutorial-3/CatModel.png" alt="Cat Model"></p><p>這時候只要點選剛剛導入進 Assets 的模型，在右邊 Inspector 中的 Materials 裡面點擊 Extract Textures…，就可以順利加上 Texture 了</p><p><img src="/notes/./images/unity-tutorial-3/CatInspector.png" alt="Cat Model"></p><p>這樣就模型就有 Texture 了！</p><p><img src="/notes/./images/unity-tutorial-3/CatModelTexture.png" alt="Cat Model Texture"></p><h2 id="Prefab"><a href="#Prefab" class="headerlink" title="Prefab"></a>Prefab</h2><h3 id="什麼是-Prefab？"><a href="#什麼是-Prefab？" class="headerlink" title="什麼是 Prefab？"></a>什麼是 Prefab？</h3><p>你可能有注意到，當你從 Unity Asset Store 或 Sketchfab 導入模型後，在 Hierarchy View 中看到一些藍色的物件。這些藍色物件被稱為 Prefab（預製配件）。Prefab 是 Unity 中的一種特殊、可以重複使用的物件。</p><p><img src="/notes/./images/unity-tutorial-3/Prefab.png" alt="Prefab"></p><p>舉個例子，假如你在場景中有大量一樣的石頭，這時候你就可以把石頭做成一個 Prefab，這就有點像是這顆石頭的 <strong>藍圖</strong>，你可以根據這個藍圖去建立一大堆石頭。當你想要一次修改時，就可以改這個藍圖就好，不用每一顆慢慢去修改。</p><p><img src="/notes/./images/unity-tutorial-3/CatArmy.png" alt="Cat Army"></p><p><img src="/notes/./images/unity-tutorial-3/ModifyPrefab.gif" alt="Modify Prefab"></p><p>這邊我想要更改 Cat 模型的 Scale，只需要更改藍圖就好，這樣場景中所有根據這個 Prefab 建立的物件就會一起更新。</p><h3 id="如何建立-Prefab？"><a href="#如何建立-Prefab？" class="headerlink" title="如何建立 Prefab？"></a>如何建立 Prefab？</h3><p>非常簡單，只要把你 Hierarchy View 中的物件拉進你的 Project View 裡面就好。像是我這邊建立一個 Cube 到場景中，把它拉進下方就成功囉～</p><p><img src="/notes/./images/unity-tutorial-3/CreatePrefab.gif" alt="Create Prefab"></p><hr><p>到目前為止，你應該大致了Prefab 作用及應用，也知道怎麼導入其它人準備好的各種素材。善用 Unity Asset Store 的各種資源，就算對美術一竅不通，也能夠打造出精緻的遊戲！</p><p>下次再見～</p>]]></content>
    
    
    
    <tags>
      
      <tag>Unity</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Unity 新手教學 - 介面介紹和基本操作</title>
    <link href="/notes/2024/04/10/unity-tutorial-2/"/>
    <url>/notes/2024/04/10/unity-tutorial-2/</url>
    
    <content type="html"><![CDATA[<p>在這次教學中，我們將學習了解 Unity 的開發者介面，以及如何新增物件還有編輯的快捷鍵。</p><h2 id="Unity-介面介紹"><a href="#Unity-介面介紹" class="headerlink" title="Unity 介面介紹"></a>Unity 介面介紹</h2><p>在 Unity Editor 中，開發者的介面分割得非常明確，大致可以將畫面分成幾個區塊，每個區塊都有特定的功能</p><p><img src="/notes/./images/unity-tutorial-2/UnityEditor.png" alt="Unity Editor"></p><h3 id="Hierarchy-View"><a href="#Hierarchy-View" class="headerlink" title="Hierarchy View"></a>Hierarchy View</h3><p>預設位於介面的左上方，這裡顯示了場景中的所有物體的層次結構。你可以在這裡看到物體之間的父子關係，還有它們的名稱。</p><p>在預設場景中，Unity 會幫你新增兩個物件，Main Camera 和 Direction Light。Camera 可以想像成有人扛著攝影機負責轉播現在遊戲的情況，所以玩家看到的遊戲畫面都至少有一個 Camera 負責。Direction Light 則負責場景中的光照。</p><h4 id="補充"><a href="#補充" class="headerlink" title="補充"></a>補充</h4><ul><li>請記得把所有物件都以英文命名，不然在程式碼中尋找中文名稱的物件時，極有可能發生找不到的問題</li><li>請把所有物件的名稱都命名的淺顯易懂，最好是一看到名字就知道這個東西在幹嘛，不然日後會被自己害死… (親身經驗</li></ul><h3 id="Scene-View"><a href="#Scene-View" class="headerlink" title="Scene View"></a>Scene View</h3><p>預設位於介面的中間，這是遊戲的可視化界面，可以在這裡編輯和調整場景中的物體</p><h3 id="Game-View"><a href="#Game-View" class="headerlink" title="Game View"></a>Game View</h3><p>預設位於介面的中間，這裡顯示遊戲的運行結果，也就是你在 Scene View 更改的結果，可以在這邊做簡單的 Demo，看一下目前遊戲長什麼樣子</p><h3 id="Inspector-View"><a href="#Inspector-View" class="headerlink" title="Inspector View"></a>Inspector View</h3><p>預設位於介面的右邊，這裡顯示的是點選的物體或資源的屬性，對於物體而言，可能會有位置、旋轉、碰撞器或是腳本等屬性，都在這邊可以做修改它們的設定</p><h3 id="Project-View"><a href="#Project-View" class="headerlink" title="Project View"></a>Project View</h3><p>預設位於介面的下方，這邊包含遊戲會用到的所有資源。在 Project View 裡面可以看到有兩個資料夾，Assets 和 Packages，Packages 存放的是許多 Unity 內建既有的東西，我們可以不用理它。我們所新加入的任何資源都會在 Assets 裡面，像是 Material、Script、Shader、Prefab、音效、圖片以及導入的 Package 等等</p><p>現在我們就我們開始在場景中新增物件吧～</p><h2 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h2><h3 id="新增物件"><a href="#新增物件" class="headerlink" title="新增物件"></a>新增物件</h3><p><img src="/notes/./images/unity-tutorial-2/AddGameObject.png" alt="Add Game Object"><br>在左邊的 Hierarchy View 中點擊滑鼠右鍵，選擇 <strong>3D OBject</strong> 可以看到許多選擇，像是正方體、球體、膠囊體(?、圓柱體等等，這邊先選擇正方體</p><p><img src="/notes/./images/unity-tutorial-2/AddGameObject2.png" alt="Add Game Object"></p><p>新增好後 Hierarchy View 就多了一個名為 Cube 的 Cube，Scene View 和 Game View 也可以看到這個正方體。點選這個正方體，右邊的 Inspector View 就會顯示這個正方體的詳細資訊。</p><h3 id="快捷鍵"><a href="#快捷鍵" class="headerlink" title="快捷鍵"></a>快捷鍵</h3><p>想要快速編輯遊戲場景，勢必要熟悉 Unity 的一些操作，這邊簡單介紹一下我經常使用的快捷鍵</p><h4 id="滑鼠滾輪"><a href="#滑鼠滾輪" class="headerlink" title="滑鼠滾輪"></a>滑鼠滾輪</h4><p>放大和縮小當前的畫面<br><img src="/notes/./images/unity-tutorial-2/MouseScroll.gif" alt="Mouse Scroll"></p><h4 id="ALT"><a href="#ALT" class="headerlink" title="ALT"></a>ALT</h4><p>能夠改變當前的視角角度<br><img src="/notes/./images/unity-tutorial-2/ALT.gif" alt="ALT"></p><h4 id="Q"><a href="#Q" class="headerlink" title="Q"></a>Q</h4><p>快速切換成 View Tool，可以在 Scene View 中自由移動<br><img src="/notes/./images/unity-tutorial-2/Q.gif" alt="Q"></p><h4 id="W"><a href="#W" class="headerlink" title="W"></a>W</h4><p>快速切換成 Move Tool，可以移動物體的位置<br><img src="/notes/./images/unity-tutorial-2/W.gif" alt="W"></p><h4 id="E"><a href="#E" class="headerlink" title="E"></a>E</h4><p>快速切換成 Rotate Tool，可以旋轉物體<br><img src="/notes/./images/unity-tutorial-2/E.gif" alt="E"></p><h4 id="R"><a href="#R" class="headerlink" title="R"></a>R</h4><p>快速切換成 Scale Tool，可以改變物體的大小<br><img src="/notes/./images/unity-tutorial-2/R.gif" alt="R"></p><p>事實上，上面提到的 QWER 也可以直接用滑鼠點 Scene View 左上角的 Tools 來使用，不過直接用快捷鍵會在日後方便許多，建議可以多熟悉使用快捷鍵來編輯。</p><p>除此之外，在移動物體、旋轉物體和縮放物體的時候，可以看到右上角 Inspector 中的 Transform 也會隨之改變，前面有提到 Inspector View 可以檢視當前物體的屬性，且物體的位置、旋轉角度和大小都存在於 <strong>Transform 屬性</strong> 裡面，所以其實也可以直接在這邊輸入數字去做修改，和在 Scene View 去編輯是沒有差別的。</p><p><img src="/notes/./images/unity-tutorial-2/InspectorView.gif" alt="Inspector View"></p><h4 id="按住右鍵-W-A-S-D-Q-E-滾輪"><a href="#按住右鍵-W-A-S-D-Q-E-滾輪" class="headerlink" title="按住右鍵 + W&#x2F;A&#x2F;S&#x2F;D&#x2F;Q&#x2F;E&#x2F;滾輪"></a>按住右鍵 + W&#x2F;A&#x2F;S&#x2F;D&#x2F;Q&#x2F;E&#x2F;滾輪</h4><p>按住右鍵加上 W (前進)、A (往左)、S (後退)、D (往右)、 Q (往下)、E (往上)、滾輪 (調整移動速度)，可以快速在 Scene View 裡面移動，就跟你正在以第一人稱在遊戲場景中移動一樣，非常方便</p><p><img src="/notes/./images/unity-tutorial-2/Combo.gif" alt="Combo"></p><h4 id="F"><a href="#F" class="headerlink" title="F"></a>F</h4><p>快速在場景中找到某物件。在 Hierarchy View 裡面找到目標物件，點擊 F 可以瞬間到它旁邊。當遊戲場景很大的時候，這個功能會變得很好用，不用在場景中慢慢自己找。用滑鼠點兩下也可以<br><img src="/notes/./images/unity-tutorial-2/F.gif" alt="R"></p><h4 id="Ctrl-Z-Ctrl-Y"><a href="#Ctrl-Z-Ctrl-Y" class="headerlink" title="Ctrl + Z &#x2F; Ctrl + Y"></a>Ctrl + Z &#x2F; Ctrl + Y</h4><p>Undo 和 Redo，這應該不用多說什麼</p><h4 id="Ctrl-S"><a href="#Ctrl-S" class="headerlink" title="Ctrl + S"></a>Ctrl + S</h4><p>儲存檔案。請<strong>務必</strong>養成做完任何改動都點一下 Ctrl + S 的習慣，Unity 並不會自動幫你儲存。有時候做完大幅度的改動後 Unity 突然崩潰，所有努力直接化為泡影，當下真的欲哭無淚 QAQ</p><p><img src="/notes/./images/unity-tutorial-2/UnityCrash.png" alt="Unity Crash"><br>每次看到這畫面心都會抖一下… </p><hr><p>到目前為止，你應該已經知道怎麼在遊戲中新增物件，還有怎麼改變物體在場景的位置、大小等，記得多多使用快捷鍵來提高效率！還有記住有事沒事就點一下 Ctrl + S，日後一定會感謝自己。</p><p>下一篇會介紹怎麼使用 Unity Asset Store、Sketchfab 導入 3D 場景和物件，或是導入自己的素材，下次再見～<a href="https://933yee.github.io/notes/2024/04/10/unity-tutorial-3/">Unity 新手教學 - 導入物件</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>Unity</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Unity 新手教學 - WHY and HOW</title>
    <link href="/notes/2024/04/10/unity-tutorial/"/>
    <url>/notes/2024/04/10/unity-tutorial/</url>
    
    <content type="html"><![CDATA[<p>在這次教學中，我們將學習 Unity 相較於 Unreal Engine 有哪些優勢，以及如何下載和建立一個新的 Unity 專案</p><h2 id="為什麼要用-Unity？"><a href="#為什麼要用-Unity？" class="headerlink" title="為什麼要用 Unity？"></a>為什麼要用 Unity？</h2><p>在遊戲開發的世界裡，Unity 是一個非常受歡迎的遊戲引擎，擁有許多獨特的優勢使它成為許多開發者的首選。儘管 Epic Games 開發的 Unreal Engine 因 Fortnite 的成功而聲名大噪，使他成為當今最熱門的遊戲引擎之一，許多 3A 大作也都是出自於 Unreal</p><p>說了那麼多，為什麼我們還要考慮使用 Unity 呢？讓我們來看看 Unity 有哪些 Unreal 沒有的優勢：</p><ol><li><p><strong>簡單好上手</strong><br>對於新手來說，Unity 提供了一個相對輕鬆的入門門檻。它的介面設計和操作方式相對更直觀，學習曲線也比 Unreal 穩定許多。此外，個人覺得 C# 會比 C++ 更好上手，不用處理一堆指標的問題，會更適合新手去學習，不過 C++ 能夠壓榨出更多硬體效能就是了～</p></li><li><p><strong>適合獨立遊戲製作</strong><br>Unreal Engine 通常被用於開發大型、高品質的遊戲，開發時間、成本會比較高，Unity 則更適用於快速開發、跨平台部署和較小規模的專案。如果你是一個獨立開發者或是想要快速將遊戲推向市場的團隊，Unity 可能會更適合你。（這也是為什麼 Unity 收費事件會被炎上，新的收費方案將會扼殺許多獨立遊戲工作室，我最期待的 Silksong 可能要再多等五年，好險後來 CEO 下台了（X</p></li><li><p><strong>龐大的開發者社群</strong><br>當你在用 Unity 的時候遇到問題，唯一需要做的就是去 Google 一下。不管是 Bug 訊息還是你想做的事情，幾乎都能找到別人分享的程式碼或影片教學。而且，Unity 的<a href="https://docs.unity3d.com/Manual/index.html">官方文件</a>也極其有好，裡面涵蓋了各種用法的詳細使用說明。相比之下，我個人覺得 Unreal Engine 的教學文件就…好像沒什麼用，常常看了還是搞不清楚在說啥，這也是被人詬病的地方。</p></li></ol><p>其他還有像是豐富的資源庫、跨平台性等優勢，這裡就先不贅述了。</p><h2 id="下載-Unity"><a href="#下載-Unity" class="headerlink" title="下載 Unity"></a>下載 Unity</h2><p>在使用 Unity 之前，我們會需要去下載 <a href="https://unity.com/download">Unity Hub</a>。 </p><h3 id="Unity-Hub"><a href="#Unity-Hub" class="headerlink" title="Unity Hub"></a>Unity Hub</h3><p>Unity Hub 是 Unity 的一個管理工具，能夠讓你輕鬆管理和更新 Unity 的各種版本，也能夠在需要時隨時切換。</p><p><img src="/notes/./images/unity-tutorial/UnityDownload.png" alt="Unity Download"></p><h3 id="Unity-Editor"><a href="#Unity-Editor" class="headerlink" title="Unity Editor"></a>Unity Editor</h3><p>Unity Editor 版本就相當於你的 Unity 版本，不同版本之間使用上會有差異，不同 Package 能夠支援的版本也不一樣，所以在建立專案前，我們會需要決定這個專案要使用的 Unity 版本是什麼。</p><p>下載好 Unity Hub 後，我們可以看到這個畫面，下面的那兩個專案是我之前建立的</p><p><img src="/notes/./images/unity-tutorial/UnityHub.png" alt="Unity Hub"></p><p>這邊點選左邊的<strong>安裝</strong>，下面的那兩個 Unity Editor 版本也是我之前下載的</p><p><img src="/notes/./images/unity-tutorial/UnityHub2.png" alt="Unity Hub"></p><p>在這邊可以新增你想要的 Unity Editor 版本，也可以管理你已經擁有的版本</p><h3 id="管理授權"><a href="#管理授權" class="headerlink" title="管理授權"></a>管理授權</h3><p>在新增專案之前，可以看到上面會跟你說 <em><code>沒有可用授權 要建立並開啟專案，您需要有一個有效的授權</code></em> </p><p><img src="/notes/./images/unity-tutorial/UnityHub3.png" alt="Unity Hub"></p><p>這時候可以點選右上角的<strong>管理授權</strong></p><p><img src="/notes/./images/unity-tutorial/UnityHub4.png" alt="Unity Hub"></p><p>然後點選<strong>新增授權</strong></p><p><img src="/notes/./images/unity-tutorial/UnityHub5.png" alt="Unity Hub"></p><p>這邊選擇<strong>取得免費的個人版授權</strong>就好</p><p><img src="/notes/./images/unity-tutorial/UnityHub6.png" alt="Unity Hub"></p><p>重開後會發現現在已經有授權了～不過這授權是有時效的，過期後再做一遍剛剛做的事就好，現在就可以開始建立專案了。</p><h2 id="建立專案"><a href="#建立專案" class="headerlink" title="建立專案"></a>建立專案</h2><p>授權好後，現在我們來建立一個自己的專案</p><p><img src="/notes/./images/unity-tutorial/UnityHub7.png" alt="Unity Hub"></p><p>這邊點選右上角的 <strong>新專案</strong></p><p><img src="/notes/./images/unity-tutorial/UnityHub8.png" alt="Unity Hub"></p><p>可以看到一個專案也有各種不同的範本，像是 2D、3D、2D Mobile、3D Mobile…，這邊我們先選擇 3D (Built-in)，最上方可以選擇 Unity 的版本，右邊可以命名專案的名稱和專案存放的位置</p><p><img src="/notes/./images/unity-tutorial/UnityHub9.png" alt="Unity Hub"></p><p>建立好後，能夠看到這個預設畫面，現在就可以開始製作自己的遊戲了～ </p><p><img src="/notes/./images/unity-tutorial/UnityEditor.png" alt="Unity Editor"></p><hr><p>到目前為止，你應該大致理解 Unity 有哪些好處，還有 Unity 下載的流程是什麼。</p><p>下一篇教學會介紹如何在 3D 場景中執行一些操作，下次再見～<a href="https://933yee.github.io/notes/2024/04/10/unity-tutorial-2/">Unity 新手教學 - 介面介紹和基本操作</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>Unity</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Compiler 筆記 (3)</title>
    <link href="/notes/2024/03/27/compiler-3/"/>
    <url>/notes/2024/03/27/compiler-3/</url>
    
    <content type="html"><![CDATA[<blockquote><p>參考 清華大學 李政崑老師 編譯器設計講義</p></blockquote><p><img src="/notes/./images/compiler-3/Relation.png" alt="Relations"></p><h2 id="Regular-Expression"><a href="#Regular-Expression" class="headerlink" title="Regular Expression"></a>Regular Expression</h2><ul><li>A Language is a set of strings that can be formed from the given alphabet</li><li>Grammar defines a Language</li></ul><h3 id="Example-1"><a href="#Example-1" class="headerlink" title="Example 1"></a>Example 1</h3><ul><li>a | b denotes {a, b}</li><li>(a | b)(a | b) denotes {ab, aa, ba, bb}</li><li>a* &#x3D; {$\epsilon$, a, aa, aaa, …}</li><li>a$^+$ &#x3D; {a, aa, aaa, …}</li><li>(a | b) &#x3D; {a, b}</li><li>a | a* b &#x3D; {a, b, ab, aab, aaab, …}</li></ul><h3 id="Example-2"><a href="#Example-2" class="headerlink" title="Example 2"></a>Example 2</h3><h4 id="11-0-00-1"><a href="#11-0-00-1" class="headerlink" title="(11 + 0)* (00 + 1)*"></a>(11 + 0)* (00 + 1)*</h4><p>不能奇數個 1 出現在奇數個 0 前面，像是 01010 就不可能</p><h3 id="Example-3"><a href="#Example-3" class="headerlink" title="Example 3"></a>Example 3</h3><h4 id="1-01-001-epsilon-0-00"><a href="#1-01-001-epsilon-0-00" class="headerlink" title="(1 + 01 + 001)* ($\epsilon$ + 0 + 00)*"></a>(1 + 01 + 001)* ($\epsilon$ + 0 + 00)*</h4><p>不能連續三個 0，像是 000</p><h3 id="Example-4"><a href="#Example-4" class="headerlink" title="Example 4"></a>Example 4</h3><h4 id="D-D-D-D"><a href="#D-D-D-D" class="headerlink" title="(D*.D | D.D*)"></a>(D*.D | D.D*)</h4><p>D &#x3D; [0 ~ 9]<br>0.5, .5, 123.6, 9.2, 9.237, 9.</p><h2 id="Finite-State-Automata-FSA"><a href="#Finite-State-Automata-FSA" class="headerlink" title="Finite State Automata (FSA)"></a>Finite State Automata (FSA)</h2><ul><li>FSA is a 5-tuple (Q, $\Sigma$, $\delta$, $q_0$, F)</li><li>Q is a set of states</li><li>$\Sigma$ is an input alphabet, symbol</li><li>$\delta$ is a transition function</li><li>$q_0$ is the initial state</li><li>F is a set of final states</li></ul><h3 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h3><h4 id="Vending-Machine"><a href="#Vending-Machine" class="headerlink" title="Vending Machine"></a>Vending Machine</h4><p><img src="/notes/./images/compiler-3/VendingMachine.png" alt="Vending Machine"></p><ul><li>M &#x3D; (Q, $\Sigma$, $\delta$, $q_{0}$, F)</li><li>Q &#x3D; {$q_{0}, q_{5}, q_{10}, q_{15}, q_{20}$}</li><li>$\Sigma$ &#x3D; {5, 10}</li><li>F &#x3D; {$q_{20}$}</li><li>$\delta$($q_{0}$, 5) &#x3D; $q_{5}$, $\delta$($q_{5}$, 5) &#x3D; $q_{10}$</li><li>$\delta$($q_{10}$, 5) &#x3D; $q_{15}$, $\delta$($q_{15}$, 5) &#x3D; $q_{20}$</li><li>$\delta$($q_{0}$, 10) &#x3D; $q_{10}$, $\delta$($q_{10}$, 10) &#x3D; $q_{20}$</li></ul><h3 id="NFA-non-deterministic-Finite-State-Automata"><a href="#NFA-non-deterministic-Finite-State-Automata" class="headerlink" title="NFA (non-deterministic Finite State Automata)"></a>NFA (non-deterministic Finite State Automata)</h3><ul><li>可能有多個 Next State </li><li>NFA with empty string move ($\epsilon$)<ul><li>$\epsilon$ 允許到新狀態的變換不消耗任何輸入符號。例如，如果它處於狀態 1，下一個輸入符號是 a，它可以移動到狀態 2 而不消耗任何輸入符號，因此就有了歧義：在消耗字母 a 之前系統是處於狀態 1 還是狀態 2 呢 ? 由於這種歧義性，可以更加方便的談論系統可以處在的可能狀態的集合。因此在消耗字母 a 之前，NFA-ε 可以處於集合 {1,2} 內的狀態中的任何一個。等價的說，你可以想像這個 NFA 同時處於狀態 1 和狀態 2: 這給出了對冪集構造的非正式提示：等價於這個 NFA 的 DFA 被定義為此時處於狀態 q&#x3D;{1,2} 中<ul><li><a href="https://zh.wikipedia.org/zh-tw/%E9%9D%9E%E7%A1%AE%E5%AE%9A%E6%9C%89%E9%99%90%E7%8A%B6%E6%80%81%E8%87%AA%E5%8A%A8%E6%9C%BA">非確定有限狀態自動機</a></li></ul></li></ul></li><li>NFA without empty string move</li></ul><h3 id="DFA-Deterministic-Finite-State-Automata"><a href="#DFA-Deterministic-Finite-State-Automata" class="headerlink" title="DFA (Deterministic Finite State Automata)"></a>DFA (Deterministic Finite State Automata)</h3><ul><li>只有一個 Next State</li></ul><p><img src="https://www.researchgate.net/publication/2659477/figure/fig1/AS:647496795713537@1531386674269/NFA-and-DFA-for-Pattern-Matching-of-any-counterexample-Angluin-and-Kharitonov-1991.png" alt="NFA vs DFA"></p><h4 id="Example-of-NFA"><a href="#Example-of-NFA" class="headerlink" title="Example of NFA"></a>Example of NFA</h4><p><img src="https://i.stack.imgur.com/hXhcF.png" alt="Example of NFA"></p><h4 id="epsilon-and-phi"><a href="#epsilon-and-phi" class="headerlink" title="$\epsilon$ and $\phi$"></a>$\epsilon$ and $\phi$</h4><ul><li>$\epsilon$ is a 0 length string</li><li>$\phi$ is a null, i.e. no string.</li></ul><h5 id="r-epsilon"><a href="#r-epsilon" class="headerlink" title="r &#x3D; $\epsilon$"></a>r &#x3D; $\epsilon$</h5><ul><li>You can insert any number of epsilons between two alphabets of input string</li><li>Ex: <code>aeeeeeeeeeb</code>, it won’t make any difference</li><li>If we want to denote a null move, I.e.. one state going to other state without any input symbol, then epsilon is used<ul><li><a href="https://www.quora.com/What-is-the-difference-between-epsilon-and-phi-in-Automata">What is the difference between epsilon and phi in Automata?</a></li></ul></li></ul><p><img src="/notes/./images/compiler-3/epsilon.png" alt="epsilon"></p><h5 id="r-phi"><a href="#r-phi" class="headerlink" title="r &#x3D; $\phi$"></a>r &#x3D; $\phi$</h5><ul><li>Denotes empty i.e. no input string exists.</li></ul><p><img src="/notes/./images/compiler-3/phi.png" alt="phi"></p><h3 id="Conversion-of-NFA-without-epsilon-transition-to-DFA"><a href="#Conversion-of-NFA-without-epsilon-transition-to-DFA" class="headerlink" title="Conversion of NFA without $\epsilon$-transition to DFA"></a>Conversion of NFA without $\epsilon$-transition to DFA</h3><ul><li><p>Every DFA is an NFA, but not vice versa</p></li><li><p>There is an equivalent DFA for every NFA</p></li><li><p>M &#x3D; (Q, $\Sigma$, $\delta$, $q_0$, F)</p></li><li><p>M’ &#x3D; (Q’, $\Sigma$, $\delta$’, $q_0’$, F’)</p><ul><li>Q’ &#x3D; $2^Q$</li><li>The state of M’ are all the <strong>subset</strong> of the set of states of M</li><li>F’ is the set of all states in Q’ constructing a <strong>final states of M</strong></li><li>$\delta$’([$q_1$, $q_2$, …, $q_i$], a) &#x3D; [$p_1$, $p_2$, …, $p_j$] iff $\delta$({$q_1$, $q_2$, …, $q_i$}, a) &#x3D; {$p_1$, $p_2$, …, $p_j$}</li><li>Note: $2^Q$ is <strong>Power Set</strong>, meaning that the set of all subsets of Q<ul><li>Q &#x3D; {a, b, c}</li><li>$2^Q$ &#x3D; {$\phi$, {a}, {b}, {c}, {a, b}, {b, c}, {a, c}, {a, b, c}}</li></ul></li></ul></li><li><p><a href="https://www.youtube.com/watch?v=i-fk9o46oVY">Conversion of NFA to DFA (Example 2)</a></p></li></ul><h3 id="Convert-NFA-with-epsilon-transition-to-NFA-without-epsilon-transition"><a href="#Convert-NFA-with-epsilon-transition-to-NFA-without-epsilon-transition" class="headerlink" title="Convert NFA with $\epsilon$-transition to NFA without $\epsilon$-transition"></a>Convert NFA with $\epsilon$-transition to NFA without $\epsilon$-transition</h3><ul><li>$\delta$’(q, a) &#x3D; $\epsilon$-closure($\delta$($\epsilon$-closure (q), a))</li></ul><h4 id="epsilon-closure"><a href="#epsilon-closure" class="headerlink" title="$\epsilon$-closure"></a>$\epsilon$-closure</h4><ul><li>The set of states that can be reachable by making $\epsilon$-transitions from a given set of start states is called a $\epsilon$-closure</li></ul><h5 id="Epsilon-closure-Example"><a href="#Epsilon-closure-Example" class="headerlink" title="Epsilon-closure Example"></a>Epsilon-closure Example</h5><ul><li>$\epsilon$-closure($q_0$) &#x3D; {$q_0, q_1, q_2, q_4, q_7$}</li><li>$\epsilon$-closure($q_1$) &#x3D; {$q_1, q_2, q_4$}</li><li>$\epsilon$-closure($q_2$) &#x3D; {$q_2$}</li><li>$\epsilon$-closure($q_3$) &#x3D; {$q_1, q_2, q_3, q_4, q_6, q_7$}</li><li>$\epsilon$-closure($q_4$) &#x3D; {$q_4$}</li><li>$\epsilon$-closure($q_5$) &#x3D; {$q_1, q_2, q_3, q_4, q_5, q_6, q_7$}</li><li>$\epsilon$-closure($q_6$) &#x3D; {$q_1, q_2, q_4, q_6, q_7$}</li><li>$\epsilon$-closure($q_7$) &#x3D; {$q_7$}</li><li>$\epsilon$-closure($q_8$) &#x3D; {$q_8$}</li><li>$\epsilon$-closure($q_9$) &#x3D; {$q_9$}</li><li>$\epsilon$-closure($q_10$) &#x3D; {$q_10$}</li></ul><p><img src="/notes/./images/compiler-3/EpsilonClosureExample.png" alt="Epsilon-Closure Example"></p><h4 id="Conversion-Example"><a href="#Conversion-Example" class="headerlink" title="Conversion Example"></a>Conversion Example</h4><p><img src="/notes/./images/compiler-3/Epsilon-closureConversion.png" alt="Epsilon-closure Conversion"></p><ul><li>$\epsilon$-closure($q_0$) &#x3D; {$q_0, q_1, q_2$}</li><li>$\delta$($q_0$, 0) &#x3D; $\epsilon$-closure($\delta$($\epsilon$-closure($q_0$), 0))</li></ul><p>$$<br>  \begin{align}<br>    \epsilon\text{-closure}(q_0) &amp;&#x3D; {q_0, q_1, q_2} \newline<br>    \delta(q_0, 0) &amp;&#x3D; \epsilon\text{-closure}(\delta(\epsilon\text{-closure}(q_0), 0)) \newline<br>    &amp;&#x3D; \epsilon\text{-closure}(\delta({q_0, q_1, q_2}, 0)) \newline<br>    &amp;&#x3D; \epsilon\text{-closure}({q_0}) \newline<br>    &amp;&#x3D; {q_0, q_1, q_2}<br>  \end{align}<br>$$</p><ul><li>對每個 State 都做一次上面的操作</li></ul><p><img src="/notes/./images/compiler-3/Epsilon-closureConversion2.png" alt="Epsilon-closure Conversion"></p><h3 id="Minimizing-the-number-of-states-of-a-DFA"><a href="#Minimizing-the-number-of-states-of-a-DFA" class="headerlink" title="Minimizing the number of states of a DFA"></a>Minimizing the number of states of a DFA</h3><ul><li>一開始把 Final states 和不是 Final states 的 state 分成兩組<ul><li>ex: {A, B, C}, {D, E}</li></ul></li><li>每次比較同組的兩個 state，比較所有 inpts 的 next state 是否在同組，不同的話就分開<ul><li>ex: A 輸入 a 變成 C (C 在第一組)、B 輸入 a 變成 D (D 在第二組)，C 和 D 在上一次操作中位於不同組別，所以要把 A、B 分成不同組，變成 {A, C}, {B}, {D, E}</li><li>接著就持續比 AC、DE</li></ul></li><li>持續執行上述操作，直到沒有改變</li></ul><p><a href="https://www.youtube.com/watch?v=0XaGAkY09Wc">Minimization of DFA (Example 1)</a></p><h3 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h3><p>Relation</p><ul><li><p>Reflexive<br>if (a, b) &#x2F;belongs R for every a &#x2F;belongs A<br>aRa</p></li><li><p>Symmetry<br>aRb &#x3D; bRa</p></li><li><p>transitinity<br>aRb, bRc -&gt; aRc</p></li></ul><p>Back tracking is not that powerful<br>Parsar with no back tracking<br>(frist set, follow set, selection set)</p><p><a href="https://www.google.com/url?sa=i&url=https://www.geeksforgeeks.org/ambiguous-grammar/&psig=AOvVaw16puthtwLbOpQ45_NJxyBy&ust=1711547242637000&source=images&cd=vfe&opi=89978449&ved=0CBIQjRxqFwoTCKCr_LyIkoUDFQAAAAAdAAAAABAE">Ambiguous Grammar</a></p><h3 id="會考的"><a href="#會考的" class="headerlink" title="會考的"></a>會考的</h3><ul><li>bindings</li><li>First class object<ul><li>可以 assign 到 variable</li><li>AMP</li><li>lambda</li></ul></li><li>call-by-reference, call-by-name, call-by-text, call-by-need (lazy binding)</li></ul><h3 id="Finite-State-Machine-vs-Push-Down-Automata"><a href="#Finite-State-Machine-vs-Push-Down-Automata" class="headerlink" title="Finite State Machine vs Push Down Automata"></a>Finite State Machine vs Push Down Automata</h3><h4 id="FSM"><a href="#FSM" class="headerlink" title="FSM"></a>FSM</h4><ul><li>$M &#x3D; (Q, \Sigma, \delta, g_0, F)$</li><li>$\delta(q_0, a) &#x3D; q_2$</li></ul><h4 id="PDA"><a href="#PDA" class="headerlink" title="PDA"></a>PDA</h4><ul><li>$M &#x3D; (Q, \Sigma, \Gamma, \delta, q_0, Z_0, F)$<ul><li>$Z_0$: initial</li><li>$\Gamma$: all the state of symbols</li></ul></li><li>$\delta(q_0, Z_a, a) &#x3D; q_1$, (push, pop, e)</li></ul><h5 id="Example-2-1"><a href="#Example-2-1" class="headerlink" title="Example 2"></a>Example 2</h5><p>丟進stack<br>b<br>b<br>b<br>a<br>a<br>a</p><p>丟進c 消光 b<br>丟進d 消光 a</p><h4 id=""><a href="#" class="headerlink" title=""></a></h4>]]></content>
    
    
    
    <tags>
      
      <tag>Compilier</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python 筆記</title>
    <link href="/notes/2024/03/27/python-notes/"/>
    <url>/notes/2024/03/27/python-notes/</url>
    
    <content type="html"><![CDATA[<h3 id="讀取-env"><a href="#讀取-env" class="headerlink" title="讀取 .env"></a>讀取 .env</h3><h4 id="env"><a href="#env" class="headerlink" title=".env"></a>.env</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">MY_TOKEN = &quot;example token&quot;<br></code></pre></td></tr></table></figure><h4 id="讀取"><a href="#讀取" class="headerlink" title="讀取"></a>讀取</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">from</span> dotenv <span class="hljs-keyword">import</span> load_dotenv<br><br>load_dotenv() <span class="hljs-comment"># load .env 的東東</span><br><br>MY_TOKEN = os.getenv(<span class="hljs-string">&#x27;MY_TOKEN&#x27;</span>)<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Compiler 筆記 (2)</title>
    <link href="/notes/2024/03/26/compiler-2/"/>
    <url>/notes/2024/03/26/compiler-2/</url>
    
    <content type="html"><![CDATA[<blockquote><p>參考 清華大學 李政崑老師 編譯器設計講義</p></blockquote><h2 id="Terminlogy"><a href="#Terminlogy" class="headerlink" title="Terminlogy"></a>Terminlogy</h2><ul><li>Gramma<ul><li>$X \in G $ iff $ G \rightarrow X$</li></ul></li><li>Language<ul><li>$L(G) &#x3D; $ { $X | X \in G$ }</li></ul></li><li>Alphabet<ul><li>$\Sigma$ &#x3D; {0, 1}</li><li>$L$ over $\Sigma$</li></ul></li></ul><h2 id="Context-Free-Grammar-CFG"><a href="#Context-Free-Grammar-CFG" class="headerlink" title="Context-Free Grammar (CFG)"></a>Context-Free Grammar (CFG)</h2><h4 id="Grammar-G-V-T-P-S"><a href="#Grammar-G-V-T-P-S" class="headerlink" title="Grammar G &#x3D; (V, T, P, S)"></a>Grammar G &#x3D; (V, T, P, S)</h4><ul><li><strong>V</strong>: A set of non-terminals (variables)</li><li><strong>T</strong>: A set of terminals</li><li><strong>P</strong>: A set of production rules</li><li><strong>S</strong>: Starting symbol</li></ul><h4 id="Example-1"><a href="#Example-1" class="headerlink" title="Example 1:"></a>Example 1:</h4><p>Write a grammar to represent L &#x3D; { $a^{n}b^{n}$ | $n\ge0$}</p><ul><li>G &#x3D; (V, T, P, S)</li><li>V &#x3D; {S}</li><li>T &#x3D; {a, b}</li><li>P &#x3D; {S $\rightarrow$ aSb | $\epsilon$}</li></ul><h4 id="Example-2"><a href="#Example-2" class="headerlink" title="Example 2"></a>Example 2</h4><p>Write a grammar representing a balanced expression with ‘(‘ and ‘)’</p><ul><li>G &#x3D; (V, T, P, S)</li><li>V &#x3D; {S}</li><li>T &#x3D; {(, )}</li><li>P &#x3D; {S $\rightarrow$ (S) | SS | $\epsilon$}</li></ul><h4 id="Example-3"><a href="#Example-3" class="headerlink" title="Example 3"></a>Example 3</h4><p>Write a grammar for palindrome, L &#x3D; { $W W^{T}$ | $W \in (a, b)^{*}$ }</p><ul><li>G &#x3D; (V, T, P, S)</li><li>V &#x3D; {S}</li><li>T &#x3D; {a, b}</li><li>P &#x3D; {S $\rightarrow$ aSa | bSb | a | b | $\epsilon$}</li></ul><h4 id="Example-4"><a href="#Example-4" class="headerlink" title="Example 4"></a>Example 4</h4><p>L &#x3D; { $WcW^T$ | $W \in (a, b)^{*}$}</p><ul><li>G &#x3D; (V, T, P, S)</li><li>V &#x3D; {S}</li><li>T &#x3D; {a, b, c}</li><li>P &#x3D; {S $\rightarrow$ aSa | bSb | c}</li></ul><h4 id="Example-5"><a href="#Example-5" class="headerlink" title="Example 5"></a>Example 5</h4><p>Write a grammar representing an expression with equal number of a, b</p><ul><li>G &#x3D; (V, T, P, S)</li><li>V &#x3D; {S}</li><li>T &#x3D; {a, b}</li><li>P &#x3D; {S $\rightarrow$ aSb | bSa | SS | $\epsilon$}</li></ul><h3 id="Ambiguous-Grammar"><a href="#Ambiguous-Grammar" class="headerlink" title="Ambiguous Grammar"></a>Ambiguous Grammar</h3><ul><li>一個 sentence 可以由某文法推導出兩個或兩個以上的剖析樹 (parse tree)</li></ul><h4 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h4><p>$$<br>  \begin{align}<br>    E &amp;\rightarrow E + E \newline<br>    &amp;\rightarrow E * E \newline<br>    &amp;\rightarrow \text{ID} \newline<br>    &amp;\rightarrow \text{number} \newline<br>    &amp;\rightarrow (E)<br>  \end{align}<br>$$<br>  Target: 2 + 3 + 2</p><h3 id="Un-Ambiguous-Grammar"><a href="#Un-Ambiguous-Grammar" class="headerlink" title="Un-Ambiguous Grammar"></a>Un-Ambiguous Grammar</h3><h4 id="Example-1-1"><a href="#Example-1-1" class="headerlink" title="Example 1"></a>Example 1</h4><ul><li>乘法在 lower level，因為 priority 比加法高</li><li>加法和乘法都是 left associative<br>$$<br>\begin{align}<br>  E &amp;\rightarrow E + \text{term} \newline<br>  &amp;\rightarrow \text{term} \newline\newline<br>  \text{term} &amp;\rightarrow \text{term} * \text{factor} \newline<br>  &amp;\rightarrow \text{factor} \newline\newline<br>  \text{factor} &amp;\rightarrow \text{number} \newline<br>  &amp;\rightarrow (E)<br>\end{align}<br>$$</li></ul><h4 id="Example-2-1"><a href="#Example-2-1" class="headerlink" title="Example 2"></a>Example 2</h4><ul><li>exponent 在 lower level，因為 priority 比加法和乘法高</li><li>exponent 是 right associative<br>$$<br>\begin{align}<br>  E &amp;\rightarrow E + \text{term} \newline<br>  &amp;\rightarrow \text{term} \newline\newline<br>  \text{term} &amp;\rightarrow \text{term} * \text{expo} \newline<br>  &amp;\rightarrow \text{expo} \newline\newline<br>  \text{expo} &amp;\rightarrow \text{factor} ^ \text{expo} \newline<br>  &amp;\rightarrow \text{factor} \newline\newline<br>  \text{factor} &amp;\rightarrow \text{number} \newline<br>  &amp;\rightarrow (E)<br>\end{align}<br>$$</li></ul><h2 id="Recursion"><a href="#Recursion" class="headerlink" title="Recursion"></a>Recursion</h2><ul><li><strong>任何left recursion都可以用數學轉換成right recursion</strong></li><li>With right recursion, no reduction takes place until the entire list of elements has been read; with left recursion, a reduction takes place as each new list element is encountered. Left recursion can therefore save a lot of stack space.<ul><li><a href="https://www.ibm.com/docs/en/zvm/7.2?topic=topics-right-recursion-versus-left-recursion">Right Recursion versus Left Recursion</a></li></ul></li><li>With a left-recursive grammar, the top-down parser can expand the frontier indefinitely without generating a leading terminal symbol that the parser can either match or reject. To fix this problem, a compiler writer can convert the left-recursive grammar so that it uses only right-recursion.<ul><li><a href="https://www.sciencedirect.com/topics/computer-science/left-recursion">Left-Recursion</a></li></ul></li></ul><h3 id="Example-1-2"><a href="#Example-1-2" class="headerlink" title="Example 1"></a>Example 1</h3><h4 id="Left-Recursion"><a href="#Left-Recursion" class="headerlink" title="Left-Recursion"></a>Left-Recursion</h4><p>$$<br>  \begin{align}<br>    S &amp;\rightarrow S\alpha | \beta<br>  \end{align}<br>$$</p><h4 id="Right-Recursion"><a href="#Right-Recursion" class="headerlink" title="Right-Recursion"></a>Right-Recursion</h4><p>$$<br>  \begin{align}<br>    S &amp;\rightarrow \beta S’ \newline<br>    S’ &amp;\rightarrow \alpha S’ | \epsilon<br>  \end{align}<br>$$</p><h3 id="Example-2-2"><a href="#Example-2-2" class="headerlink" title="Example 2"></a>Example 2</h3><h4 id="Left-Recursion-1"><a href="#Left-Recursion-1" class="headerlink" title="Left-Recursion"></a>Left-Recursion</h4><p>$$<br>  \begin{align}<br>    E &amp;\rightarrow E + \text{term} \newline<br>    &amp;\rightarrow \text{term} \newline\newline<br>    \text{term} &amp;\rightarrow \text{term} * \text{factor} \newline<br>    &amp;\rightarrow \text{factor} \newline\newline<br>    \text{factor} &amp;\rightarrow \text{number} \newline<br>    &amp;\rightarrow (E)<br>  \end{align}<br>$$</p><h4 id="Right-Recursion-1"><a href="#Right-Recursion-1" class="headerlink" title="Right-Recursion"></a>Right-Recursion</h4><p>$$<br>  \begin{align}<br>    E &amp;\rightarrow TE’ \newline<br>    E’ &amp;\rightarrow +TE’ | \epsilon \newline<br>    T &amp;\rightarrow FT’ \newline<br>    T’ &amp;\rightarrow *FT’ | \epsilon \newline<br>    F &amp;\rightarrow (E) | id<br>  \end{align}<br>$$</p><h3 id="Example-3-1"><a href="#Example-3-1" class="headerlink" title="Example 3"></a>Example 3</h3><h4 id="Left-Recursion-2"><a href="#Left-Recursion-2" class="headerlink" title="Left-Recursion"></a>Left-Recursion</h4><p>$$<br>  \begin{align}<br>    E &amp;\rightarrow E + T \newline<br>    &amp;\rightarrow T \newline<br>    T &amp;\rightarrow T * P \newline<br>    &amp;\rightarrow P \newline<br>    P &amp;\rightarrow F ^ P\newline<br>    &amp;\rightarrow F \newline<br>    F &amp;\rightarrow id \newline<br>    &amp;\rightarrow (E)<br>  \end{align}<br>$$</p><h4 id="Right-Recursion-2"><a href="#Right-Recursion-2" class="headerlink" title="Right-Recursion"></a>Right-Recursion</h4><p>$$<br>  \begin{align}<br>    E &amp;\rightarrow TE’ \newline<br>    E’ &amp;\rightarrow +TE’ | \epsilon \newline<br>    T &amp;\rightarrow PT’ \newline<br>    T’ &amp;\rightarrow *PT’ | \epsilon \newline<br>    P &amp;\rightarrow F ^ P \newline<br>    &amp;\rightarrow F \newline<br>    F &amp;\rightarrow (E) | id<br>  \end{align}<br>$$</p><p><a href="https://www.youtube.com/watch?v=IO5ie7GbJGI">Problem of Left Recursion and Solution in CFGs</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>Compilier</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Compiler 筆記 (1)</title>
    <link href="/notes/2024/03/07/compiler-1/"/>
    <url>/notes/2024/03/07/compiler-1/</url>
    
    <content type="html"><![CDATA[<blockquote><p>參考 清華大學 李政崑老師 編譯器設計講義</p></blockquote><h2 id="compilers-and-Assemblers"><a href="#compilers-and-Assemblers" class="headerlink" title="compilers and Assemblers"></a>compilers and Assemblers</h2><p>High-level language program (C)<br>⇒ C compiler<br>⇒ Assembly language program (for MIPS)<br>⇒ Assembler<br>⇒ Binary machine language program (for MIPS)</p><h2 id="Analysis-Synthesis-Model"><a href="#Analysis-Synthesis-Model" class="headerlink" title="Analysis-Synthesis Model"></a>Analysis-Synthesis Model</h2><p>Compilation 可以分成兩個部分</p><ul><li>Analysis (front end)<ul><li>Breaks up the source program into constituent pieces</li><li>Creates an Intermediate Representation (IR)</li></ul></li><li>Synthesis (back end)<ul><li>Constructs the desired target program from the IR</li><li>(Optionally) performs optimizations</li></ul></li></ul><p><img src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEjy5NjmBdRfsrfg96b3KYpevQqRBAygBtuvsszgZpXmPhyy7M9VH81zkvqd-uhdJBBtWL_u0_iaHC8nhSWK1gW7_0DNHxSofoPpj5CD76mp5wCRN7fSz5cDkzZmns_HZ12pRbBD37q9jYY/s1600/aandSmodel.bmp" alt="Analysis-Synthesis Model"></p><h2 id="Phase-of-a-Compiler"><a href="#Phase-of-a-Compiler" class="headerlink" title="Phase of a Compiler"></a>Phase of a Compiler</h2><p><img src="https://cdn1.byjus.com/wp-content/uploads/2022/03/phase-of-compiler.png" alt="Phase of a compiler"></p><h3 id="Symbol-Table-Management"><a href="#Symbol-Table-Management" class="headerlink" title="Symbol-Table Management"></a>Symbol-Table Management</h3><ul><li>Essential function of a compiler<ul><li>To <strong>record the identifier</strong> used in the source program and collect information about various attributes of each identifier<ul><li>allocate storage, type, scope, etc</li></ul></li></ul></li><li>Symbol Table<ul><li>A data structure containing a record for each identifiers, with fields for the attributes</li><li>When a identifier is detected by the <strong>lexical analysis(詞法分析)</strong> , it is entered into the symbol table</li><li>The attributes are determined during <strong>syntax analysis(語法分析)</strong> and <strong>semanic analysis(語義分析)</strong></li></ul></li></ul><h3 id="Analysis-Phases"><a href="#Analysis-Phases" class="headerlink" title="Analysis Phases"></a>Analysis Phases</h3><ul><li>Lexical Analysis</li><li>Syntax Analysis</li><li>Semantic Analysis</li></ul><p><img src="/notes/./images/compiler-1/AnalysisPhasesExample.png" alt="Analysis Phases Example"></p><h3 id="Intermediate-Code-Generation"><a href="#Intermediate-Code-Generation" class="headerlink" title="Intermediate Code Generation"></a>Intermediate Code Generation</h3><ul><li>Two properties<ul><li>Easy to produce</li><li>Easy to translate into the target program</li></ul></li><li>Examples<ul><li>Graph representations</li><li>Postfix notation</li><li>Three-address code<ul><li>每條指令最多有三個 operands</li></ul></li></ul></li></ul><p><img src="/notes/./images/compiler-1/IntermediateCodeGenerationExample.png" alt="Intermediate Code Generation Example"></p><h3 id="Code-Optimization"><a href="#Code-Optimization" class="headerlink" title="Code Optimization"></a>Code Optimization</h3><ul><li>Attempts to improve the intermediate code<ul><li>So the faster-running machine code will result</li></ul></li></ul><p><img src="/notes/./images/compiler-1/CodeOptimizationExample.png" alt="Code Optimization Example"></p><h3 id="Code-Generation"><a href="#Code-Generation" class="headerlink" title="Code Generation"></a>Code Generation</h3><ul><li>Generates target code<ul><li>Consisting of reocatable machine code or assembly code</li></ul></li></ul><p><img src="/notes/./images/compiler-1/CodeGenerationExample.png" alt="Code Generation Example"></p><h3 id="Counsins-of-the-compiler"><a href="#Counsins-of-the-compiler" class="headerlink" title="Counsins of the compiler"></a>Counsins of the compiler</h3><ul><li>Preprocessors<ul><li>Produce input to compilers</li><li>Macro processing</li><li>File inclusion</li></ul></li><li>Assemblers</li><li>Loaders and Link-Editors</li></ul><h2 id="Evolution-of-Programming-Languages"><a href="#Evolution-of-Programming-Languages" class="headerlink" title="Evolution of Programming Languages"></a>Evolution of Programming Languages</h2><h3 id="Imperative-language"><a href="#Imperative-language" class="headerlink" title="Imperative language"></a>Imperative language</h3><ul><li>命令式語言</li><li>指定程式該執行的確切操作</li><li>Ex: C, C++, Java, Python</li></ul><h3 id="Declarative-language"><a href="#Declarative-language" class="headerlink" title="Declarative language"></a>Declarative language</h3><ul><li>宣告式語言</li><li>只要所需的結果，而不是詳細指定要執行的步驟</li><li>Ex: SQL, HTML, CSS, Prolog</li></ul><h3 id="Von-Neumann-language"><a href="#Von-Neumann-language" class="headerlink" title="Von Neumann language"></a>Von Neumann language</h3><ul><li><p>基於 Von Neumann 電腦架構</p></li><li><p>Many widely used programming languages such as C, C++ and Java have <strong>ceased</strong> to be strictly von Neumann by adding support for parallel processing, in the form of threads.</p></li><li><p>Before C++ 11 added threads, C++ was strictly a Von Neumann language</p></li><li><p><a href="https://stackoverflow.com/questions/58312638/is-c-considered-a-von-neumann-programming-language">Is C++ considered a Von Neumann programming language?</a></p></li><li><p><a href="https://ictjournal.itri.org.tw/xcdoc/cont?xsmsid=0M236556470056558161&sid=0M250379986616668141">高效能需求應用興起記憶體內運算的新戰場</a></p></li></ul><h3 id="Object-oriented-language"><a href="#Object-oriented-language" class="headerlink" title="Object-oriented language"></a>Object-oriented language</h3><ul><li>繼承、封裝、多型</li><li>Ex: Java, C++</li></ul><h3 id="Functional-language"><a href="#Functional-language" class="headerlink" title="Functional language"></a>Functional language</h3><ul><li>在一般常見的命令式語言中，要執行操作的話是給電腦一組命令，而狀態會隨著命令的執行而改變。例如你指派變數 a 的值為 5，而隨後做了其它一些事情之後 a 就可能變成的其它值。有控制流程 (control flow)，你就可以重複執行操作</li><li>然而在純粹函數式程式語言中，你不是像命令式語言那樣命令電腦「要做什麼」，而是通過用函數來描述出問題「是什麼」，如「階乘是指從 1 到某個數的乘積」，「一個串列中數字的和」是指把第一個數字跟剩餘數字的和相加。你用宣告函數是什麼的形式來寫程式</li><li>另外，變數 (variable) 一旦被指定，就不可以更改了，你已經說了 a 就是 5，就不能再說 a 是別的什麼數</li><li>Ex: Haskell、Scala、Clojure</li></ul><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs Haskell"><span class="hljs-title">add</span> x y = x + y<br><span class="hljs-title">result</span> = add <span class="hljs-number">5</span> <span class="hljs-number">10</span><br></code></pre></td></tr></table></figure><ul><li><a href="https://learnyouahaskell.mno2.org/zh-tw/ch01/introduction">Haskell 趣學指南</a></li></ul><h3 id="Assignment-oriented-language"><a href="#Assignment-oriented-language" class="headerlink" title="Assignment-oriented language"></a>Assignment-oriented language</h3><ul><li>賦值操作來實現程式邏輯的語言</li><li>Ex: C, Java, </li><li>反例: Haskell</li></ul><h3 id="Third-generation-language"><a href="#Third-generation-language" class="headerlink" title="Third-generation language"></a>Third-generation language</h3><ul><li>相對於機器語言和組合語言而言的高階程式語言</li><li>Ex: C, Java, Python</li></ul><h3 id="Fourth-generation-language"><a href="#Fourth-generation-language" class="headerlink" title="Fourth-generation language"></a>Fourth-generation language</h3><ul><li>更高級、更抽象的程式語言，旨在簡化特定領域的應用程式開發</li><li>提供了更高程度的自動化和巨集</li><li>Ex: SQL, MATLAB</li></ul><h3 id="Scripting-language"><a href="#Scripting-language" class="headerlink" title="Scripting language"></a>Scripting language</h3><ul><li>一個指令碼通常是直譯執行而非編譯</li><li>Ex: JavaScript、Perl、PHP、Python、Ruby 和 Tcl，</li></ul><h3 id="補充"><a href="#補充" class="headerlink" title="補充"></a>補充</h3><p>如果是說 imperative programming 和 declarative programming，我查到的都是程式碼的寫法</p><ul><li><p>Imperative language</p><ul><li>命令式編程</li><li>著重在 <strong>HOW</strong>，具體表達程式碼該做什麼才能達到目標，程式一步一步按著順序照著你給他指示執行。</li><li>Imperative 比較常運用 Statement ，像是是 if, while, for, switch 等。</li><li>You tell the compiler what you want to happen, step by step.</li></ul></li><li><p>Delcarative language</p><ul><li>宣告式編程</li><li>著重在該做什麼 <strong>WHAT</strong> ，採取抽象化流程。Declarative 比較常運用表達式 expression，</li><li>Delcarative 特色是單純運算並一定會有返回值</li></ul></li></ul><p>Example: choose the odd numbers</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cs">List&lt;<span class="hljs-built_in">int</span>&gt; collection = <span class="hljs-keyword">new</span> List&lt;<span class="hljs-built_in">int</span>&gt; &#123; <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span> &#125;;<br></code></pre></td></tr></table></figure><p>With <strong>imperative programming</strong>, we’d step through this, and decide what we want:</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs cs">List&lt;<span class="hljs-built_in">int</span>&gt; results = <span class="hljs-keyword">new</span> List&lt;<span class="hljs-built_in">int</span>&gt;();<br><span class="hljs-keyword">foreach</span>(<span class="hljs-keyword">var</span> num <span class="hljs-keyword">in</span> collection)<br>&#123;<br>    <span class="hljs-keyword">if</span> (num % <span class="hljs-number">2</span> != <span class="hljs-number">0</span>)<br>          results.Add(num);<br>&#125;<br></code></pre></td></tr></table></figure><p>With <strong>declarative programming</strong>, on the other hand, you declare your desired results, but not the step-by-step:</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cs"><span class="hljs-keyword">var</span> results = collection.Where( num =&gt; num % <span class="hljs-number">2</span> != <span class="hljs-number">0</span>);<br></code></pre></td></tr></table></figure><p>Source</p><ul><li><a href="https://ithelp.ithome.com.tw/articles/10233761">Buzz Word 1 : Declarative vs. Imperative</a></li><li><a href="https://stackoverflow.com/questions/1784664/what-is-the-difference-between-declarative-and-imperative-paradigm-in-programmin">What is the difference between declarative and imperative paradigm in programming?</a></li></ul><h2 id="Lambda-Parameters"><a href="#Lambda-Parameters" class="headerlink" title="Lambda Parameters"></a>Lambda Parameters</h2><p>C++ 中，Lambda 架構是</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++">[capture clause](parameters) -&gt; return_type &#123; body &#125;<br></code></pre></td></tr></table></figure><p><strong>[ ]</strong> 空的捕獲列表，表示不捕獲任何外部變數</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp">[]() &#123; <span class="hljs-keyword">return</span> <span class="hljs-number">42</span>; &#125;<br></code></pre></td></tr></table></figure><p><strong>[&amp;]</strong> 按引用捕獲所有外部變數</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-type">int</span> x = <span class="hljs-number">10</span>;<br>[&amp;]() &#123; x++; &#125; <span class="hljs-comment">// 修改外部變數 x</span><br></code></pre></td></tr></table></figure><p><strong>[&#x3D;]</strong> 按值捕獲所有外部變數</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-type">int</span> x = <span class="hljs-number">10</span>;<br>[=]() &#123; <span class="hljs-keyword">return</span> x * <span class="hljs-number">2</span>; &#125; <span class="hljs-comment">// 訪問但不修改外部變數 x</span><br></code></pre></td></tr></table></figure><p><strong>[&#x3D;, &amp;foo]</strong> 按值捕獲所有外部變數，但特別引用了 foo 變數</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-type">int</span> x = <span class="hljs-number">10</span>;<br><span class="hljs-type">int</span> foo = <span class="hljs-number">20</span>;<br>[=, &amp;foo]() &#123; <span class="hljs-keyword">return</span> x + foo; &#125; <span class="hljs-comment">// 訪問 x 按值，訪問 foo 按引用</span><br></code></pre></td></tr></table></figure><p><strong>[bar]</strong> 按值捕獲 bar 變數</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-type">int</span> bar = <span class="hljs-number">30</span>;<br>[bar]() &#123; <span class="hljs-keyword">return</span> bar * <span class="hljs-number">3</span>; &#125;<br></code></pre></td></tr></table></figure><p><strong>[this]</strong> 按值捕獲當前物件的指標（常用於 lambda 在 class 內部的情況）</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyClass</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">MyClass</span>(<span class="hljs-type">int</span> value) : <span class="hljs-built_in">value</span>(value) &#123;&#125;<br><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">printValue</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-comment">// Lambda 捕獲當前物件的指標，可以使用內部的變數和函式</span><br>        <span class="hljs-keyword">auto</span> lambda = [<span class="hljs-keyword">this</span>]() &#123;<br>            std::cout &lt;&lt; <span class="hljs-string">&quot;Value inside lambda: &quot;</span> &lt;&lt; value &lt;&lt; std::endl; <span class="hljs-comment">// 訪問物件變數</span><br>            <span class="hljs-built_in">someMethod</span>(); <span class="hljs-comment">// 呼叫物件函式</span><br>        &#125;;<br><br>        <span class="hljs-built_in">lambda</span>(); <br>    &#125;<br><br><span class="hljs-keyword">private</span>:<br>    <span class="hljs-type">int</span> value;<br><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">someMethod</span><span class="hljs-params">()</span> </span>&#123;<br>        std::cout &lt;&lt; <span class="hljs-string">&quot;Inside someMethod&quot;</span> &lt;&lt; std::endl;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="First-Class-Object"><a href="#First-Class-Object" class="headerlink" title="First Class Object"></a>First Class Object</h2><ul><li>Entity can be stored into a variable</li><li>Something can be passed around as parameters</li><li>In C language, structure and function are consider first class objects</li></ul><h2 id="Bindings"><a href="#Bindings" class="headerlink" title="Bindings"></a>Bindings</h2><h3 id="Static-Binding"><a href="#Static-Binding" class="headerlink" title="Static Binding"></a>Static Binding</h3><ul><li>在編譯時期或者早期階段就確定呼叫哪個方法或函式</li><li>Ex: C 的函式呼叫，它在編譯時期就將函式內容綁定到識別符上，而無法在執行時期變更。</li></ul><h3 id="Dynamic-Binding"><a href="#Dynamic-Binding" class="headerlink" title="Dynamic Binding"></a>Dynamic Binding</h3><ul><li>綁定發生在 runtime，而不是在編譯時</li><li>Ex: C++ 的虛擬方法呼叫，由於多型的機制，物件的型別無法在編譯時期得知，所以綁定會在執行時期處理。</li></ul><h3 id="Fluid-Binding"><a href="#Fluid-Binding" class="headerlink" title="Fluid Binding"></a>Fluid Binding</h3><ul><li>AKA dynamic assignment</li><li>Assignments with dynamic extent to bindings that have lexical scope</li><li>Syntax<ul><li>var :&#x3D; expr during stmt-body</li></ul></li></ul><figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs scheme">(<span class="hljs-name"><span class="hljs-built_in">define</span></span> x <span class="hljs-number">10</span>)  <span class="hljs-comment">; 定義變數 x，並賦值為 10</span><br><br>(<span class="hljs-name">displayln</span> <span class="hljs-string">&quot;在動態賦值之前：&quot;</span>)<br>(<span class="hljs-name">displayln</span> x)  <span class="hljs-comment">; 輸出當前變數 x 的值</span><br><br><span class="hljs-comment">; 在這個程式碼塊內，我們動態地改變變數 x 的值</span><br>(<span class="hljs-name"><span class="hljs-built_in">let</span></span> ((<span class="hljs-name">x</span> := <span class="hljs-number">20</span> during<br>       (<span class="hljs-name"><span class="hljs-built_in">begin</span></span><br>         (<span class="hljs-name">displayln</span> <span class="hljs-string">&quot;在動態賦值內部：&quot;</span>)<br>         (<span class="hljs-name">displayln</span> x)  <span class="hljs-comment">; 輸出改變後的 x 的值</span><br>         (<span class="hljs-name"><span class="hljs-built_in">set!</span></span> x (<span class="hljs-name"><span class="hljs-built_in">*</span></span> x <span class="hljs-number">2</span>))  <span class="hljs-comment">; 修改 x 的值</span><br>         (<span class="hljs-name">displayln</span> <span class="hljs-string">&quot;在動態賦值內部修改後：&quot;</span>)<br>         (<span class="hljs-name">displayln</span> x)  <span class="hljs-comment">; 輸出修改後的 x 的值</span><br>       )))<br>  <span class="hljs-comment">; 這裡的 x 仍然是原始值</span><br>  (<span class="hljs-name">displayln</span> <span class="hljs-string">&quot;在動態賦值之後：&quot;</span>)<br>  (<span class="hljs-name">displayln</span> x)  <span class="hljs-comment">; 輸出原始值</span><br>)<br></code></pre></td></tr></table></figure><h3 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h3><figure class="highlight delphi"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs delphi"><span class="hljs-keyword">program</span> parameter-passing;<br>  <span class="hljs-keyword">var</span> i: integer;<br>  a: <span class="hljs-keyword">array</span> [<span class="hljs-number">1</span>..<span class="hljs-number">3</span>] <span class="hljs-keyword">of</span> integer;<br><br>  <span class="hljs-function"><span class="hljs-keyword">procedure</span> <span class="hljs-title">mess</span>;</span><br>    <span class="hljs-keyword">begin</span><br>      <span class="hljs-keyword">var</span> y: integer;<br>      y = a[i] + <span class="hljs-number">5</span>;<br>      writeln(<span class="hljs-string">&#x27;y=&#x27;</span>, y);<br>    <span class="hljs-keyword">end</span>;<br><br>  <span class="hljs-function"><span class="hljs-keyword">procedure</span> <span class="hljs-title">sub1</span>;</span><br>    <span class="hljs-keyword">var</span> i: integer;<br>    a: <span class="hljs-keyword">array</span> [<span class="hljs-number">1</span>..<span class="hljs-number">3</span>] <span class="hljs-keyword">of</span> integer;<br>    <span class="hljs-keyword">begin</span><br>      i := <span class="hljs-number">2</span>;<br>      a[<span class="hljs-number">1</span>] := <span class="hljs-number">5</span> ; a[<span class="hljs-number">2</span>] := <span class="hljs-number">7</span>; a[<span class="hljs-number">3</span>] := <span class="hljs-number">9</span>;<br>    mess;<br>  <span class="hljs-keyword">end</span>;<br><br>  <span class="hljs-keyword">begin</span> <br>    i := <span class="hljs-number">1</span>;<br>    a[<span class="hljs-number">1</span>] :=<span class="hljs-number">1</span> ; a[<span class="hljs-number">2</span>] := <span class="hljs-number">4</span>; a[<span class="hljs-number">3</span>] :=<span class="hljs-number">8</span> ;<br>    sub1;<br>  <span class="hljs-keyword">end</span><br></code></pre></td></tr></table></figure><ul><li><p>Suppose static binding (also known as lexical binding) is used for variable scopes. What’s the printout value of y?</p><blockquote><p>我猜 mess 裡面 i 是 1、a[i] 是 1，所以 y &#x3D; 1 + 5 &#x3D; 6</p></blockquote></li><li><p>Suppose dynamic binding is used for variable scopes. What’s the printout value of y?</p><blockquote><p>我猜 mess 裡面 i 是 2、a[i] 是 7，所以 y &#x3D; 7 + 5 &#x3D; 12</p></blockquote></li></ul><h2 id="Parameter-Passing-Schemes"><a href="#Parameter-Passing-Schemes" class="headerlink" title="Parameter Passing Schemes"></a>Parameter Passing Schemes</h2><h3 id="Call-by-reference"><a href="#Call-by-reference" class="headerlink" title="Call-by-reference"></a>Call-by-reference</h3><ul><li>Call 的瞬間就看 caller</li><li>在呼叫 function 的當下就已經決定好 parameter 的值</li></ul><h3 id="Call-by-name"><a href="#Call-by-name" class="headerlink" title="Call-by-name"></a>Call-by-name</h3><ul><li>用的時候重新看 caller</li><li>在呼叫的 function 當中每次使用到 parameter 就重新去檢查 caller 當中當下的值</li></ul><h3 id="Call-by-need"><a href="#Call-by-need" class="headerlink" title="Call-by-need"></a>Call-by-need</h3><ul><li>跟 call by name 很像，一樣去算 caller 的，但是第一次算完就存起來，不用每次都算</li><li>第一次使用時重新看 caller</li><li>在呼叫的 function 當中第一次使用到 parameter 的時候才去決定後續的值</li></ul><h3 id="Call-by-text"><a href="#Call-by-text" class="headerlink" title="Call-by-text"></a>Call-by-text</h3><ul><li>用的時候重新看 callee</li><li>在呼叫的 function 當中每次使用到 parameter 就重新去檢查 callee 當中當下的值</li><li>更好的理解方式是從名稱 “call by text”，意即 parameter 會以 text 的型態傳遞，因此需要把所有的 parameter 都視為傳遞前的原貌</li><li>例如定義 <code>f(v: integer)</code> ，呼叫 <code>f(a[i])</code> ，則 <code>f</code> 當中的每個 <code>v</code> 都需要替換成 <code>a[i]</code></li></ul><h4 id="Example-1"><a href="#Example-1" class="headerlink" title="Example"></a>Example</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs css">program parameter-passing;<br>  <span class="hljs-selector-tag">var</span> <span class="hljs-selector-tag">i</span>: integer;<br>  <span class="hljs-selector-tag">a</span>: array [<span class="hljs-number">1</span>..<span class="hljs-number">3</span>] of integer;<br><br>  procedure mess(v : integer);<br>    begin<br>      v := v + <span class="hljs-number">1</span>;<br>      <span class="hljs-selector-tag">a</span><span class="hljs-selector-attr">[i]</span> := <span class="hljs-number">5</span>;<br>      <span class="hljs-selector-tag">i</span> := <span class="hljs-number">3</span>;<br>      v := v + <span class="hljs-number">1</span>;<br>    end;<br><br>  begin<br>    for <span class="hljs-selector-tag">i</span>:= <span class="hljs-number">1</span> to <span class="hljs-number">3</span> do a[i] := <span class="hljs-number">0</span>;<br>    <span class="hljs-selector-tag">a</span><span class="hljs-selector-attr">[2]</span> := <span class="hljs-number">10</span>;<br>    <span class="hljs-selector-tag">i</span> := <span class="hljs-number">2</span>;<br>    mess(<span class="hljs-selector-tag">a</span><span class="hljs-selector-attr">[i]</span>);<br>  end<br></code></pre></td></tr></table></figure><ul><li>If by assuming <strong>Call-by-Text</strong>, what’s the value in the array a and the variable i?</li></ul><table><thead><tr><th align="center"></th><th align="center">a[1]</th><th align="center">a[2]</th><th align="center">a[3]</th><th align="center">i</th><th align="center">v</th></tr></thead><tbody><tr><td align="center">before mess</td><td align="center">0</td><td align="center">10</td><td align="center">0</td><td align="center">2</td><td align="center">-</td></tr><tr><td align="center">v :&#x3D; v + 1;</td><td align="center">0</td><td align="center">11</td><td align="center">0</td><td align="center">2</td><td align="center">a[i] (a[2])</td></tr><tr><td align="center">a[i] :&#x3D; 5;</td><td align="center">0</td><td align="center">5</td><td align="center">0</td><td align="center">2</td><td align="center">a[i] (a[2])</td></tr><tr><td align="center">i :&#x3D; 3</td><td align="center">0</td><td align="center">5</td><td align="center">0</td><td align="center">3</td><td align="center">a[i] (a[3])</td></tr><tr><td align="center">v :&#x3D; v + 1</td><td align="center">0</td><td align="center">5</td><td align="center">1</td><td align="center">3</td><td align="center">a[i] (a[3])</td></tr><tr><td align="center">observation point</td><td align="center">0</td><td align="center">5</td><td align="center">1</td><td align="center">3</td><td align="center">-</td></tr></tbody></table><ul><li>If by assuming <strong>Call-by-Reference</strong>, what’s the value in the array a and the variable i?</li></ul><table><thead><tr><th align="center"></th><th align="center">a[1]</th><th align="center">a[2]</th><th align="center">a[3]</th><th align="center">i</th><th align="center">v</th></tr></thead><tbody><tr><td align="center">before mess</td><td align="center">0</td><td align="center">10</td><td align="center">0</td><td align="center">2</td><td align="center">-</td></tr><tr><td align="center">v :&#x3D; v + 1;</td><td align="center">0</td><td align="center">11</td><td align="center">0</td><td align="center">2</td><td align="center">a[2]</td></tr><tr><td align="center">a[i] :&#x3D; 5;</td><td align="center">0</td><td align="center">5</td><td align="center">0</td><td align="center">2</td><td align="center">a[2]</td></tr><tr><td align="center">i :&#x3D; 3</td><td align="center">0</td><td align="center">5</td><td align="center">0</td><td align="center">3</td><td align="center">a[2]</td></tr><tr><td align="center">v :&#x3D; v + 1</td><td align="center">0</td><td align="center">6</td><td align="center">0</td><td align="center">3</td><td align="center">a[2]</td></tr><tr><td align="center">observation point</td><td align="center">0</td><td align="center">6</td><td align="center">0</td><td align="center">3</td><td align="center">-</td></tr></tbody></table><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs css">program parameter-passing;<br>  <span class="hljs-selector-tag">var</span> <span class="hljs-selector-tag">i</span>: integer;<br>  <span class="hljs-selector-tag">a</span>: array [<span class="hljs-number">1</span>..<span class="hljs-number">3</span>] of integer;<br><br>  procedure mess(v : integer);<br>    <span class="hljs-selector-tag">var</span> <span class="hljs-selector-tag">i</span>: integer;<br>    begin<br>      <span class="hljs-selector-tag">i</span> := <span class="hljs-number">1</span>;<br>      v := v + <span class="hljs-number">1</span>;<br>      <span class="hljs-selector-tag">a</span><span class="hljs-selector-attr">[i]</span> := <span class="hljs-number">5</span>;<br>      <span class="hljs-selector-tag">i</span> := <span class="hljs-number">3</span>;<br>      v := v + <span class="hljs-number">1</span>;<br>    end;<br><br>  begin<br>    for <span class="hljs-selector-tag">i</span>:= <span class="hljs-number">1</span> to <span class="hljs-number">3</span> do a[i] := <span class="hljs-number">0</span>;<br>    <span class="hljs-selector-tag">a</span><span class="hljs-selector-attr">[2]</span> := <span class="hljs-number">10</span>;<br>    <span class="hljs-selector-tag">i</span> := <span class="hljs-number">2</span>;<br>    mess(<span class="hljs-selector-tag">a</span><span class="hljs-selector-attr">[i]</span>);<br>  end<br></code></pre></td></tr></table></figure><ul><li>If by assuming <strong>Call-by-Name</strong>, what’s the value in the array a and the variable i?</li></ul><table><thead><tr><th align="center"></th><th align="center">a[1]</th><th align="center">a[2]</th><th align="center">a[3]</th><th align="center">i (caller)</th><th align="center">i (callee)</th><th align="center">v</th></tr></thead><tbody><tr><td align="center">before mess</td><td align="center">0</td><td align="center">10</td><td align="center">0</td><td align="center">2</td><td align="center">-</td><td align="center">-</td></tr><tr><td align="center">i :&#x3D; 1</td><td align="center">0</td><td align="center">10</td><td align="center">0</td><td align="center">2</td><td align="center">1</td><td align="center">a[2]</td></tr><tr><td align="center">v :&#x3D; v + 1;</td><td align="center">0</td><td align="center">11</td><td align="center">0</td><td align="center">2</td><td align="center">1</td><td align="center">a[2]</td></tr><tr><td align="center">a[i] :&#x3D; 5;</td><td align="center">5</td><td align="center">11</td><td align="center">0</td><td align="center">2</td><td align="center">1</td><td align="center">a[2]</td></tr><tr><td align="center">i :&#x3D; 3</td><td align="center">5</td><td align="center">11</td><td align="center">0</td><td align="center">2</td><td align="center">3</td><td align="center">a[2]</td></tr><tr><td align="center">v :&#x3D; v + 1</td><td align="center">5</td><td align="center">12</td><td align="center">0</td><td align="center">2</td><td align="center">3</td><td align="center">a[2]</td></tr><tr><td align="center">observation point</td><td align="center">5</td><td align="center">12</td><td align="center">0</td><td align="center">2</td><td align="center">-</td><td align="center">-</td></tr></tbody></table><ul><li>If by assuming <strong>Call-by-Text</strong>, what’s the value in the array a and the variable i?</li></ul><table><thead><tr><th align="center"></th><th align="center">a[1]</th><th align="center">a[2]</th><th align="center">a[3]</th><th align="center">i (caller)</th><th align="center">i (callee)</th><th align="center">v</th></tr></thead><tbody><tr><td align="center">before mess</td><td align="center">0</td><td align="center">10</td><td align="center">0</td><td align="center">2</td><td align="center">-</td><td align="center">-</td></tr><tr><td align="center">i :&#x3D; 1</td><td align="center">0</td><td align="center">10</td><td align="center">0</td><td align="center">2</td><td align="center">1</td><td align="center">a[i(callee)] (a[1])</td></tr><tr><td align="center">v :&#x3D; v + 1;</td><td align="center">1</td><td align="center">10</td><td align="center">0</td><td align="center">2</td><td align="center">1</td><td align="center">a[i(callee)] (a[1])</td></tr><tr><td align="center">a[i] :&#x3D; 5;</td><td align="center">5</td><td align="center">10</td><td align="center">0</td><td align="center">2</td><td align="center">1</td><td align="center">a[i(callee)] (a[1])</td></tr><tr><td align="center">i :&#x3D; 3</td><td align="center">5</td><td align="center">10</td><td align="center">0</td><td align="center">2</td><td align="center">3</td><td align="center">a[i(callee)] (a[3])</td></tr><tr><td align="center">v :&#x3D; v + 1</td><td align="center">5</td><td align="center">10</td><td align="center">1</td><td align="center">2</td><td align="center">3</td><td align="center">a[i(callee)] (a[3])</td></tr><tr><td align="center">observation point</td><td align="center">5</td><td align="center">10</td><td align="center">1</td><td align="center">2</td><td align="center">-</td><td align="center">-</td></tr></tbody></table><ul><li>If by assuming <strong>Call-by-Need</strong>, what’s the value in the array a and the variable i?</li></ul><table><thead><tr><th align="center"></th><th align="center">a[1]</th><th align="center">a[2]</th><th align="center">a[3]</th><th align="center">i (caller)</th><th align="center">i (callee)</th><th align="center">v</th></tr></thead><tbody><tr><td align="center">before mess</td><td align="center">0</td><td align="center">10</td><td align="center">0</td><td align="center">2</td><td align="center">-</td><td align="center">-</td></tr><tr><td align="center">i :&#x3D; 1</td><td align="center">0</td><td align="center">10</td><td align="center">0</td><td align="center">2</td><td align="center">1</td><td align="center">-</td></tr><tr><td align="center">v :&#x3D; v + 1;</td><td align="center">0</td><td align="center">11</td><td align="center">0</td><td align="center">2</td><td align="center">1</td><td align="center">a[i(caller)] (a[2])</td></tr><tr><td align="center">a[i] :&#x3D; 5;</td><td align="center">5</td><td align="center">11</td><td align="center">0</td><td align="center">2</td><td align="center">1</td><td align="center">a[2]</td></tr><tr><td align="center">i :&#x3D; 3</td><td align="center">5</td><td align="center">11</td><td align="center">0</td><td align="center">2</td><td align="center">3</td><td align="center">a[2]</td></tr><tr><td align="center">v :&#x3D; v + 1</td><td align="center">5</td><td align="center">12</td><td align="center">0</td><td align="center">2</td><td align="center">3</td><td align="center">a[2]</td></tr><tr><td align="center">observation point</td><td align="center">5</td><td align="center">12</td><td align="center">0</td><td align="center">2</td><td align="center">-</td><td align="center">-</td></tr></tbody></table><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs css">program parameter-passing;<br>  <span class="hljs-selector-tag">var</span> <span class="hljs-selector-tag">i</span>: integer;<br>  <span class="hljs-selector-tag">a</span>: array [<span class="hljs-number">1</span>..<span class="hljs-number">3</span>] of integer;<br><br>  procedure mess(v : integer);<br>    begin<br>      <span class="hljs-selector-tag">i</span> := <span class="hljs-number">1</span>;<br>      v := v + <span class="hljs-number">1</span>;<br>      <span class="hljs-selector-tag">a</span><span class="hljs-selector-attr">[i]</span> := <span class="hljs-number">5</span>;<br>      <span class="hljs-selector-tag">i</span> := <span class="hljs-number">3</span>;<br>      v := v + <span class="hljs-number">1</span>;<br>    end;<br><br>  begin<br>    for <span class="hljs-selector-tag">i</span>:= <span class="hljs-number">1</span> to <span class="hljs-number">3</span> do a[i] := <span class="hljs-number">0</span>;<br>    <span class="hljs-selector-tag">a</span><span class="hljs-selector-attr">[2]</span> := <span class="hljs-number">10</span>;<br>    <span class="hljs-selector-tag">i</span> := <span class="hljs-number">2</span>;<br>    mess(<span class="hljs-selector-tag">a</span><span class="hljs-selector-attr">[i]</span>);<br>  end<br></code></pre></td></tr></table></figure><ul><li>If by assuming <strong>Call-by-Name</strong>, what’s the value in the array a and the variable i?</li></ul><table><thead><tr><th align="center"></th><th align="center">a[1]</th><th align="center">a[2]</th><th align="center">a[3]</th><th align="center">i</th><th align="center">v</th></tr></thead><tbody><tr><td align="center">before mess</td><td align="center">0</td><td align="center">10</td><td align="center">0</td><td align="center">2</td><td align="center">-</td></tr><tr><td align="center">i :&#x3D; 1</td><td align="center">0</td><td align="center">10</td><td align="center">0</td><td align="center">1</td><td align="center">-</td></tr><tr><td align="center">v :&#x3D; v + 1;</td><td align="center">1</td><td align="center">10</td><td align="center">0</td><td align="center">1</td><td align="center">a[i] (a[1])</td></tr><tr><td align="center">a[i] :&#x3D; 5;</td><td align="center">5</td><td align="center">10</td><td align="center">0</td><td align="center">1</td><td align="center">a[i] (a[1])</td></tr><tr><td align="center">i :&#x3D; 3</td><td align="center">5</td><td align="center">10</td><td align="center">0</td><td align="center">3</td><td align="center">a[i] (a[3])</td></tr><tr><td align="center">v :&#x3D; v + 1</td><td align="center">5</td><td align="center">10</td><td align="center">1</td><td align="center">3</td><td align="center">a[i] (a[3])</td></tr><tr><td align="center">observation point</td><td align="center">5</td><td align="center">10</td><td align="center">1</td><td align="center">3</td><td align="center">-</td></tr></tbody></table><ul><li>If by assuming <strong>Call-by-Need</strong>, what’s the value in the array a and the variable i?</li></ul><table><thead><tr><th align="center"></th><th align="center">a[1]</th><th align="center">a[2]</th><th align="center">a[3]</th><th align="center">i</th><th align="center">v</th></tr></thead><tbody><tr><td align="center">before mess</td><td align="center">0</td><td align="center">10</td><td align="center">0</td><td align="center">2</td><td align="center">-</td></tr><tr><td align="center">i :&#x3D; 1</td><td align="center">0</td><td align="center">10</td><td align="center">0</td><td align="center">1</td><td align="center">-</td></tr><tr><td align="center">v :&#x3D; v + 1;</td><td align="center">1</td><td align="center">10</td><td align="center">0</td><td align="center">1</td><td align="center">a[i] (a[1])</td></tr><tr><td align="center">a[i] :&#x3D; 5;</td><td align="center">5</td><td align="center">10</td><td align="center">0</td><td align="center">1</td><td align="center">a[1]</td></tr><tr><td align="center">i :&#x3D; 3</td><td align="center">5</td><td align="center">10</td><td align="center">0</td><td align="center">3</td><td align="center">a[1]</td></tr><tr><td align="center">v :&#x3D; v + 1</td><td align="center">6</td><td align="center">10</td><td align="center">0</td><td align="center">3</td><td align="center">a[1]</td></tr><tr><td align="center">observation point</td><td align="center">6</td><td align="center">10</td><td align="center">0</td><td align="center">3</td><td align="center">-</td></tr></tbody></table>]]></content>
    
    
    
    <tags>
      
      <tag>compiler</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Unreal Engine 4 - GPGPU flocking 解析</title>
    <link href="/notes/2024/02/25/ue4-cs-aceyan/"/>
    <url>/notes/2024/02/25/ue4-cs-aceyan/</url>
    
    <content type="html"><![CDATA[<p>source code: <a href="https://github.com/aceyan/UE4_GPGPU_flocking/tree/ComputeShader">https://github.com/aceyan/UE4_GPGPU_flocking/tree/ComputeShader</a></p><h3 id="GPU-Instances"><a href="#GPU-Instances" class="headerlink" title="GPU Instances"></a>GPU Instances</h3><p>這個專案使用 GPU Instancing，一次渲染大量 Static Mesh。為了讓每個 instance 有區別，它賦予每個 instance 一個 CustomData，作為分辨的 ID。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-built_in">UPROPERTY</span>(EditAnywhere, BlueprintReadWrite, Category = <span class="hljs-string">&quot;Flocking&quot;</span>)<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">UInstancedStaticMeshComponent</span>* InstancedComponent;<br><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; instatnceNum; i++)<br>&#123;<br>FTransform t = <span class="hljs-built_in">FTransform</span>();<br>InstancedComponent-&gt;<span class="hljs-built_in">AddInstance</span>(t);<br>InstancedComponent-&gt;<span class="hljs-built_in">SetCustomDataValue</span>(i, <span class="hljs-number">0</span>, i);<br><span class="hljs-built_in">UE_LOG</span>(LogTemp, Warning, <span class="hljs-built_in">TEXT</span>(<span class="hljs-string">&quot;AddInstance %d&quot;</span>), i);<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/notes/./images/ue4-cs-aceyan/InstancedComponent.png" alt="Instanced Component"></p><p>然後藉由 PerInstanceCustomData[0]，取得不同的 Instance ID，然後更新它們各自的 Material 的 World Position Offset (相對位置) ，來達到移動的效果。</p><h3 id="GPGPU"><a href="#GPGPU" class="headerlink" title="GPGPU"></a>GPGPU</h3><p>由於運算量龐大，可以藉由 GPGPU (Compute Shader) 來計算。那要怎麼直接把 GPGPU 算出的結果傳給 World Position Offset？</p><p>這裡使用 Render Target (RT) 去除存每個 Instance 的位置、速度，所以每個 Texel 的 RGB 儲存的是 World Position Offset 的 XYZ。因此，遊戲開始的時候，儲存 Position 的 Render Target 會長這樣，五彩繽紛的顏色就代表各種 World Position Offset。</p><p><img src="/notes/./images/ue4-cs-aceyan/PositionRenderTarget.png" alt="Position Render Target"></p><p>藉由這個方法，CPU 叫 GPU 算完可以直接渲染，不用再回傳到 CPU，所以整個邏輯是 GPGPU -&gt; RenderTarget -&gt; Material。</p><p>最後，只要想辦法取出每個 Instance 對應到的 Texel 的顏色，傳到 World Position Offset 就好。</p><p><img src="/notes/./images/ue4-cs-aceyan/UpdateInstancePosition.png" alt="Update Instance Position"></p><p>看起來很複雜，實際上就是根據 ID 算出對應的 Texel 的座標，左上是 (0, 0)，右下是 (1, 1)，再 Sample 出 Texture Object 某 Texel 的顏色。</p>]]></content>
    
    
    <categories>
      
      <category>UE4</category>
      
    </categories>
    
    
    <tags>
      
      <tag>UE4, GPU</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>GPGPU</title>
    <link href="/notes/2024/02/21/gpgpu/"/>
    <url>/notes/2024/02/21/gpgpu/</url>
    
    <content type="html"><![CDATA[<h1 id="名詞解釋"><a href="#名詞解釋" class="headerlink" title="名詞解釋"></a>名詞解釋</h1><ul><li><p>CUDA (Compute Unified Device Architecture)</p><ul><li>強大的平行計算平台，讓開發者能夠充分利用 NVIDIA GPU 的計算能力(NVIDIA 專用)，進行高效的計算任務處理</li></ul></li><li><p>OpenCL (Open Computing Language)</p><ul><li>用於編寫在多種處理器上運行的程序，包括 CPU、GPU、DSP（數字訊號處理器）和其他類型的處理器，主要用於通用計算，特別是那些可以利用平行計算的任務</li></ul></li></ul><h1 id="從-GPU-到-GPGPU"><a href="#從-GPU-到-GPGPU" class="headerlink" title="從 GPU 到 GPGPU"></a>從 GPU 到 GPGPU</h1><p>CPU 單核心性能的提高受到<strong>功耗</strong>、<strong>存取記憶體速度</strong>、<strong>設計複雜度</strong>等多重瓶頸的限制，而 GPU 僅侷限於處理圖形繪製的計算任務，是極大的資源浪費。</p><p>2006 年，NVIDIA 公布了統一著色器架構(unified shader architecture)，從此 GPU 進入了通用計算時代。 傳統的 GPU 通常採用固定比例的頂點著色器和像素著色器單元，但這種作法會導致單元使用率低下的問題。為解決這一問題，統一著色器架構整合了頂點著色器和像素著色器，這種無差別的著色器設計，使 GPU 成為一個多核心的通用處理器。</p><h1 id="計算模型"><a href="#計算模型" class="headerlink" title="計算模型"></a>計算模型</h1><h3 id="SIMT-Single-Instruction-Multiple-Threads-，單指令多執行緒"><a href="#SIMT-Single-Instruction-Multiple-Threads-，單指令多執行緒" class="headerlink" title="SIMT (Single Instruction Multiple Threads)，單指令多執行緒"></a>SIMT (Single Instruction Multiple Threads)，單指令多執行緒</h3><ul><li>一行指令被多個執行緒同時執行，與 SIMD 平行類似，在 GPGPU 中被稱為 SIMT 計算模型</li><li>ex: 矩陣乘法<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">// 從輸入矩陣 A 和 B 中讀取一部份向量 a, b</span><br><span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; N; i++)&#123;<br>  c += a[i] + b[i];<br>&#125;<br><span class="hljs-comment">// 將 c 寫回結果矩陣 C 的對應位置中</span><br></code></pre></td></tr></table></figure></li><li>CUDA 為 SIMT 計算模型引入 thread grid、thread block、thread，對等地，OpenCL 為 SIMT 計算模型引入 NDRange、work-group、work-item</li></ul><h3 id="裝置端和核心函數"><a href="#裝置端和核心函數" class="headerlink" title="裝置端和核心函數"></a>裝置端和核心函數</h3><p>在 CUDA 和 OpenCL 模型中，會把程式劃分成<strong>主機端 (host)</strong> 和<strong>裝置端 (device)</strong> ，分別在 CPU 和 GPGPU 上執行。 CPU 硬體執行主機端程式，GPGPU 硬體將根據程式設計人員給定的執行緒網格 (上面提到的 thread grid) 組織方式等參數，將裝置端程式進一步分發到執行緒中。每個執行緒執行相同的程式，但是是不同的資料。</p><p>以上面的矩陣乘法為例，主機端程式分成三個步驟：</p><h4 id="資料複製"><a href="#資料複製" class="headerlink" title="資料複製"></a>資料複製</h4><ul><li>CPU 將主記憶體資料複製到 GPGPU。主機端程式會先完成 GPGPU 的待處理資料宣告和前置處理，然後 CPU 呼叫 API 對 GPGPU 進行初始化和控制。<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// 主記憶體的資料</span><br><span class="hljs-type">float</span> A[M * N], B[N * K], C[M * K];<br><span class="hljs-comment">// GPGPU 裝置端全域記憶體</span><br><span class="hljs-type">float</span>* d_A, * d_B, * d_C;<br><br><span class="hljs-type">int</span> size = M * N * <span class="hljs-keyword">sizeof</span>(<span class="hljs-type">float</span>);<br><span class="hljs-comment">// CPU 呼叫 API 分配裝置端空間 </span><br>cudaMalloc((<span class="hljs-type">void</span>**)&amp; d_A, size);<br><span class="hljs-comment">// CPU 呼叫 API 控制 CPU 和 GPGPU 之間的通訊</span><br><span class="hljs-comment">// 將資料從主機端記憶體複製到 GPGPU 全域記憶體裡面</span><br>cudaMemcpy(d_A, A, size, cudaMemcpyHostToDevice);<br><br>size = N * K * <span class="hljs-keyword">sizeof</span>(<span class="hljs-type">float</span>);<br>cudaMalloc((<span class="hljs-type">void</span>**)&amp; d_B, size);<br>cudaMemcpy(d_B, B, size, cudaMemcpyHostToDevice);<br><br>size = M * K * <span class="hljs-keyword">sizeof</span>(<span class="hljs-type">float</span>);<br>cudaMalloc((<span class="hljs-type">void</span>**)&amp; d_C, size);<br></code></pre></td></tr></table></figure></li></ul><h4 id="GPGPU-啟動"><a href="#GPGPU-啟動" class="headerlink" title="GPGPU 啟動"></a>GPGPU 啟動</h4><ul><li>CPU 喚醒 GPGPU 執行緒進行運算，並將執行緒的組織方式和參數傳入 GPGPU 中。<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">unsigned</span> T_size = <span class="hljs-number">16</span>;<br>dim3 <span class="hljs-title function_">gridDim</span><span class="hljs-params">(M / T_size, K / T_size, <span class="hljs-number">1</span>)</span>;<br>dim3 <span class="hljs-title function_">blockDim</span><span class="hljs-params">(T_size, T_size, <span class="hljs-number">1</span>)</span>;<br><br><span class="hljs-comment">/// 喚醒對應的裝置端程式</span><br><span class="hljs-comment">/// 啟動名為 basic_mul 的裝置端函數</span><br>basic_mul &lt;&lt;&lt; gridDim, blockDim &gt;&gt;&gt; (d_A, d_B, d_C);<br><br><span class="hljs-comment">// 因為 CPU 和 GPGPU 是非同步執行，要使用此函數讓他們同步</span><br><span class="hljs-comment">// 不然可能 CPU 還沒等到 GPGPU 算完就繼續跑</span><br>cudaDeviceSynchronize();<br></code></pre></td></tr></table></figure></li></ul><h4 id="資料寫回"><a href="#資料寫回" class="headerlink" title="資料寫回"></a>資料寫回</h4><ul><li>GPGPU 運算完畢，並將結果寫回主機端記憶體中。<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c">size = M * K * <span class="hljs-keyword">sizeof</span>(<span class="hljs-type">float</span>);<br><span class="hljs-comment">// 將裝置端記憶體 d_C 傳回 主機端記憶體 C</span><br>cudaMemcpy(C, d_C, size, cudaMemcpyDeviceToHost);<br><br><span class="hljs-comment">// GPGPU 裝置端空間釋放</span><br>cudaFree(d_A);<br>cudaFree(d_B);<br>cudaFree(d_C);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br></code></pre></td></tr></table></figure></li></ul><p>裝置端程式常常由多個函數組成，這些函數被稱為**核心函數 (kernel)**，這些核心函數會被分配到每個 GPGPU 的執行緒中執行。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// __global__ 關鍵字定義了這個函數會作為核心函數在 GPGPU 上跑</span><br>__global__ <span class="hljs-type">void</span> <span class="hljs-title function_">basic_mul</span><span class="hljs-params">(<span class="hljs-type">float</span>* d_A, <span class="hljs-type">float</span>* d_B, <span class="hljs-type">float</span>* d_C)</span>&#123;<br>  <span class="hljs-type">int</span> row = threadIdx.x + blockIdx.x * blockDim.x;<br>  <span class="hljs-type">int</span> col = threadIdx.y + blockIdx.y * blockDim.y;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; N; i++)&#123;<br>    d_C[row * K + col] += d_A[row * N + i] * d_B[col + i * k];<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="執行緒模型"><a href="#執行緒模型" class="headerlink" title="執行緒模型"></a>執行緒模型</h1><h3 id="執行緒組織結構"><a href="#執行緒組織結構" class="headerlink" title="執行緒組織結構"></a>執行緒組織結構</h3><p>上面提到，主機端在啟動核心函數時，利用 &lt;&lt;&lt;&gt;&gt;&gt; 向 GPGPU 傳送兩個參數 gridDim 和 blockDim，這兩個參數構造了 GPGPU 計算所採用的執行緒結構。</p><p>CUDA 和 OpenCL 都採用了層次化的執行緒結構，就是前面說的 thread grid、thread block、thread 和 NDRange、work-group、work-item，一一對應。同一個 Block 內的 Thread 可以互相溝通。</p><p><img src="https://www.researchgate.net/publication/328752788/figure/fig3/AS:689781692432384@1541468179263/CUDA-programming-grid-of-thread-blocks-Source-NVIDIA.png" alt="CUDA 的層次化執行緒結構"></p><h3 id="資料索引"><a href="#資料索引" class="headerlink" title="資料索引"></a>資料索引</h3><p>基於上面的執行緒層次，我們需要知道 Thread 在 Grid 中的具體位置，才能讀取合適的資料執行對應的計算。上面例子的 blockIdx、threadIdx 就是用來決定 Thread 的位置。</p>]]></content>
    
    
    <categories>
      
      <category>GPU</category>
      
    </categories>
    
    
    <tags>
      
      <tag>gpu</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Push React App to Github Pages</title>
    <link href="/notes/2024/02/08/react-github-pages/"/>
    <url>/notes/2024/02/08/react-github-pages/</url>
    
    <content type="html"><![CDATA[<ul><li><p>安裝套件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm install gh-pages --save-dev<br>yarn add -D gh-pages<br></code></pre></td></tr></table></figure></li><li><p>在 package.json 裡面新增</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;homepage&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&#123;url to your website&#125;&quot;</span><br>  <span class="hljs-attr">&quot;scripts&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;predeploy&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;npm run build&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;deploy&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;gh-pages -d build&quot;</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure></li><li><p>要 push 的時候就打以下指令，就可以自動 push 到 branch gh-pages</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm run deploy<br></code></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <categories>
      
      <category>React</category>
      
    </categories>
    
    
    <tags>
      
      <tag>React</tag>
      
      <tag>Gtihub</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>UE5 Resources</title>
    <link href="/notes/2024/01/31/ue5-resources/"/>
    <url>/notes/2024/01/31/ue5-resources/</url>
    
    <content type="html"><![CDATA[<ol><li><a href="https://zhuanlan.zhihu.com/p/639001043">理解 FrameGraph</a></li><li><a href="https://zhuanlan.zhihu.com/p/637889120">UE5 Render Dependency Graph-实用指南</a></li><li><a href="https://zhuanlan.zhihu.com/p/551981932">剖析虚幻渲染体系（08）- Shader体系（02）</a></li><li><a href="https://www.bilibili.com/video/BV18K411Z7Jg/?spm_id_from=333.337.search-card.all.click&vd_source=cdd130c5068c54677e0ec511d6834ece">[UOD2022]Rendering Dependency Graph解析 | Epic 陈拓</a></li><li><a href="https://zhuanlan.zhihu.com/p/73016473">游戏引擎随笔 0x05：现代图形 API 讲义</a></li><li><a href="https://zhuanlan.zhihu.com/p/438784425">UE4性能分析工具Stats</a></li><li><a href="https://frankorz.com/2021/04/17/compute-shader/index.html">Compute Shader 简介 - 萤火之森</a></li><li><a href="https://michaeljcole.github.io/wiki.unrealengine.com/HLSL_Shaders/">HLSL Shaders</a></li><li><a href="https://github.com/Temaran/UnrealEngineShaderPluginDemo">UnrealEngineShaderPluginDemo</a></li><li><a href="https://zhuanlan.zhihu.com/p/624322431">UE渲染学习(4)ComputeShader</a></li><li><a href="https://www.bilibili.com/read/cv8755619/">Unreal Compute Shader 使用流程笔记</a></li><li><a href="https://zhuanlan.zhihu.com/p/608724638?utm_id=0">UE5中的 Compute Shader使用及详解（二）</a></li><li><a href="https://inlet511.github.io/posts/rdg-05-structured-buffer/#16-%E5%88%9B%E5%BB%BAsrv%E8%A7%86%E5%9B%BE">RDG 05 StructuredBuffer的用法</a></li><li><a href="https://zhuanlan.zhihu.com/p/379638061">UE4 RHICmdList</a></li><li><a href="https://zhuanlan.zhihu.com/p/377411777">Unreal Engine 4 Materials Tutorial——虚幻4引擎教程——材质</a></li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>UE5</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Unreal Engine 5 - Render Dependency Graph (RDG)</title>
    <link href="/notes/2024/01/30/ue5-rdg/"/>
    <url>/notes/2024/01/30/ue5-rdg/</url>
    
    <content type="html"><![CDATA[<h3 id="RDG-是什麼"><a href="#RDG-是什麼" class="headerlink" title="RDG 是什麼"></a>RDG 是什麼</h3><dl><dt><a href="https://docs.unrealengine.com/4.26/en-US/ProgrammingAndScripting/Rendering/RenderDependencyGraph/">官方文件</a>提到</dt><dd>渲染依賴圖（Rendering Dependency Graph，RDG）是一種基於圖形的排程系統，旨在對渲染管線進行整幀優化。</dd></dl><h4 id="基本介紹"><a href="#基本介紹" class="headerlink" title="基本介紹"></a>基本介紹</h4><ul><li><p>RDG 於 Unreal 4.22 引入</p></li><li><p>前身是 Frame Graph ，在 2017 年的 GDC 中由 <a href="https://zh.wikipedia.org/zh-tw/%E5%AF%92%E9%9C%9C%E5%BC%95%E6%93%8E">Frostbite Engine</a> 提出</p></li><li><p>RDG 的概念是不在 GPU 上立即執行通道 (Pass)，而是先收集所有需要渲染的通道，然後按照它們之間的依賴關係順序對圖表進行編譯和執行。過程中，系統會執行各種裁剪和優化操作。</p></li></ul><h4 id="為什麼要用-RDG？"><a href="#為什麼要用-RDG？" class="headerlink" title="為什麼要用 RDG？"></a>為什麼要用 RDG？</h4><ul><li><p>Render pipeline 越來越複雜，導致難以管理且性能不好</p><ul><li>隨著硬體性能日漸提升，各大廠商為了渲染出更出色的畫面效果，render pipeline 也日趨複雜。</li></ul></li></ul><p><img src="/notes/images/ue5-rdg/rendering-systems-overview.png" alt="rendering systems overview" title="Rendering systems overview"></p><ul><li><p>硬體的體系結構以及圖形 API 的優化擴展無法得到充分的利用</p><ul><li><p>現代圖形API (如DirectX 12、Vulkan 和 Metal 2) 與傳統圖形API (如DirectX 11、OpenGL) 的主要區別在於現代圖形 API 將更多的 GPU 管理的責任轉移到應用程式的開發者身上，能夠更有效的利用有限的 GPU 資源，進而提升效能。</p><ul><li><a href="https://zhuanlan.zhihu.com/p/73016473">傳統 API 和現代 API 的介紹</a></li></ul></li><li><p>RDG 與現代圖形 API 的能力相結合，使 RDG 能夠在幕後執行複雜的排程任務：</p><ol><li>執行異步計算通道的自動排程和隔離。</li><li>在幀的不相交間隔期間，使資源之間的別名 (Aliasing) 記憶體保持活躍狀態。</li><li>盡早啟動屏障和佈局轉換，避免管線延遲。</li></ol></li></ul></li></ul><h3 id="RDG-的原理"><a href="#RDG-的原理" class="headerlink" title="RDG 的原理"></a>RDG 的原理</h3><p><img src="/notes/images/ue5-rdg/rdg-in-engine.png" alt="rdg in the game engine" title="RDG in the game engine"></p><p>位於 RHI 和 Render Pass 的中間，RDG 作為 Pass 管理器，在搜集資源描述訊息後，對 Pass 和資源進行分析，並結合硬體特性，以最優的方式執行 Pass，主要有三個階段：</p><ol><li><p>Setup</p><ul><li>蒐集 pass 的訊息(主要是該 Pass 使用到的資源)</li></ul></li><li><p>Compile</p><ul><li>Render Graph 的生成以及分析 (包含 Pass culling、Resources state 的最終生成、Async Compute 優化等等)</li></ul></li><li><p>Execute</p><ul><li>將 Command 提交到 CommandList (包含設置 Barrier、平行優化等)</li></ul></li></ol><p><img src="/notes/images/ue5-rdg/rdg-stages.png" alt="Three stages of RDG" title="Three stages of RDG"></p><h3 id="FRDGBuilder"><a href="#FRDGBuilder" class="headerlink" title="FRDGBuilder"></a>FRDGBuilder</h3><ul><li>RDG 系统的心臟和驅動器，同時也是管家，負責儲存數據、處理狀態轉換、自動管理資源生命週期和屏障 (barrier)、裁剪無效資源，和收集、編譯、執行Pass，提取紋理或緩衝等等功能。</li></ul><h3 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h3><ul><li><a href="https://zhuanlan.zhihu.com/p/554758862">剖析虚幻渲染体系（11）- RDG</a></li><li><a href="https://docs.unrealengine.com/4.26/en-US/ProgrammingAndScripting/Rendering/RenderDependencyGraph/">Rendering Dependency Graph</a></li><li><a href="https://zhuanlan.zhihu.com/p/637889120">UE5 Render Dependency Graph-实用指南</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>UE5</category>
      
      <category>Render</category>
      
    </categories>
    
    
    <tags>
      
      <tag>UE5</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Flutter GPS background</title>
    <link href="/notes/2024/01/25/flutter-gps/"/>
    <url>/notes/2024/01/25/flutter-gps/</url>
    
    <content type="html"><![CDATA[<blockquote><p>官方文件: <a href="https://pub.dev/packages/background_locator_2/example">https://pub.dev/packages/background_locator_2/example</a><br>Github: <a href="https://github.com/Yukams/background_locator_fixed">https://github.com/Yukams/background_locator_fixed</a></p></blockquote><h3 id="介紹"><a href="#介紹" class="headerlink" title="介紹"></a>介紹</h3><p>這個 package 的目的是讓 app 可以順利定位，取得定位的相關訊息 (經緯度、方向、速度等)，最重要的是它也支援<strong>背景運行</strong>，也就是當你 kill 這個 app (在 app switcher 裡 swipe up app)，這個 app 依然在背景中運行，並顯示在手機的 notification drawer 裡來提醒使用者。</p><p><img src="/notes/images/flutter-gps/notification.png" alt="Notification"></p><p>由於 <code>location_permissions</code> 似乎不再更新了，所以在測試的時候都會有問題，無法正確 import package，所以後來我改用 <code>permission_handler</code>，除了詢問 location 的權限，同時也可以要求 notification 的權限。</p><h3 id="程式碼"><a href="#程式碼" class="headerlink" title="程式碼"></a>程式碼</h3><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;dart:async&#x27;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;dart:isolate&#x27;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;dart:ui&#x27;</span>;<br><br><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;package:background_locator_2/background_locator.dart&#x27;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;package:background_locator_2/location_dto.dart&#x27;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;package:background_locator_2/settings/android_settings.dart&#x27;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;package:background_locator_2/settings/ios_settings.dart&#x27;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;package:background_locator_2/settings/locator_settings.dart&#x27;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;package:flutter/material.dart&#x27;</span>;<br><br><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;package:permission_handler/permission_handler.dart&#x27;</span>;<br><br><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;file_manager.dart&#x27;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;location_callback_handler.dart&#x27;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;location_service_repository.dart&#x27;</span>;<br><br><span class="hljs-keyword">void</span> main() =&gt; runApp(MyApp());<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyApp</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">StatefulWidget</span> </span>&#123;<br>  <span class="hljs-meta">@override</span><br>  _MyAppState createState() =&gt; _MyAppState();<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">_MyAppState</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">State</span>&lt;<span class="hljs-title">MyApp</span>&gt; </span>&#123;<br>  ReceivePort port = ReceivePort();<br><br>  <span class="hljs-built_in">String</span> logStr = <span class="hljs-string">&#x27;&#x27;</span>;<br>  <span class="hljs-built_in">bool</span> isRunning = <span class="hljs-keyword">false</span>;<br><br>  <span class="hljs-meta">@override</span><br>  <span class="hljs-keyword">void</span> initState() &#123;<br>    <span class="hljs-keyword">super</span>.initState();<br><br>    <span class="hljs-keyword">if</span> (IsolateNameServer.lookupPortByName(LocationServiceRepository.isolateName) != <span class="hljs-keyword">null</span>)<br>    &#123;<br>          IsolateNameServer.removePortNameMapping(<br>          LocationServiceRepository.isolateName);<br>    &#125;<br><br>    IsolateNameServer.registerPortWithName(port.sendPort, LocationServiceRepository.isolateName);<br><br>    port.listen((<span class="hljs-built_in">dynamic</span> data) <span class="hljs-keyword">async</span> &#123;<br>        <span class="hljs-keyword">await</span> updateUI(data);<br>      &#125;,<br>    );<br>    initPlatformState();<br>  &#125;<br><br>  <span class="hljs-meta">@override</span><br>  <span class="hljs-keyword">void</span> dispose() &#123;<br>    <span class="hljs-keyword">super</span>.dispose();<br>  &#125;<br><br>  Future&lt;<span class="hljs-keyword">void</span>&gt; updateUI(<span class="hljs-built_in">dynamic</span> data) <span class="hljs-keyword">async</span> &#123;<br>    <span class="hljs-keyword">final</span> log = <span class="hljs-keyword">await</span> FileManager.readLogFile();<br><br>    <span class="hljs-keyword">if</span> (data != <span class="hljs-keyword">null</span>)&#123;<br>      <span class="hljs-keyword">await</span> _updateNotificationText(data);<br>    &#125;<br><br>    setState(()&#123;<br>      logStr = log;<br>    &#125;);<br>  &#125;<br><br>  Future&lt;<span class="hljs-keyword">void</span>&gt; _updateNotificationText(<span class="hljs-built_in">Map</span>&lt;<span class="hljs-built_in">String</span>, <span class="hljs-built_in">dynamic</span>&gt; data) <span class="hljs-keyword">async</span> &#123;<br>    <span class="hljs-keyword">await</span> BackgroundLocator.updateNotificationText(<br>        title: <span class="hljs-string">&quot;new location received&quot;</span>,<br>        msg: <span class="hljs-string">&quot;<span class="hljs-subst">$&#123;DateTime.now()&#125;</span>&quot;</span>,<br>        bigMsg: <span class="hljs-string">&quot;<span class="hljs-subst">$&#123;data[<span class="hljs-string">&#x27;latitude&#x27;</span>]&#125;</span>, <span class="hljs-subst">$&#123;data[<span class="hljs-string">&#x27;longitude&#x27;</span>]&#125;</span>&quot;</span><br>    );<br>  &#125;<br><br>  Future&lt;<span class="hljs-keyword">void</span>&gt; initPlatformState() <span class="hljs-keyword">async</span> &#123;<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Initializing...&#x27;</span>);<br>    <span class="hljs-keyword">await</span> BackgroundLocator.initialize();<br>    logStr = <span class="hljs-keyword">await</span> FileManager.readLogFile();<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Initialization done&#x27;</span>);<br>    <span class="hljs-keyword">final</span> _isRunning = <span class="hljs-keyword">await</span> BackgroundLocator.isServiceRunning();<br>    setState(() &#123;<br>      isRunning = _isRunning;<br>    &#125;);<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Running <span class="hljs-subst">$&#123;isRunning.toString()&#125;</span>&#x27;</span>);<br>  &#125;<br><br>  <span class="hljs-meta">@override</span><br>  Widget build(BuildContext context) &#123;<br>    <span class="hljs-keyword">final</span> start = SizedBox(<br>      width: <span class="hljs-built_in">double</span>.maxFinite,<br>      child: ElevatedButton(<br>        child: Text(<span class="hljs-string">&#x27;Start&#x27;</span>),<br>        onPressed: () &#123;<br>          _onStart();<br>        &#125;,<br>      ),<br>    );<br>    <span class="hljs-keyword">final</span> stop = SizedBox(<br>      width: <span class="hljs-built_in">double</span>.maxFinite,<br>      child: ElevatedButton(<br>        child: Text(<span class="hljs-string">&#x27;Stop&#x27;</span>),<br>        onPressed: () &#123;<br>          onStop();<br>        &#125;,<br>      ),<br>    );<br>    <span class="hljs-keyword">final</span> clear = SizedBox(<br>      width: <span class="hljs-built_in">double</span>.maxFinite,<br>      child: ElevatedButton(<br>        child: Text(<span class="hljs-string">&#x27;Clear Log&#x27;</span>),<br>        onPressed: () &#123;<br>          FileManager.clearLogFile();<br>          setState(() &#123;<br>            logStr = <span class="hljs-string">&#x27;&#x27;</span>;<br>          &#125;);<br>        &#125;,<br>      ),<br>    );<br>    <span class="hljs-built_in">String</span> msgStatus = <span class="hljs-string">&quot;-&quot;</span>;<br>    <span class="hljs-keyword">if</span> (isRunning != <span class="hljs-keyword">null</span>) &#123;<br>      <span class="hljs-keyword">if</span> (isRunning) &#123;<br>        msgStatus = <span class="hljs-string">&#x27;Is running&#x27;</span>;<br>      &#125; <span class="hljs-keyword">else</span> &#123;<br>        msgStatus = <span class="hljs-string">&#x27;Is not running&#x27;</span>;<br>      &#125;<br>    &#125;<br>    <span class="hljs-keyword">final</span> status = Text(<span class="hljs-string">&quot;Status: <span class="hljs-subst">$msgStatus</span>&quot;</span>);<br><br>    <span class="hljs-keyword">final</span> log = Text(<br>      logStr,<br>    );<br><br>    <span class="hljs-keyword">return</span> MaterialApp(<br>      home: Scaffold(<br>        appBar: AppBar(<br>          title: <span class="hljs-keyword">const</span> Text(<span class="hljs-string">&#x27;Flutter background Locator&#x27;</span>),<br>        ),<br>        body: Container(<br>          width: <span class="hljs-built_in">double</span>.maxFinite,<br>          padding: <span class="hljs-keyword">const</span> EdgeInsets.all(<span class="hljs-number">22</span>),<br>          child: SingleChildScrollView(<br>            child: Column(<br>              crossAxisAlignment: CrossAxisAlignment.center,<br>              children: &lt;Widget&gt;[start, stop, clear, status, log],<br>            ),<br>          ),<br>        ),<br>      ),<br>    );<br>  &#125;<br><br>  <span class="hljs-keyword">void</span> onStop() <span class="hljs-keyword">async</span> &#123;<br>    <span class="hljs-keyword">await</span> BackgroundLocator.unRegisterLocationUpdate();<br>    <span class="hljs-keyword">final</span> _isRunning = <span class="hljs-keyword">await</span> BackgroundLocator.isServiceRunning();<br>    setState(() &#123;<br>      isRunning = _isRunning;<br>    &#125;);<br>  &#125;<br><br>  <span class="hljs-keyword">void</span> _onStart() <span class="hljs-keyword">async</span> &#123;<br>    <span class="hljs-keyword">if</span> (!<span class="hljs-keyword">await</span> _checkNotificationPermission()) <span class="hljs-keyword">return</span>;<br>    <span class="hljs-keyword">if</span>(!<span class="hljs-keyword">await</span> _checkLocationPermission()) <span class="hljs-keyword">return</span>;<br>    <span class="hljs-keyword">await</span> _startLocator();<br>    <span class="hljs-keyword">final</span> _isRunning = <span class="hljs-keyword">await</span> BackgroundLocator.isServiceRunning();<br><br>    setState(() &#123;<br>      isRunning = _isRunning;<br>    &#125;);<br>  &#125;<br><br>  Future&lt;<span class="hljs-built_in">bool</span>&gt; _checkLocationPermission() <span class="hljs-keyword">async</span> &#123;<br>    Permission _permission = Permission.location;<br>    PermissionStatus _status = <span class="hljs-keyword">await</span> _permission.request();<br>    <span class="hljs-keyword">if</span> (_status.isPermanentlyDenied) &#123;<br>      <span class="hljs-keyword">await</span> openAppSettings();<br>    &#125;<br>    <span class="hljs-keyword">return</span> _status.isGranted;<br>  &#125;<br><br>  Future&lt;<span class="hljs-built_in">bool</span>&gt; _checkNotificationPermission() <span class="hljs-keyword">async</span> &#123;<br>    Permission _permission = Permission.notification;<br>    PermissionStatus _status = <span class="hljs-keyword">await</span> _permission.request();<br>    <span class="hljs-keyword">if</span> (_status.isPermanentlyDenied) &#123;<br>      <span class="hljs-keyword">await</span> openAppSettings();<br>    &#125;<br>    <span class="hljs-keyword">return</span> _status.isGranted;<br>  &#125;<br><br>  Future&lt;<span class="hljs-keyword">void</span>&gt; _startLocator() <span class="hljs-keyword">async</span>&#123;<br><br>    <span class="hljs-built_in">Map</span>&lt;<span class="hljs-built_in">String</span>, <span class="hljs-built_in">dynamic</span>&gt; data = &#123;<span class="hljs-string">&#x27;countInit&#x27;</span>: <span class="hljs-number">1</span>&#125;;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">await</span> BackgroundLocator.registerLocationUpdate(<br>        LocationCallbackHandler.callback,<br>        initCallback: LocationCallbackHandler.initCallback,<br>        initDataCallback: data,<br>        disposeCallback: LocationCallbackHandler.disposeCallback,<br>        iosSettings: IOSSettings(<br>            accuracy: LocationAccuracy.NAVIGATION,<br>            distanceFilter: <span class="hljs-number">0</span>,<br>            stopWithTerminate: <span class="hljs-keyword">true</span><br>        ),<br>        autoStop: <span class="hljs-keyword">false</span>,<br>        androidSettings: AndroidSettings(<br>            accuracy: LocationAccuracy.NAVIGATION,<br>            interval: <span class="hljs-number">1</span>,<br>            distanceFilter: <span class="hljs-number">0</span>,<br>            client: LocationClient.google,<br>            androidNotificationSettings: AndroidNotificationSettings(<br>                notificationChannelName: <span class="hljs-string">&#x27;Location tracking&#x27;</span>,<br>                notificationTitle: <span class="hljs-string">&#x27;Start Location Tracking&#x27;</span>,<br>                notificationMsg: <span class="hljs-string">&#x27;Track location in background&#x27;</span>,<br>                notificationBigMsg:<br>                <span class="hljs-string">&#x27;Background location is on to keep the app up-tp-date with your location. This is required for main features to work properly when the app is not running.&#x27;</span>,<br>                notificationIcon: <span class="hljs-string">&#x27;&#x27;</span>,<br>                notificationIconColor: Colors.grey,<br>                notificationTapCallback:<br>                LocationCallbackHandler.notificationCallback)<br>        )<br>    );<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>在 AndroidMaifest.xml 裡面要加上：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">uses-permission</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.permission.POST_NOTIFICATIONS&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">uses-permission</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.permission.ACCESS_FINE_LOCATION&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">uses-permission</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.permission.ACCESS_BACKGROUND_LOCATION&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">uses-permission</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.permission.WAKE_LOCK&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">uses-permission</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.permission.FOREGROUND_SERVICE&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure><!-- ### Demo[![](https://markdown-videos-api.jorgenkh.no/youtube/euh3HlNAERs)](https://youtu.be/euh3HlNAERs) -->]]></content>
    
    
    <categories>
      
      <category>Flutter</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Flutter</tag>
      
      <tag>App</tag>
      
      <tag>ECHO</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Recursion</title>
    <link href="/notes/2023/09/13/recursion/"/>
    <url>/notes/2023/09/13/recursion/</url>
    
    <content type="html"><![CDATA[<h2 id="Substitution-Method"><a href="#Substitution-Method" class="headerlink" title="Substitution Method"></a>Substitution Method</h2><h4 id="1-T-n-2T-lfloor-n-2-rfloor-n-T-1-1"><a href="#1-T-n-2T-lfloor-n-2-rfloor-n-T-1-1" class="headerlink" title="1. $ T(n) &#x3D; 2T(\lfloor n&#x2F;2 \rfloor) + n$, $ T(1) &#x3D; 1$"></a>1. $ T(n) &#x3D; 2T(\lfloor n&#x2F;2 \rfloor) + n$, $ T(1) &#x3D; 1$</h4><ul><li>Guess $ T(n) &#x3D; O(n lgn)$</li><li>Show it by <strong>induction</strong><ul><li>for $ n &#x3D; 2$, $ T(2) &#x3D; 4$</li><li>for $ c &#x3D; 2$, $ T(2) \le c n lgn$</li></ul></li><li>Base case: $ n_0 &#x3D; 2$ hold</li><li>Induction case<ul><li>Assume the guess is true for all $ n &#x3D; 2, 3, …, k$</li><li>For $ n &#x3D; k + 1$, we have<br>$$\begin{align}<br>T(n) &amp;&#x3D; 2T(\lfloor n&#x2F;2 \rfloor) + n \newline<br>&amp;\le 2c\lfloor n&#x2F;2 \rfloor lg \lfloor n&#x2F;2 \rfloor + n \newline<br>&amp;\le c n lg n&#x2F;2 + n &#x3D; c n lgn - c n + n \newline<br>&amp;\le c n lg n<br>\end{align} $$</li></ul></li></ul><h4 id="2-T-n-T-lfloor-n-2-rfloor-T-lceil-n-2-rceil-1-T-1-1"><a href="#2-T-n-T-lfloor-n-2-rfloor-T-lceil-n-2-rceil-1-T-1-1" class="headerlink" title="2. $ T(n) &#x3D; T(\lfloor n&#x2F;2 \rfloor) + T(\lceil n&#x2F;2 \rceil) + 1$, $ T(1) &#x3D; 1$"></a>2. $ T(n) &#x3D; T(\lfloor n&#x2F;2 \rfloor) + T(\lceil n&#x2F;2 \rceil) + 1$, $ T(1) &#x3D; 1$</h4><ul><li>可以發現當 $  n &#x3D; 16 $ 時<br>$$<br> \begin{align}<br>   T(16) &amp;&#x3D; 2T(8) + 1 \newline<br>   &amp;&#x3D; 4T(4) + 2 + 1 \newline<br>   &amp;&#x3D; 8T(2) + 4 + 2 + 1 \newline<br>   &amp;&#x3D; 16T(1) + 8 + 4 + 2 + 1<br> \end{align}<br>$$<ul><li>當 n 夠大時， $ T(1)$ 項可以被省略，所以可以猜 $ T(n) &#x3D; O(n)$</li></ul></li><li>Base case: for $ c &#x3D; 1$, $ T(1) &#x3D; 1 \le cn &#x3D; 1$</li><li>Inductive case:<br>$$<br> \begin{align}<br>   T(n) &amp;&#x3D; T(\lfloor n&#x2F;2 \rfloor) + T(\lceil n&#x2F;2 \rceil) + 1 \newline<br>   &amp;&#x3D; cn + 1 \newline<br>   &amp;\not\le cn<br> \end{align}<br>$$</li><li>Solution:  prove a <strong>stronger</strong> statement<ul><li>$ T(n) \le cn - b$</li></ul></li><li>Base case: for $ c &#x3D; 2, ; b &#x3D; 1$, $ T(2) &#x3D; 3 \le cn - b &#x3D; 3$</li><li>Improved Inductive case:<br>$$<br> \begin{align}<br>   T(n) &amp;&#x3D; T(\lfloor n&#x2F;2 \rfloor) + T(\lceil n&#x2F;2 \rceil) + 1 \newline<br>   &amp;&#x3D; c\lfloor n&#x2F;2 \rfloor - b + c \lceil n&#x2F;2 \rceil - b + 1 \newline<br>   &amp;&#x3D; cn - b \newline<br>   &amp;\le cn ,\quad (b \ge 1)<br> \end{align}<br>$$</li></ul><h4 id="3-T-n-2T-sqrt-n-lgn"><a href="#3-T-n-2T-sqrt-n-lgn" class="headerlink" title="3. $ T(n) &#x3D; 2T(\sqrt{n}) + lgn$"></a>3. $ T(n) &#x3D; 2T(\sqrt{n}) + lgn$</h4><ul><li>Set $ m &#x3D; lgn$, we get $ T(2^m) &#x3D; 2T(2^{m&#x2F;2}) + m$</li><li>Rename $ S(m) &#x3D; T(2^m) &#x3D; T(n)$, $ S(m) &#x3D; 2S(m&#x2F;2) + m$</li><li>We solve $ S(m) &#x3D; O(mlgm)$, $ T(n) &#x3D; O(lgn \cdot lg(lgn))$</li></ul><h2 id="Recursion-Tree-Method"><a href="#Recursion-Tree-Method" class="headerlink" title="Recursion Tree Method"></a>Recursion Tree Method</h2><h4 id="1-T-n-2T-n-2-n-2-with-T-1-1"><a href="#1-T-n-2T-n-2-n-2-with-T-1-1" class="headerlink" title="1. $ T(n) &#x3D; 2T(n&#x2F;2) + n^2$, with $ T(1) &#x3D; 1$"></a>1. $ T(n) &#x3D; 2T(n&#x2F;2) + n^2$, with $ T(1) &#x3D; 1$</h4><ul><li>Expanding the terms<br>  $$<br>\begin{align}<br>  T(n) &amp;&#x3D; 2T(n&#x2F;2) + n^2 \newline<br>  &amp;&#x3D; n^2 + n^2&#x2F;2 + 4T(n&#x2F;4) \newline<br>  &amp;&#x3D; n^2 + n^2&#x2F;2 + n^2&#x2F;4 + 8T(n&#x2F;8) \newline<br>  &amp;&#x3D; … \newline<br>  &amp;&#x3D; \sum_{k&#x3D;0}^{lgn - 1} (1&#x2F;2)^k n^2 + 2^{lgn}T(1) \newline<br>  &amp;&#x3D; \Theta(n^2) + \Theta(n) &#x3D; \Theta(n^2) \newline<br>\end{align}<br>  $$</li></ul><h4 id="2-T-n-T-n-3-T-2n-3-n-with-T-1-1"><a href="#2-T-n-T-n-3-T-2n-3-n-with-T-1-1" class="headerlink" title="2. $ T(n) &#x3D; T(n&#x2F;3) + T({2n}&#x2F;3) + n$, with $ T(1) &#x3D; 1$"></a>2. $ T(n) &#x3D; T(n&#x2F;3) + T({2n}&#x2F;3) + n$, with $ T(1) &#x3D; 1$</h4><ul><li>深度是 $ log_{3&#x2F;2}n$，因為右邊項都是原本的 2&#x2F;3</li></ul><h2 id="Master-Method"><a href="#Master-Method" class="headerlink" title="Master Method"></a>Master Method</h2><ul><li>When the <strong>recurrence</strong> is in a special form, we can apply the <strong>Master Theorem</strong> to solve the recurrence immediately</li><li>$ T(n) &#x3D; aT(n&#x2F;b) + f(n)$ with $ a \ge 1$ and $ b &gt; 1$, where $ n&#x2F;b$ is either $ \lfloor n&#x2F;b \rfloor$ or $ \lceil n&#x2F;b \rceil$</li><li>There are three cases</li></ul><h4 id="1-Case-1"><a href="#1-Case-1" class="headerlink" title="1. Case 1"></a>1. Case 1</h4><ul><li>$ f(n) &#x3D; O(n^{log_b^{a} - \epsilon})$ for some constant $ \epsilon &gt; 0$</li><li>這代表的意義是，recursion 通常最後可以分成兩項<ol><li><strong>最後一層的數量</strong>，也就是 Divide</li><li><strong>每一層要做的計算</strong>，也就是 Conquer</li></ol></li><li>比較兩者，Case 1 代表 Divide 的計算量比 Conquer 大，所以可以忽略 Conquer 的時間複雜度</li><li>方程式中的 $ n^{log_b{a}}$ 代表最後一層有幾個 node，也可以看成 $ a^{log_b{n}}$，代表每一層 <strong>會增加 a</strong> 倍的 node，且總共有 $ log_b{n}$層 </li><li>Example<ol><li>$ T(n) &#x3D; 9T(n&#x2F;3) + n$, T(1) &#x3D; 1<ul><li>We have $ a &#x3D; 9, ; b &#x3D; 3, ; f(n) &#x3D; n$</li><li>Since $ n^{log_b{a}} &#x3D; n^{log_3{9}} &#x3D; n^2$, $ f(n) &#x3D; n &#x3D; O(n^{2-\epsilon})$, we have $ T(n) &#x3D; \Theta(n^2)$, where $ \epsilon &#x3D; 1$</li></ul></li><li>$ T(n) &#x3D; 8T(n&#x2F;2) + n^2$, T(1) &#x3D; 1<ul><li>We have $ a &#x3D; 8, b &#x3D; 2 and f(n) &#x3D; \Theta(n^2)$</li><li>Since $ n^{log_b{a}} &#x3D; n^{log_2{8}} &#x3D; n^3$, $ f(n) &#x3D; n^2 &#x3D; O(n^{3-\epsilon})$, we have $ T(n) &#x3D; \Theta(n^3)$, where $ \epsilon &#x3D; 1$</li></ul></li><li>$ T(n) &#x3D; 7T(n&#x2F;2) + n^2$<ul><li>We have $ a &#x3D;7, b &#x3D; 2$, $ n^{log_b{a}} &#x3D; n^{lg 7} \approx n^{2.81}$</li><li>Hence, $ T(n) &#x3D; \Theta({n^{2.81}})$</li></ul></li></ol></li></ul><h4 id="2-Case-2"><a href="#2-Case-2" class="headerlink" title="2. Case 2"></a>2. Case 2</h4><ul><li>Divide 和 Conquer 計算量一樣</li><li>If $ f(n) &#x3D; O(n^{log_b^{a}})$, then $ T(n) &#x3D; \Theta(f(n) lg n)$</li><li>Example<ol><li>$ T(n) &#x3D; T(2n&#x2F;3) + 1$  <ul><li>$ a &#x3D; 1, b &#x3D; 3&#x2F;2, f(n) &#x3D; 1$, and $ n^{log_b{a}} &#x3D; n^{log_{3&#x2F;2}{1}} &#x3D; 1$</li><li>We have $ f(n) &#x3D; \Theta(n^{log_b{a}}) &#x3D; \Theta(1)$</li><li>Thus $ T(n) &#x3D; \Theta(lg n)$</li></ul></li></ol></li></ul><h4 id="3-Case-3"><a href="#3-Case-3" class="headerlink" title="3. Case 3"></a>3. Case 3</h4><ul><li>Conquer 計算量比 Divide 大</li><li>If $ f(n) &#x3D; \Omega(n^{log_b{a} + \epsilon})$ for some constant $ \epsilon &gt; 0$</li><li>And if $ a f(n&#x2F;b \le cf(n))$ for some constant $ c &lt; 1$</li><li>Then $ T(n) &#x3D; \Theta(f(n))$</li><li>Example: $ T(n) &#x3D; 3T(n&#x2F;4) + nlgn$ <ul><li>$ a &#x3D; 3, b &#x3D; 4$, $ f(n) &#x3D; n lg n$, and $ n^{log_4{3}} &#x3D; O(n^{0.793})$</li><li>$ f(n) &#x3D; \Omega(n^{0.793 + \epsilon})$</li><li>$ af(n&#x2F;b) &#x3D; 3f(n&#x2F;4) &#x3D; 3(n&#x2F;4)lg(n&#x2F;4) \le (3&#x2F;4)n lgn &#x3D; cf(n) &#x3D; cf(n)$, for c &#x3D; 3&#x2F;4</li><li>Hence, $ T(n) &#x3D; \Theta(n lg n)$</li></ul></li></ul><h4 id="4-不能用的情況"><a href="#4-不能用的情況" class="headerlink" title="4. 不能用的情況"></a>4. 不能用的情況</h4><ol><li><p>$ f(n)$ is smaller than $ n^{log_b{a}}$ but <strong>not polynomial smaller</strong> </p><ul><li>Example: $ T(n) &#x3D; 2T(n&#x2F;2) + n&#x2F;lgn$<ul><li>$ n^{log_b{a}} &#x3D; n^{log_2{2}} &#x3D; n$, <strong>n&#x2F;lgn</strong> is smaller than <strong>n</strong> but <strong>not polynomial smaller</strong></li><li>Hence you can’t use Master theorem</li></ul></li></ul></li><li><p>$ f(n)$ is larger than $ n^{log_b{a}}$ but <strong>not polynomial larger</strong></p><ul><li>Example: $ T(n) &#x3D; 2T(n&#x2F;2) + nlgn$<ul><li>$ n^{log_b{a}} &#x3D; n^{log_2{2}} &#x3D; n$, <strong>n&#x2F;lgn</strong> is larger than <strong>n</strong> but <strong>not polynomial larger</strong></li><li>Hence you can’t use Master theorem</li></ul></li></ul></li></ol>]]></content>
    
    
    <categories>
      
      <category>Algorithm</category>
      
      <category>Recursion</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Recursion</tag>
      
      <tag>Algorithm</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Simple Discord Music Bot</title>
    <link href="/notes/2023/09/08/simple-discord-music-bot/"/>
    <url>/notes/2023/09/08/simple-discord-music-bot/</url>
    
    <content type="html"><![CDATA[<blockquote><p>一個可以撥放 Youtube playlist 的 Discord 音樂機器人<br>Source code: <a href="https://github.com/933yee/discord-simple-music-bot">https://github.com/933yee/discord-simple-music-bot</a></p></blockquote><h2 id="Structure"><a href="#Structure" class="headerlink" title="Structure"></a>Structure</h2><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs stylus">project<br>  └── bot<br>       ├── bot<span class="hljs-selector-class">.py</span><br>       ├── config<span class="hljs-selector-class">.py</span><br>       └── data<br>            └── data<span class="hljs-selector-class">.py</span><br>       └── cogs<br>            ├── commands<span class="hljs-selector-class">.py</span><br>            └── events<span class="hljs-selector-class">.py</span><br>  └── .env<br></code></pre></td></tr></table></figure><h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><h3 id="main-py"><a href="#main-py" class="headerlink" title="main.py"></a>main.py</h3><ul><li>可以藉由更改<figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs py">bot = commands.Bot(command_prefix=<span class="hljs-string">&quot;!&quot;</span>, intents=intents)<br></code></pre></td></tr></table></figure>改變指令的前綴符號</li></ul><h3 id="config-py"><a href="#config-py" class="headerlink" title="config.py"></a>config.py</h3><ul><li>讀取儲存在 .env 檔案裡面 discord 機器人的 Token</li></ul><h3 id="data-py"><a href="#data-py" class="headerlink" title="data.py"></a>data.py</h3><ul><li>全域變數，提供給 events.py、commands.py 做處理，還會記哪些伺服器正在使用這個機器人<ul><li>server_data<ul><li>記錄某伺服器待播的歌曲清單</li></ul></li><li>server_loop<ul><li>記錄某伺服器是否正在循環撥放</li></ul></li></ul></li></ul><h3 id="events-py"><a href="#events-py" class="headerlink" title="events.py"></a>events.py</h3><ul><li>處理事件的地方，像是偵測機器人的開啟、語音頻道的變化（有人離開、加入）等事件。</li></ul><h3 id="commands-py"><a href="#commands-py" class="headerlink" title="commands.py"></a>commands.py</h3><ul><li>新增指令的地方，像是：<figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-meta">@commands.command(<span class="hljs-params">description=<span class="hljs-string">&quot;Exit voice channel\n&quot;</span> <span class="hljs-string">&quot; &quot;</span></span>)</span><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">def</span> <span class="hljs-title function_">exit</span>(<span class="hljs-params">self, ctx</span>):<br>    <span class="hljs-keyword">if</span> ctx.guild.<span class="hljs-built_in">id</span> <span class="hljs-keyword">in</span> server_data:<br>        <span class="hljs-keyword">await</span> ctx.voice_client.disconnect()<br>        <span class="hljs-keyword">del</span> server_data[ctx.guild.<span class="hljs-built_in">id</span>]<br>        <span class="hljs-keyword">del</span> server_loop[ctx.guild.<span class="hljs-built_in">id</span>]<br></code></pre></td></tr></table></figure><ul><li>description 是提供給 !help 指令做介紹，簡述指令的功能</li></ul></li></ul>]]></content>
    
    
    <categories>
      
      <category>Side projects</category>
      
      <category>Discord Bot</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Side Projects</tag>
      
      <tag>Discord</tag>
      
      <tag>Bot</tag>
      
      <tag>Backend</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>學貸申請步驟</title>
    <link href="/notes/2023/09/06/nthu-loan/"/>
    <url>/notes/2023/09/06/nthu-loan/</url>
    
    <content type="html"><![CDATA[<p>到 <strong><a href="https://www.ccxp.nthu.edu.tw/ccxp/INQUIRE">校務資訊系統</a>&#x2F; 繳費單相關作業(出納組)&#x2F; 繳費單列印&#x2F; 學雜費</strong>，看學費多少，扣掉<strong>不可貸款項目</strong> (體育設施使用費)</p><h4 id="就學貸款申請表"><a href="#就學貸款申請表" class="headerlink" title="就學貸款申請表"></a>就學貸款申請表</h4><ul><li>到校務資訊系統&#x2F; 就學貸款&#x2F;就學貸款申請&#x2F;填寫就學貸款申請表，列印簽名，填好會給<strong>不可貸款項目繳費單</strong></li></ul><h4 id="臺灣銀行撥款通知書第-2-聯"><a href="#臺灣銀行撥款通知書第-2-聯" class="headerlink" title="臺灣銀行撥款通知書第 2 聯"></a>臺灣銀行撥款通知書第 2 聯</h4><ul><li>到 <strong><a href="https://sloan.bot.com.tw/customer/login/SLoanLogin.action">臺灣銀行就學貸款入口網</a></strong> 填寫申請書，填好選擇簡訊 OTP 認證對保</li></ul><h4 id="不可貸款項目繳費證明"><a href="#不可貸款項目繳費證明" class="headerlink" title="不可貸款項目繳費證明"></a>不可貸款項目繳費證明</h4>]]></content>
    
    
    <categories>
      
      <category>Others</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Others</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Time Complexity</title>
    <link href="/notes/2023/01/17/time-complexity/"/>
    <url>/notes/2023/01/17/time-complexity/</url>
    
    <content type="html"><![CDATA[<p><img src="https://miro.medium.com/v2/resize:fit:1400/1*5ZLci3SuR0zM_QlZOADv8Q.jpeg" alt="Big-O Complexity Chart"></p><h2 id="Big-O-O"><a href="#Big-O-O" class="headerlink" title="Big-O ($O$)"></a><strong>Big-O ($O$)</strong></h2><h3 id="Definition"><a href="#Definition" class="headerlink" title="Definition"></a><strong>Definition</strong></h3><ul><li>f(n) &#x3D; $O$(g(n)) iff $\exists$ <span style="color:yellow">  c, n<sub>0</sub> &gt; 0 </span> such that<span style="color:yellow"> f(n)$\le$ c $\cdot$ g(n) </span> $\forall$ <span style="color:yellow"> n $\ge$ n<sub>0</sub> </span></li></ul><h3 id="Examples"><a href="#Examples" class="headerlink" title="Examples"></a><strong>Examples</strong></h3><ul><li><dl><dt>3n+2 &#x3D; $O$(n)</dt><dd>When c&#x3D;4, n<sub>0</sub> &#x3D; 2, 3n+2 $\le$ 4n for all n $\ge$ 2.</dd></dl></li><li><dl><dt>100n+6 &#x3D; $O$(n)</dt><dd>When c&#x3D;101, n<sub>0</sub> &#x3D; 6, 100n+6 $\le$ 101n for all n $\ge$ 6. </dd></dl></li><li><dl><dt>10n<sup>2</sup>+4n+2 &#x3D; $O$(n<sup>2</sup>)</dt><dd>When c&#x3D;11, n<sub>0</sub> &#x3D; 5, 10n<sup>2</sup>+4n+2 $\le$ 11n<sup>2</sup> for all n $\ge$ 5. </dd></dl></li><li><h3 id="Properties"><a href="#Properties" class="headerlink" title="Properties"></a><strong>Properties</strong></h3><ul><li>f(n) &#x3D; $O$(g(n)) states that $O$(g(n)) is an <span style="color:yellow"> upper bound </span> of f(n), so n &#x3D; $O$(n) &#x3D; $O$(n<sup>2.5</sup>) &#x3D; $O$(n<sup>3</sup>) &#x3D; $O$(n<sup>n</sup>). However, we want g(n) <span style="color:yellow"> as small as possible </span>.</li><li>Big-O refers to <span style="color:yellow"> worst-case running time </span> of a program.</li></ul></li></ul><h2 id="Big-Omega-Omega"><a href="#Big-Omega-Omega" class="headerlink" title="Big-Omega($\Omega$)"></a><strong>Big-Omega($\Omega$)</strong></h2><h3 id="Definition-1"><a href="#Definition-1" class="headerlink" title="Definition"></a><strong>Definition</strong></h3><ul><li>f(n) &#x3D; $\Omega$(g(n)) iff $\exists$ <span style="color:yellow">  c, n<sub>0</sub> &gt; 0 </span> such that <span style="color:yellow">f(n)$\ge$ c $\cdot$ g(n) </span> $\forall$ <span style="color:yellow"> n  $\ge$ n<sub>0</sub> </span>.</li></ul><h3 id="Examples-1"><a href="#Examples-1" class="headerlink" title="Examples"></a><strong>Examples</strong></h3><ul><li><dl><dt>3n+2 &#x3D; $\Omega$(n)</dt><dd>When c&#x3D;3, n<sub>0</sub> &#x3D; 1, 3n+2 $\ge$ 3n $\forall$ n $\ge$ 1.</dd></dl></li><li><dl><dt>100n+6 &#x3D; $\Omega$(n)</dt><dd>When c&#x3D;100, n<sub>0</sub> &#x3D; 1, 100n+6 $\ge$ 100n $\forall$ n $\ge$ 1.  </dd></dl></li><li><dl><dt>10n<sup>2</sup>+4n+2 &#x3D; $\Omega$(n<sup>2</sup>)</dt><dd>When c&#x3D;1, n<sub>0</sub> &#x3D; 1, 10n<sup>2</sup>+4n+2 $\ge$ n<sup>2</sup> $\forall$ n $\ge$ 1.</dd></dl></li></ul><h3 id="Properties-1"><a href="#Properties-1" class="headerlink" title="Properties"></a><strong>Properties</strong></h3><ul><li>f(n) &#x3D; $\Omega$(g(n)) states that $\Omega$(g(n)) is a <span style="color:yellow"> lower bound </span> of f(n).</li><li>$\Omega$ refers to <span style="color:yellow"> best-case running time </span> of a program.</li></ul><h2 id="Big-Theta-theta"><a href="#Big-Theta-theta" class="headerlink" title="Big-Theta($\theta$)"></a><strong>Big-Theta($\theta$)</strong></h2><h3 id="Definition-2"><a href="#Definition-2" class="headerlink" title="Definition"></a><strong>Definition</strong></h3><ul><li>f(n) &#x3D; $\theta$(g(n)) iff <span style="color:yellow"> f(n) &#x3D; $O$(g(n)) </span> and <span style="color:yellow"> f(n) &#x3D; $\Omega$(g(n))</span>.</li></ul><h3 id="Examples-2"><a href="#Examples-2" class="headerlink" title="Examples"></a><strong>Examples</strong></h3><ul><li>3n+2 &#x3D; $\theta$(n)</li><li>100n+6 &#x3D; $\theta$(n)</li><li>10n<sup>2</sup>+4n+2 &#x3D; $\theta$(n<sup>2</sup>)</li></ul><h3 id="Properties-2"><a href="#Properties-2" class="headerlink" title="Properties"></a><strong>Properties</strong></h3><ul><li>f(n) &#x3D; $\theta$(g(n)) states that $\theta$(g(n)) is a <span style="color:yellow"> tight bound </span> of f(n).</li><li>$\theta$ refers to <span style="color:yellow"> average-case running time </span >of a program.</li></ul><h2 id="Cheat-Sheets"><a href="#Cheat-Sheets" class="headerlink" title="Cheat Sheets"></a><strong>Cheat Sheets</strong></h2><p><img src="https://pic4.zhimg.com/80/v2-bea9f0ddbc2d810e9feba3f3cc8b2b7f_720w.webp" alt="Data Structure Operations"><br><img src="https://pic4.zhimg.com/80/v2-c9074ce39abbdebd1120451bf657e67f_720w.webp" alt="Array Sorting"></p><h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><ul><li><a href="https://www.google.com/url?sa=t&rct=j&q=&esrc=s&source=web&cd=&ved=2ahUKEwjr647gjoiEAxX2hq8BHQilDfMQFnoECBEQAQ&url=https://www.bigocheatsheet.com/&usg=AOvVaw0j8XV1sZ0vh9PgRFBYyAHO&opi=89978449">Big-O Algorithm Complexity Cheat Sheet</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>Algorithm</category>
      
      <category>Time Complexity</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Algorithm</tag>
      
      <tag>Time Complexity</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
