<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Unity Compute Shader</title>
    <link href="/notes/2024/06/12/unity-render-1/"/>
    <url>/notes/2024/06/12/unity-render-1/</url>
    
    <content type="html"><![CDATA[<p>相信大家在遊戲中都有看過一些很複雜炫泡的特效，一定會很好奇到底怎麼做到不會 lag 的效果的，像是各種複雜的粒子效果、大量物體同時移動、物理模擬等等。</p><p><img src="/notes/./images/unity-render-1/ComputeShaderDemo.gif" alt="Compute Shader Demo"></p><p><img src="/notes/./images/unity-render-1/ComputeShaderDemo1.gif" alt="Compute Shader Demo"></p><p>這些酷酷特效的背後到底做了哪些工作呢？這篇文章將來探討如何在 Unity 使用 Compute Shader 加速計算，還會提及一些比較常見的優化遊戲效能的技術。</p><p>本文非常長，且內容有點 Hardcore，內容涉及到 CPU 和 GPU 的協作、Shader 的應用、HLSL 等等，可能需要一些圖學的背景知識會比較好理解，算是比較進階的教學。</p><h2 id="CPU、GPU-基本介紹"><a href="#CPU、GPU-基本介紹" class="headerlink" title="CPU、GPU 基本介紹"></a>CPU、GPU 基本介紹</h2><p>大家都知道，GPU (顯示卡) 是用來處理各種圖形渲染的工作，想要暢玩 3A 大作必定要先升級你的顯卡。那麼 GPU 為什麼有能力處理遊戲渲染呢？只用 CPU 不行嗎？</p><p>事實上是可以的 XD，只是非常非常慢，下面這個影片就沒有用 GPU，單純用最猛的 CPU 去跑 GTA-5，結果是跑得動的，但是 FPS 低到不行，根本玩不下去</p><iframe width = "100%" height = "315" src="//www.youtube.com/embed/oDIaHj-CGSI" frameborder="0" allowfullscreen></iframe><br><br><p>至於為什麼會這樣，就要先了解兩者的工作差異，這邊就拿最近最紅的 NVDIA Demo 的範例來介紹</p><p><img src="https://j.gifs.com/mL45Op.gif" alt="NVDIA CPU Example"></p><p>CPU 就像是一個天才，什麼都會、什麼都能做，能夠精確地完成任務，但是只能一項一項做。</p><p>在你的電腦中，CPU 扮演著大腦的角色，負責處理各種複雜的工作，處理作業系統和應用程式的所有運算任務，像是讓不斷切換正在執行的程式，讓它們看起來好像在同時執行一樣，或是處理你滑鼠點擊、鍵盤輸入等等，最底層的硬體都是 CPU 負責的。</p><p><img src="https://miro.medium.com/v2/resize:fit:924/1*aQQcuLKQgFKEECPhkEKTqQ.gif" alt="NVDIA GPU Example"></p><p>而 GPU 就像是一堆普通人，每個人只會做相同類型的普通計算，人與人之間的工作沒有關聯，不會影響彼此。這些人沒辦法做複雜的工作，但是它們可以<strong>同時工作</strong>，完成大量計算的任務。</p><p>在圖形渲染中，以最簡單的例子來講，我們會需要去處理每個 Vertex 的 Transformation，把模型的每個 vertex 投影到螢幕上 (每個 vertex 要乘上相同的變換矩陣)。我們還要處理每個 Pixel 的 Lighting (每個 Pixel 要乘上相同的光照計算公式)…</p><p>可以看到，每個 vertex、pixel 都要做相同的工作 (乘上某某東西)，這時候就可以利用 GPU 強大的平行計算能力，快速處理這些<strong>大量且相同的工作</strong>。</p><p><img src="https://angus945.github.io/learn/compute-shader/compute-shader-basis/cpu-vs-gpu.gif" alt="CPU vs GPU"></p><p>事實上，現代 CPU 通常都有 4核、8核等等，也擁有平行計算的能力，但是跟 GPU 的上百、上千核來比還是相形見絀，當然這邊不是說 CPU 就比不上 GPU，只能說兩者擅長的工作不同。</p><h2 id="GPGPU-General-Purpose-GPU-computing"><a href="#GPGPU-General-Purpose-GPU-computing" class="headerlink" title="GPGPU (General-Purpose GPU computing)"></a>GPGPU (General-Purpose GPU computing)</h2><p>最近幾年 NVDIA 的市值蒸蒸日上，全因為 NVDIA 在十幾年前下的一步棋，也就是推出 CUDA (NVDIA 對 GPGPU 的正式名稱)。當時 NVDIA 投入了大量的資金成本在研發 CUDA，外界卻是質疑一片，完全沒人看好這個操作，誰知道在 2024 年的現在，這成為自駕車發展、加密貨幣挖礦、AI 時代的關鍵。</p><p><img src="https://blogs.nvidia.com/wp-content/uploads/2018/05/AI-Revolution-Moores-Law.png" alt="CUDA"></p><p>那麼 GPGPU 到底是什麼？簡單來說，在早期 GPU 主要用於圖形處理，用於加速電腦圖形渲染。後來人們開始意識到 GPU 具有強大的平行運算潛力，不應該僅僅局限於圖形處理。黃仁勳看準這點，於是 NVIDIA 於 2006 年推出了 CUDA 平台，開啟了 GPU 通用計算的大門。CUDA 允許開發者使用類 C 語言（CUDA C&#x2F;C++）編寫程式來利用 GPU 的平行運算能力，加速各種類型的應用程式。</p><p>以前 GPU 都只拿來做圖形處理，要算數學都只能靠 CPU。現在，我們能夠把大量的數學丟給 GPU 做，利用他強大的平行計算能力快速出結果，不再侷限於圖形處理，這也是為什麼它叫做 GPGPU (圖形處理器通用計算)。</p><p>介紹了那麼多背景知識，終於可以進入 Unity 的部分了</p><h2 id="Compute-Shader"><a href="#Compute-Shader" class="headerlink" title="Compute Shader"></a>Compute Shader</h2><p>現在你已經了解 GPGPU 是什麼東西，而 Compute Shader 就是實現 GPGPU 技術之一，我們可以自己寫一些程式到 GPU 上面跑，也就是前面說的，<strong>我們能夠把大量的數學丟給 GPU 做，利用他強大的平行計算能力快速出結果</strong>，在 Unity 中我們就可以利用 Compute Shader，減少 CPU 的 loading，增加遊戲的效能。</p><p>想像一下現在有個場景長這樣</p><p><img src="/notes/./images/unity-render-1/ComputeShaderDemo2.gif" alt="Compute Shader Demo"></p><p>場景共有 1000000 個粒子，如果把這些全部都塞在 Update() (CPU 端) 裡面去算會是多可怕的事情，因此我們勢必要直接丟給 GPU 去計算並直接渲染出來，這時候就可以用 Compute Shader 來達成這件事情，CPU 做的事情就只有準備 Data (記憶體要給多少之類的) 以及啟動 Compute Shader。</p><h3 id="建立-Compute-Shader"><a href="#建立-Compute-Shader" class="headerlink" title="建立 Compute Shader"></a>建立 Compute Shader</h3><p>在 Unity 新增 Compute Shader，點擊右鍵就可以直接新增 .compute 檔案<br><img src="/notes/./images/unity-render-1/AddComputeShader.png" alt="Add Compute Shader"></p><p>這邊順便新增等等會用到的檔案</p><p><img src="/notes/./images/unity-render-1/Assets.png" alt="Assets"></p><h3 id="執行-Compute-Shader"><a href="#執行-Compute-Shader" class="headerlink" title="執行 Compute Shader"></a>執行 Compute Shader</h3><h4 id="Shader-端"><a href="#Shader-端" class="headerlink" title="Shader 端"></a>Shader 端</h4><p>Unity 的 Compute Shader 的語言是 HLSL，打開檔案可以看到下面的內容</p><p><img src="/notes/./images/unity-render-1/ComputeShaderStart.png" alt="Compute Shader Start Example"></p><ul><li><code>#pragma kernel CSMain</code> 代表的是 compute kernel，這個 kernel 會對應到檔案中的一個函式名稱。一個檔案可以定義多個 kernel，也就是多個 <code>#pragma kernel 函式名稱</code>，這樣你可以全部塞同個檔案，之後要用的時候就在 C# call <code>shader.FindKernel(函式名稱)</code> 就好。</li><li><code>RWTexture2D&lt;float4&gt; Result;</code> 是一個可以讀寫的 Texture，GPU 可以把算好的資料存進去，之後拿來用</li><li><code>[numthreads(8,8,1)]</code> 是你宣告一個 Thread Group 中有幾個 Thread，等等會詳細介紹</li><li><code>void CSMain (uint3 id : SV_DispatchThreadID)</code> <ul><li>CSMain 是你函式的名稱，也就是前面 <code>#pragma kernel</code> 對應到的函式</li><li><code>SV_DispatchThreadID</code> 是你當前 Thread 的 ID，這樣 GPU 才知道現在在算哪一個 Thread 的內容</li></ul></li><li><code>Result[id.xy] = float4(id.x &amp; id.y, (id.x &amp; 15)/15.0, (id.y &amp; 15)/15.0, 0.0);</code> 是你在這個 Thread 會寫進 Texture 的內容，可以看到這邊藉由 SV_DispatchThreadID 來判斷要寫進 Texture 的哪個位置</li></ul><h4 id="C-端"><a href="#C-端" class="headerlink" title="C# 端"></a>C# 端</h4><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-keyword">using</span> UnityEngine;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">TestComputeShader</span> : <span class="hljs-title">MonoBehaviour</span><br>&#123;<br>    [<span class="hljs-meta">SerializeField</span>] ComputeShader computeShader;<br>    [<span class="hljs-meta">SerializeField</span>] RenderTexture renderTexture;<br>    <span class="hljs-keyword">private</span> <span class="hljs-built_in">int</span> _kernelIndex;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Start</span>()</span><br>    &#123;<br>        _kernelIndex = computeShader.FindKernel(<span class="hljs-string">&quot;CSMain&quot;</span>);<br><br>        computeShader.SetTexture(_kernelIndex, <span class="hljs-string">&quot;Result&quot;</span>, renderTexture);<br>        computeShader.Dispatch(_kernelIndex, renderTexture.width / <span class="hljs-number">8</span>, renderTexture.height / <span class="hljs-number">8</span>, <span class="hljs-number">1</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>在這邊，我會傳入先前建立的 Compute Shader 和 RenderTexture。</p><ul><li><code>computeShader.FindKernel(&quot;CSMain&quot;);</code> 能夠去尋找對應的 kernel，並回傳一個 kernel index 之後做使用</li><li><code>computeShader.SetTexture(_kernelIndex, &quot;Result&quot;, renderTexture);</code> 綁定計算的資源。這邊的 “Result” 是對應到 Compute Shader 檔案裡的 <code>RWTexture2D&lt;float4&gt; Result;</code>。這邊在做的事情就是把 Result 的資料 Bind 到我自己的 Render Texture 上面，也就是說我更新 Result 等同於更新我的 Render Texture。</li><li><code>computeShader.Dispatch(_kernelIndex, renderTexture.width / 8, renderTexture.height / 8, 1);</code> 這個就是去啟動 Compute Shader，並宣告要有幾個 Thread Group，之後會詳細介紹。</li></ul><p>到目前為止，程式碼的部分已經完成，剩下一些步驟</p><p><img src="/notes/./images/unity-render-1/RenderTexture.png" alt="Render Texture"></p><p>記得要勾選 Random Write，這樣這個 Texture 才能支援 <a href="https://zh.wikipedia.org/zh-tw/%E9%9A%A8%E6%A9%9F%E5%AD%98%E5%8F%96">Random Access</a></p><p><img src="/notes/./images/unity-render-1/TestComputeShader.png" alt="Test Compute Shader"></p><p>隨便個物件，塞入我們剛剛建立好的 assets，並執行它</p><p><img src="/notes/./images/unity-render-1/TestComputeShaderResult.png" alt="Test Compute Shader Result"></p><p>遊戲開始的時候可以看到我們的 Render Texture 長相變了！上面的顏色就是你 Texture 上每個 Texel 的 RGB 值，也就是 Unity 預設的 <code>Result[id.xy] = float4(id.x &amp; id.y, (id.x &amp; 15)/15.0, (id.y &amp; 15)/15.0, 0.0);</code>，float4 的四個參數就是 RGBA。這樣的結果代表你的 Compute Shader 確實有執行，並且成功把結果寫進你的 Texture 裡面。</p><h3 id="Thread-執行緒"><a href="#Thread-執行緒" class="headerlink" title="Thread 執行緒"></a>Thread 執行緒</h3><p>先來補一下剛剛挖的坑，也就是 <code>numthreads(8,8,1)</code> 和 <code>computeShader.Dispatch(_kernelIndex, renderTexture.width / 8, renderTexture.height / 8, 1)</code> 到底在做什麼</p><p>我們知道 GPU 具有強大的平行計算能力，那是因為 GPU 含有成千上萬個 Thread，每個 Thread 都能執行一個小程式。在 Compute Shader 中，一個 Kernel 會被分配到一堆 Thread 上面去執行 (像是剛剛的 CSMain)，因此我們要告訴 GPU 現在需要幾個 Thread。</p><p><img src="http://img.frankorz.com/dx-grid-of-thread-group.png" alt="Thread Group and Thread"></p><p>而在 GPU 中，一群 Thread 可以組成 Thread Group，一群 Thread Group 可以組成 Grid，且 Thread Group 和 Grid 都是三維的架構。因此</p><ul><li><code>numthreads(8,8,1)</code> 就是告訴 GPU 這個 Thread Group 的 XYZ 軸分別有幾個 Thread。</li><li><code>computeShader.Dispatch(_kernelIndex, renderTexture.width / 8, renderTexture.height / 8, 1)</code> 就是告訴 GPU 這個 Grid 的 XYZ 軸分別有幾個 Thread Group</li></ul><p>這樣的架構能讓我們更方便管理和使用計算的資源，所以這邊我就根據我的 Render Texture 解析度，來去分配 Thread 的數量</p><hr><h3 id="Uniform-Data"><a href="#Uniform-Data" class="headerlink" title="Uniform Data"></a>Uniform Data</h3><p>在 CPU 端除了綁定資源以外 (buffer、texture)，你也可以傳入一些 Uniform Data，這些 Data 在這次計算的時候是不會改變的，作為一個 Constant 來使用。</p><p>舉個例子，我現在想讓 GPU 有 <code>float Time</code> 可以使用，我想讓 Texture 的 G 值隨著時間去做改變</p><h4 id="Shader-端-1"><a href="#Shader-端-1" class="headerlink" title="Shader 端"></a>Shader 端</h4><p><img src="/notes/./images/unity-render-1/ComputeShaderExampleTime.png" alt="Compute Shader Example Time"></p><h4 id="C-端-1"><a href="#C-端-1" class="headerlink" title="C# 端"></a>C# 端</h4><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-keyword">using</span> UnityEngine;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">TestComputeShader</span> : <span class="hljs-title">MonoBehaviour</span><br>&#123;<br>    [<span class="hljs-meta">SerializeField</span>] ComputeShader computeShader;<br>    [<span class="hljs-meta">SerializeField</span>] RenderTexture renderTexture;<br>    <span class="hljs-keyword">private</span> <span class="hljs-built_in">int</span> _kernelIndex;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Start</span>()</span><br>    &#123;<br>        _kernelIndex = computeShader.FindKernel(<span class="hljs-string">&quot;CSMain&quot;</span>);<br><br>        computeShader.SetTexture(_kernelIndex, <span class="hljs-string">&quot;Result&quot;</span>, renderTexture);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Update</span>()</span><br>    &#123;<br>        computeShader.SetFloat(<span class="hljs-string">&quot;_Time&quot;</span>, Time.time);<br>        computeShader.Dispatch(_kernelIndex, renderTexture.width / <span class="hljs-number">8</span>, renderTexture.height / <span class="hljs-number">8</span>, <span class="hljs-number">1</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="結果"><a href="#結果" class="headerlink" title="結果"></a>結果</h4><p><img src="/notes/./images/unity-render-1/ComputeShaderDemo3.gif" alt="Compute Shader Demo"></p><p>現在你已經知道怎麼在 Unity 中建立並啟動 Compute Shader，並輸出一個簡單的結果，你也可以試著改改看 Compute Shader 的內容，輸出各種不同的結果</p><p><img src="/notes/./images/unity-render-1/MoreComputeShaderExample.gif" alt="More Compute Shader Example"></p><p>以上這些都是透過 GPU 去計算出來的結果，更多範例可以參考 <a href="https://www.shadertoy.com/">Shader Toy</a>，不過要注意的是這網站使用的語言是 <strong>GLSL</strong>，而且是寫在 <strong>Fragment Shader</strong> 上面，這裡提供的例子使用的語言是 <strong>HLSL</strong>，而且是寫在<strong>Compute Shader</strong>上面。接下來會介紹更多 Compute Shader 的應用方式</p><h2 id="移動大量物體"><a href="#移動大量物體" class="headerlink" title="移動大量物體"></a>移動大量物體</h2><p>現在，先定個目標：我希望在場景中渲染 16384 個物件，並同時移動它們，某物件的下一個位置是根據當前位置去計算的，因此彼此之間不會互相影響。</p><p>這裡我提供四種不同的方法，逐漸優化遊戲的效能。</p><h3 id="一般寫法"><a href="#一般寫法" class="headerlink" title="一般寫法"></a>一般寫法</h3><p>最一般的寫法很直覺，直接在 Start() 建立 16384 個物件並儲存起來。接著，在 Update() 中開個 for 迴圈遍歷所有物件，根據當前位置去改變物件下一偵的位置</p><h4 id="C-端-2"><a href="#C-端-2" class="headerlink" title="C# 端"></a>C# 端</h4><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-keyword">private</span> GameObject[] _Cubes;<br><span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> Instances = <span class="hljs-number">16384</span>;<br><br><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">InitCubes</span>()</span><br>&#123;<br>    _Cubes = <span class="hljs-keyword">new</span> GameObject[Instances];<br>    <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>; i &lt; _Cubes.Length; i++)<br>    &#123;<br>        _Cubes[i] = GameObject.CreatePrimitive(PrimitiveType.Cube);<br>        _Cubes[i].transform.localScale = <span class="hljs-keyword">new</span> Vector3(<span class="hljs-number">10</span>, <span class="hljs-number">10</span>, <span class="hljs-number">10</span>);<br>        _Cubes[i].transform.position = <span class="hljs-keyword">new</span> Vector3(i * <span class="hljs-number">2</span>, <span class="hljs-number">0</span>, transform.position.z);<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Start</span>()</span><br>&#123;<br>    InitCubes();<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Update</span>()</span><br>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>; i &lt; _Cubes.Length; i++)<br>    &#123;<br>        <span class="hljs-built_in">float</span> x = _Cubes[i].transform.position.x;<br>        <span class="hljs-built_in">float</span> y = _Cubes[i].transform.position.y;<br>        <span class="hljs-built_in">float</span> z = _Cubes[i].transform.position.z;<br><br>        <span class="hljs-comment">// 我隨便亂寫的位置移動公式</span><br>        Vector3 newPos = <span class="hljs-keyword">new</span> Vector3(<br>                (<span class="hljs-built_in">float</span>)x,<br>                (<span class="hljs-built_in">float</span>)(Math.Tan(x / <span class="hljs-number">500</span> + Time.time) - Math.Cos(x / <span class="hljs-number">10</span> + z / <span class="hljs-number">200</span> + Time.time)) * <span class="hljs-number">100</span>,<br>                (<span class="hljs-built_in">float</span>)Math.Sin(x / <span class="hljs-number">10</span> + y / <span class="hljs-number">200</span> - Time.time) * <span class="hljs-number">200</span><br>            );<br>        _Cubes[i].transform.position = newPos;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h4><p><img src="/notes/./images/unity-render-1/Naive.gif" alt="Naive"></p><p>可以發現這種直白作法的 FPS 差不多是 24 FPS，代表一秒只能畫 24 張，最主要原因就是 CPU loading 太大，拖累了進度</p><h3 id="比較好的做法-Compute-Shader-CPU-Read-Back"><a href="#比較好的做法-Compute-Shader-CPU-Read-Back" class="headerlink" title="比較好的做法 (Compute Shader + CPU Read Back)"></a>比較好的做法 (Compute Shader + CPU Read Back)</h3><p>第二種做法是把計算所有物件位置的任務丟給 GPU 去算，算出每個物件下一個位置的資料，最後 CPU 只要負責等待結果回傳，根據 GPU 算好的資料去更新物件的位置</p><h4 id="Shader-端-2"><a href="#Shader-端-2" class="headerlink" title="Shader 端"></a>Shader 端</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">pragma</span> kernel CSMain</span><br><br>RWStructuredBuffer&lt;float3&gt; CubeBuffer;<br><span class="hljs-type">float</span> Time;<br><br>[numthreads(<span class="hljs-number">1024</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>)]<br><span class="hljs-type">void</span> <span class="hljs-title function_">CSMain</span> <span class="hljs-params">(uint3 id : SV_DispatchThreadID)</span><br>&#123;<br>    <span class="hljs-type">float</span> x = CubeBuffer[id.x].x;<br>    <span class="hljs-type">float</span> y = CubeBuffer[id.x].y;<br>    <span class="hljs-type">float</span> z = CubeBuffer[id.x].z;<br><br>    <span class="hljs-comment">// 我亂寫的計算位置的公式</span><br>    CubeBuffer[id.x] = float3(<br>            x, <br>            (<span class="hljs-built_in">tan</span>(x/<span class="hljs-number">500</span>+ Time) - <span class="hljs-built_in">cos</span>(x/<span class="hljs-number">10</span>+z/<span class="hljs-number">200</span> + Time))*<span class="hljs-number">100</span>, <br>            <span class="hljs-built_in">sin</span>(x/<span class="hljs-number">10</span>+y/<span class="hljs-number">200</span> - Time)*<span class="hljs-number">200</span><br>        );<br>&#125;<br></code></pre></td></tr></table></figure><p>這邊有一個 Buffer，內容包含所有物件的位置，接著根據當前位置去計算下一個位置，再存回 Buffer 即可。</p><h4 id="C-端-3"><a href="#C-端-3" class="headerlink" title="C# 端"></a>C# 端</h4><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-keyword">public</span> ComputeShader computeShader;<br><span class="hljs-keyword">private</span> <span class="hljs-built_in">int</span> _kernelIndex;<br><span class="hljs-keyword">private</span> ComputeBuffer _CubeBuffer;<br><span class="hljs-keyword">private</span> Vector3[] _CubeArray;<br><span class="hljs-keyword">private</span> GameObject[] _Cubes;<br><span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> Instances = <span class="hljs-number">16384</span>;<br><br><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">InitCubes</span>()</span><br>&#123;<br>    _Cubes = <span class="hljs-keyword">new</span> GameObject[Instances];<br>    _CubeArray = <span class="hljs-keyword">new</span> Vector3[Instances];<br>    <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>; i &lt; _CubeArray.Length; i++)<br>    &#123;<br>        _Cubes[i] = GameObject.CreatePrimitive(PrimitiveType.Cube);<br>        _Cubes[i].transform.localScale = <span class="hljs-keyword">new</span> Vector3(<span class="hljs-number">10</span>, <span class="hljs-number">10</span>, <span class="hljs-number">10</span>);<br>        _Cubes[i].transform.position = <span class="hljs-keyword">new</span> Vector3(i * <span class="hljs-number">2</span>, <span class="hljs-number">0</span>, transform.position.z);<br>        _CubeArray[i] = _Cubes[i].transform.position;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">InitShader</span>()</span><br>&#123;<br>    _kernelIndex = computeShader.FindKernel(<span class="hljs-string">&quot;CSMain&quot;</span>);<br>    _CubeBuffer = <span class="hljs-keyword">new</span> ComputeBuffer(_CubeArray.Length, <span class="hljs-number">3</span> * <span class="hljs-keyword">sizeof</span>(<span class="hljs-built_in">float</span>));<br>    _CubeBuffer.SetData(_CubeArray);<br>    computeShader.SetBuffer(_kernelIndex, <span class="hljs-string">&quot;CubeBuffer&quot;</span>, _CubeBuffer);<br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Start</span>()</span><br>&#123;<br>    InitCubes();<br>    InitShader();<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Update</span>()</span><br>&#123;<br>    computeShader.SetFloat(<span class="hljs-string">&quot;Time&quot;</span>, Time.time);<br>    computeShader.Dispatch(_kernelIndex, <span class="hljs-number">16</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>);<br><br>    <span class="hljs-comment">// 等待結果回傳</span><br>    _CubeBuffer.GetData(_CubeArray);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>; i &lt; _CubeArray.Length; i++)<br>    &#123;<br>        _Cubes[i].transform.position = _CubeArray[i];<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>我們在 Start() 的地方宣告一個 Buffer，內容包含剛開始所有物件的位置，接著就是傳入資料，啟動 Compute Shader。在 Update() 裡面的 <code>GetData()</code> 可以 Block 下面的程式碼，也就是直到 GPU 算好後才繼續往下執行操作，避免發生 GPU 還沒算好 CPU 就讀取的情況。</p><p>注意，這裡我宣告 16 個 Thread Group，每個 Thread Group 有 1024 個 Thread，一共有 16 * 1024 &#x3D; 16384 個 Thread，剛剛好等於我們擁有的物件數量，也就是說每個 Thread 就負責處理一個物件的位置。</p><p>只要最後數量對就好，有幾個 Thread Group、每個 Thread Group 有幾個 Thread 不是很重要。為了方便，我只宣告在 X 象限，這樣讀取 Buffer 的時候可以直接用 <code>CubeBuffer[id.x]</code> 就好，不用管 id.y、id.z</p><h4 id="效果-1"><a href="#效果-1" class="headerlink" title="效果"></a>效果</h4><p><img src="/notes/./images/unity-render-1/CPUReadBack.gif" alt="CPU Read Back"></p><p>可以發現這種作法的 FPS 有些許上升，來到了 32，代表一秒可以畫 32 張，但是上升的很不明顯，最主要就是因為 CPU 在等 GPU 算完才繼續執行，白白浪費時間在那邊掛機。雖然 GPU 確實算很快，但這作法不能完全發揮 Compute Shader 的功力</p><h3 id="GPU-Instancing"><a href="#GPU-Instancing" class="headerlink" title="GPU Instancing"></a>GPU Instancing</h3><p>這邊先介紹一個跟 Compute Shader 比較沒關的優化方法，也就是 GPU Instancing。當我們想繪製大量且相同的 Mesh 時，可以用這種方法。</p><h4 id="Draw-call"><a href="#Draw-call" class="headerlink" title="Draw call"></a>Draw call</h4><p>在 Unity 中，CPU 命令 GPU 去繪製 Mesh + Material 的步驟就是 <strong>Draw Call</strong>，當場景中有大量物件時，意味這我們會有很多 CPU 命令 GPU 做事的步驟，但是這是一件非常花時間的事情</p><p><img src="/notes/./images/unity-render-1/Bottleneck.png" alt="CPU Bottleneck"></p><p>既然我們要畫 Mesh 和 Material 都一樣，為什麼不畫一次就好？GPU instancing 的概念就像是告訴 GPU 說：「嘿，這些方塊都長得一樣，你只要畫一次，然後把它們放到對的地方就好。」，這樣就不需要重複告訴 GPU 如何畫每個方塊，而是告訴 GPU 如何畫一個方塊，然後告訴它在哪裡重複使用這個畫好的方塊。這種做法可以大幅提高效能。</p><h4 id="Shader-端-3"><a href="#Shader-端-3" class="headerlink" title="Shader 端"></a>Shader 端</h4><p>跟這邊沒關係，所以跟第二個做法一樣，不用改</p><h4 id="C-端-4"><a href="#C-端-4" class="headerlink" title="C# 端"></a>C# 端</h4><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-keyword">public</span> ComputeShader computeShader;<br><span class="hljs-keyword">private</span> <span class="hljs-built_in">int</span> _kernelIndex;<br><span class="hljs-keyword">private</span> ComputeBuffer _CubeBuffer;<br><span class="hljs-keyword">private</span> Vector3[] _CubeArray;<br><br><span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> Instances = <span class="hljs-number">16384</span>;<br><span class="hljs-keyword">public</span> Mesh mesh;<br><span class="hljs-keyword">public</span> Material material;<br><span class="hljs-keyword">private</span> List&lt;List&lt;Matrix4x4&gt;&gt; batches = <span class="hljs-keyword">new</span> List&lt;List&lt;Matrix4x4&gt;&gt;();<br><br><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">InitCubes</span>()</span><br>&#123;<br>    <span class="hljs-built_in">int</span> AddedMatrices = <span class="hljs-number">0</span>;<br>    _CubeArray = <span class="hljs-keyword">new</span> Vector3[Instances];<br>    batches.Add(<span class="hljs-keyword">new</span> List&lt;Matrix4x4&gt;());<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>; i &lt; Instances; i++)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (AddedMatrices &gt;= <span class="hljs-number">1000</span>)<br>        &#123;<br>            AddedMatrices = <span class="hljs-number">0</span>;<br>            batches.Add(<span class="hljs-keyword">new</span> List&lt;Matrix4x4&gt;());<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            AddedMatrices++;<br>            Vector3 position = <span class="hljs-keyword">new</span> Vector3(i * <span class="hljs-number">2</span>, <span class="hljs-number">0</span>, transform.position.z);<br>            batches[batches.Count - <span class="hljs-number">1</span>].Add(Matrix4x4.TRS(Vector3.zero, Quaternion.identity, Vector3.one * <span class="hljs-number">10f</span>));<br>            _CubeArray[i] = position;<br>        &#125;<br><br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">InitShader</span>()</span><br>&#123;<br>    _kernelIndex = computeShader.FindKernel(<span class="hljs-string">&quot;CSMain&quot;</span>);<br>    _CubeBuffer = <span class="hljs-keyword">new</span> ComputeBuffer(_CubeArray.Length, <span class="hljs-number">3</span> * <span class="hljs-keyword">sizeof</span>(<span class="hljs-built_in">float</span>));<br>    _CubeBuffer.SetData(_CubeArray);<br>    computeShader.SetBuffer(_kernelIndex, <span class="hljs-string">&quot;CubeBuffer&quot;</span>, _CubeBuffer);<br>    material.SetBuffer(<span class="hljs-string">&quot;CubeBuffer&quot;</span>, _CubeBuffer);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Start</span>()</span><br>&#123;<br>    InitCubes();<br>    InitShader();<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Update</span>()</span><br>&#123;<br>    computeShader.SetFloat(<span class="hljs-string">&quot;Time&quot;</span>, Time.time);<br>    material.SetFloat(<span class="hljs-string">&quot;Time&quot;</span>, Time.time);<br>    computeShader.Dispatch(_kernelIndex, <span class="hljs-number">16</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>);<br>    _CubeBuffer.GetData(_CubeArray);<br>    <span class="hljs-built_in">int</span> batchIndex = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>; i &lt; batches.Count; i++)<br>    &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> j = <span class="hljs-number">0</span>; j &lt; batches[i].Count; j++)<br>        &#123;<br>            batches[i][j] = Matrix4x4.TRS(<br>                _CubeArray[batchIndex], <br>                Quaternion.identity, <br>                Vector3.one * <span class="hljs-number">10f</span><br>            );<br>            batchIndex++;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>; i &lt; batches.Count; i++)<br>    &#123;<br>        Graphics.DrawMeshInstanced(mesh, <span class="hljs-number">0</span>, material, batches[i]);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>這邊就不詳細介紹程式碼，有興趣可以去看 <a href="https://www.youtube.com/watch?v=eyaxqo9JV4w">Unity GPU Instancing in less than 7 minutes!</a> 的教學。</p><p>簡單來說就是把一些物件打包成一個個 Batch（<code>DrawMeshInstanced</code>一個 batch 只能塞 1023 個東西，所以這邊讓他超過 1000 的話就裝進下個 batch）。然後把每個物件的 Transform Matrix 算好，之後就傳給 GPU 去移動位置。</p><h4 id="效果-2"><a href="#效果-2" class="headerlink" title="效果"></a>效果</h4><p><img src="/notes/./images/unity-render-1/GPUInstancing.gif" alt="GPU Instancing"></p><p>可以發現這種作法大幅提升了效能，FPS 竟然能上升到 110 左右，可見 Draw Call 是多可怕的東西，這也叫做 CPU Bottleneck。另外，上圖中的 Batches 就是 Draw Call 的數量，從原本的 1000 多減少到 67。</p><p>然而，我們還沒發會 Compute Shader 真正的功用，這不是最快的，我們要更快，還要再快<br><img src="https://memes.tw/download-image?name=4a039a33933c7902c7bfbba3b62993dc.png" alt="Faster Faster Faster"></p><h3 id="Indirect-Rendering"><a href="#Indirect-Rendering" class="headerlink" title="Indirect Rendering"></a>Indirect Rendering</h3><p>仔細想想，我們第三種作法的流程是 </p><ol><li>CPU 宣告 Buffer，傳給 GPU (Compute Shader)</li><li>GPU (Compute Shader) 算好新的位置，傳給 CPU</li><li>CPU 掛機耍廢，直到 GPU 算好回傳 CPU 才接收新位置的資料</li><li>CPU 把剛接收的資料傳給 GPU 去渲染</li></ol><p>有沒有覺得哪裡怪怪的？CPU 耍廢到接收資料，剛收到又傳回 GPU？？為什麼不直接全部交給 GPU 做就好，可以減少 CPU 和 GPU 之間的溝通成本，還可以讓 CPU 去忙其他事情，Indirect Rendering 就是這種概念。</p><p>為了讓 GPU 直接讀取新位置資料，去更新當前位置，我們會需要自己寫 Vertex Shader。Vertex Shader 就是運行在 GPU 上，用來控制每個 Vertex 的相關訊息。想法就是，Compute Shader 算好後存在 Buffer 中（Buffer 就是一段記憶體），接著我們讓 Vertex Shader 直接去讀取這段記憶體位置，直接取得 Buffer 裡面的內容，更新 Vertex 的位置，省略掉 CPU 等待、回傳的步驟，全程都在 GPU 上面執行。</p><h4 id="Compute-Shader-端"><a href="#Compute-Shader-端" class="headerlink" title="Compute Shader 端"></a>Compute Shader 端</h4><p>不用改</p><h4 id="Vertex-Shader-端"><a href="#Vertex-Shader-端" class="headerlink" title="Vertex Shader 端"></a>Vertex Shader 端</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs c">uniform float4x4 _ObjectToWorld;<br>StructuredBuffer&lt;float3&gt; CubeBuffer;<br><br>v2f <span class="hljs-title function_">vert</span> <span class="hljs-params">(appdata v, uint instanceID : SV_InstanceID)</span><br>&#123;<br>    v2f o;<br>    float4 bufferData = float4(CubeBuffer[instanceID], <span class="hljs-number">0</span>);<br>    float4x4 translationMatrix = float4x4(<br>        <span class="hljs-number">1.0</span>, <span class="hljs-number">0.0</span>, <span class="hljs-number">0.0</span>, bufferData.x,<br>        <span class="hljs-number">0.0</span>, <span class="hljs-number">1.0</span>, <span class="hljs-number">0.0</span>, bufferData.y,<br>        <span class="hljs-number">0.0</span>, <span class="hljs-number">0.0</span>, <span class="hljs-number">1.0</span>, bufferData.z,<br>        <span class="hljs-number">0.0</span>, <span class="hljs-number">0.0</span>, <span class="hljs-number">0.0</span>, <span class="hljs-number">1.0</span><br>    );<br><br>    float4 worldPos = mul(translationMatrix, mul(_ObjectToWorld, v.vertex));<br>    o.vertex = UnityObjectToClipPos(worldPos);<br>    <span class="hljs-keyword">return</span> o;<br>&#125;<br></code></pre></td></tr></table></figure><p>這裡就不介紹 Vertex Shader 怎麼寫了，因此省略掉很多程式碼，只是想表達我讀取 Buffer，並做成 Transform Matrix 去更新頂點位置的過程</p><h4 id="C-端-5"><a href="#C-端-5" class="headerlink" title="C# 端"></a>C# 端</h4><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-keyword">public</span> ComputeShader computeShader;<br><span class="hljs-keyword">private</span> <span class="hljs-built_in">int</span> _kernelIndex;<br><span class="hljs-keyword">private</span> ComputeBuffer _CubeBuffer;<br><span class="hljs-keyword">private</span> Vector3[] _CubeArray;<br><br><span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> Instances = <span class="hljs-number">16384</span>;<br><span class="hljs-keyword">public</span> Mesh mesh;<br><span class="hljs-keyword">public</span> Material material;<br><br><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">InitCubes</span>()</span><br>&#123;<br>    _CubeArray = <span class="hljs-keyword">new</span> Vector3[Instances];<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>; i &lt; Instances; i++)<br>    &#123;<br>        Vector3 position = <span class="hljs-keyword">new</span> Vector3(i * <span class="hljs-number">2</span>, <span class="hljs-number">0</span>, transform.position.z);<br>        _CubeArray[i] = position;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">InitShader</span>()</span><br>&#123;<br>    _kernelIndex = computeShader.FindKernel(<span class="hljs-string">&quot;CSMain&quot;</span>);<br>    _CubeBuffer = <span class="hljs-keyword">new</span> ComputeBuffer(_CubeArray.Length, <span class="hljs-number">3</span> * <span class="hljs-keyword">sizeof</span>(<span class="hljs-built_in">float</span>));<br>    _CubeBuffer.SetData(_CubeArray);<br>    computeShader.SetBuffer(_kernelIndex, <span class="hljs-string">&quot;CubeBuffer&quot;</span>, _CubeBuffer);<br>    material.SetBuffer(<span class="hljs-string">&quot;CubeBuffer&quot;</span>, _CubeBuffer);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Start</span>()</span><br>&#123;<br>    InitCubes();<br>    InitShader();<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Update</span>()</span><br>&#123;<br>    computeShader.SetFloat(<span class="hljs-string">&quot;Time&quot;</span>, Time.time);<br>    computeShader.Dispatch(_kernelIndex, <span class="hljs-number">16</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>);<br><br>    RenderParams rp = <span class="hljs-keyword">new</span> RenderParams(material);<br>    rp.matProps = <span class="hljs-keyword">new</span> MaterialPropertyBlock();<br>    rp.matProps.SetMatrix(<span class="hljs-string">&quot;_ObjectToWorld&quot;</span>, Matrix4x4.TRS(Vector3.zero, Quaternion.identity, Vector3.one * <span class="hljs-number">10f</span>));<br>    Graphics.RenderMeshPrimitives(rp, mesh, <span class="hljs-number">0</span>, Instances);<br>&#125;<br></code></pre></td></tr></table></figure><p>跟第三種作法不同的地方是，我的 GPU instancing 換成 <code>RenderMeshPrimitives</code>，因為我要自己寫移動 Vertex Shader 的程式碼，而且 <code>RenderMeshPrimitives</code> 沒有 Batch Size 的限制，會是更好的選擇。</p><h4 id="效果-3"><a href="#效果-3" class="headerlink" title="效果"></a>效果</h4><p><img src="/notes/./images/unity-render-1/IndirectRendering.gif" alt="Indirect Rendering"></p><p>透過這種作法，可以看到我的 FPS 上升到 340 左右，畫面順到不行，不說我還以為我的 CPU 特別猛（gif 看起來會比較卡，最後有附上影片）</p><p>不過這種作法也有缺點，就是不能辨別碰撞、Culling 等等，因為<strong>實際上物體並沒有移動，只有物體的頂點移動而已</strong>，不過這也可以透過其他方式解決，只是原本 CPU 會幫你弄好，現在要自己寫比較麻煩而已，不過效能會好上許多。</p><p><img src="/notes/./images/unity-render-1/Culling.gif" alt="Culling"></p><p>像上面這個例子，物體原本的位置沒有移動，只有頂點在移動，因此當原本的位置跑到鏡頭外面，會直接被 Culling 掉，只能自己寫判斷了。</p><hr><p>以上是本篇教學，花費我許多時間，不過我也因此學到很多東西。</p><p>我認為 Computer Shader 真的是一項值得深入探討的技術，像是<strong>原神</strong>渲染技術分享中就有提到，有超過一半的 Feature 都有使用到 Compute Shader 優化。了解遊戲背後的技術是一件很有趣的事情，這樣玩遊戲跑圖的時候都可以想到一些有的沒的，感謝你看到這邊。</p><ul><li>專案 Github: <a href="https://github.com/933yee/UnityIndirectRendering">https://github.com/933yee/UnityIndirectRendering</a></li></ul><iframe width = "100%" height = "400" src="//www.youtube.com/embed/6tuy4PYs7Rc" frameborder="0" allowfullscreen></iframe><h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><ul><li><a href="https://frankorz.com/2021/04/17/compute-shader/">Compute Shader 简介</a> 大推這篇文章</li><li><a href="https://home.gamer.com.tw/creationDetail.php?sn=5476357">[達人專欄] 【筆記】初學指南，計算著色器</a></li><li><a href="https://www.youtube.com/watch?v=7lp8O53VDOo">Unity compute shader for vertices deform</a></li><li><a href="https://www.youtube.com/watch?v=ap6fdCmE1JA">https://www.youtube.com/watch?v=ap6fdCmE1JA</a></li><li><a href="https://www.youtube.com/watch?v=s-cDYtNfsl4">Real-time fluid simulation in Unity</a></li><li><a href="https://www.youtube.com/watch?v=IrYPkSIvpIw">Unity Performance Tips: Draw Calls</a></li><li><a href="https://www.youtube.com/watch?v=eyaxqo9JV4w">Unity GPU Instancing in less than 7 minutes!</a></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>Unity</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Compiler 筆記 (4)</title>
    <link href="/notes/2024/05/16/compiler-4/"/>
    <url>/notes/2024/05/16/compiler-4/</url>
    
    <content type="html"><![CDATA[<blockquote><p>參考 清華大學 李政崑老師 編譯器設計講義</p></blockquote><h2 id="leftmost-and-rightmost-derivations"><a href="#leftmost-and-rightmost-derivations" class="headerlink" title="leftmost and rightmost derivations"></a>leftmost and rightmost derivations</h2><p><a href="https://www.youtube.com/watch?v=K_aMajzrKF4">leftmost and rightmost derivations</a></p><ul><li><p>介紹 leftmost 和 rightmost derivations</p></li><li><p>A left-recursive grammar might cause a recursive-decent parser, even one with back-tracking, into an infinite loop.</p><ul><li>That is, when we try to expand A, we may eventually find ourselves again trying to expand A without having consumed any input.</li></ul></li></ul><h2 id="Push-Down-Automata"><a href="#Push-Down-Automata" class="headerlink" title="Push Down Automata"></a>Push Down Automata</h2><p><a href="https://www.youtube.com/watch?app=desktop&v=4ejIAmp_Atw">Pushdown Automata (Introduction)</a></p><ul><li>PDA &#x3D; Finite State Machine + A Stack</li><li>PDA &#x3D; A input tape + A finite control unit + A stack with infinite size</li></ul><p><a href="https://www.youtube.com/watch?v=JtRyd7Svlew">Pushdown Automata (Formal Definition)</a></p><ul><li>介紹 $M &#x3D; (Q, \Sigma, \Gamma, \delta, q_0, Z_0, F)$</li><li>介紹 $\delta$ 的 input 和 output</li></ul><p><a href="https://www.youtube.com/watch?v=eY7fwj5jvC4">Pushdown Automata (Graphical Notation)</a></p><ul><li>介紹 PDA 的 Graph </li><li>介紹簡單範例: L &#x3D; {$0^n 1^n$ | n $\ge$ 0}</li><li>一個 language 會被 accept 一旦它能達到 final state 或讓 stack 變空</li></ul><p><a href="https://www.youtube.com/watch?v=TEQcJybMMFU">Pushdown Automata Example (Even Palindrome) PART-1</a></p><ul><li>介紹 Palindrome 的範例</li></ul><p><a href="https://www.youtube.com/watch?v=BxA-aI2dyRo">Pushdown Automata Example (Even Palindrome) PART-2</a></p><ul><li>繼續上一部的 Palindrome 範例，詳細介紹 epsilon 是怎麼運作的</li></ul><h2 id="Parsers"><a href="#Parsers" class="headerlink" title="Parsers"></a>Parsers</h2><p><a href="https://www.youtube.com/watch?v=OIKL6wFjFOo">Introduction to Parsers</a></p><ul><li>介紹 Bottom-up Parser vs. Top-Down Parser</li><li>整個 Parser 的生態結構</li></ul><h3 id="Top-Down-Parsers"><a href="#Top-Down-Parsers" class="headerlink" title="Top Down Parsers"></a>Top Down Parsers</h3><p><a href="https://www.youtube.com/watch?v=iddRD8tJi44">Top Down Parsers - Recursive Descent Parsers</a></p><ul><li>介紹 Recursive Descent Parsers</li></ul><p><a href="https://www.youtube.com/watch?v=v_wvcuJ6mGY">Top Down Parsers - LL(1) Parsers</a></p><ul><li>介紹 Recursive Descent Parsers 的名稱由來</li><li>介紹 LL(1) 的名稱由來</li><li>簡單介紹 FIRST() 和 FOLLOW()</li></ul><p><a href="https://www.youtube.com/watch?v=oOCromcWnfc">FIRST() and FOLLOW() Functions</a></p><ul><li>非常重要的影片，多看幾次</li><li>計算 FIRST() 從下往上，計算 FOLLOW() 從上往下</li><li>FISRT() 要包含 epsilon，FOLLOW() 不用</li><li>計算 FOLLOW() 前最好把 FIRST() 都列好，比較好算</li><li>FOLLOW() 大概可以分成三種 case，就算遇到 epsilon 也一樣方法：<ol><li>The <strong>following terminal symbol</strong> will be selected as FOLLOW</li><li>The <strong>FIRST of the following non-terminal</strong> will be selected as FOLLOW</li><li>If it is the right most in the RHS, the <strong>FOLLOW of the LHS</strong> will be selected</li></ol></li></ul><p><a href="https://www.youtube.com/watch?v=jv4dwxukVvU">FIRST() and FOLLOW() Functions – Solved Problems (Set 1)</a></p><ul><li>更多 FIRST FOLLOW 的範例</li><li>不確定 Q2 Q3 的 FIRST(S) 要不要有 epsilon<ul><li>不用，如果全部產生的 non-terminals FIRST 都有 epsilon 才要</li></ul></li></ul><p><a href="https://www.youtube.com/watch?v=Wo4bafMawFA">FIRST() and FOLLOW() Functions – Solved Problems (Set 2)</a></p><ul><li>更多 FIRST FOLLOW 的範例</li></ul><p><a href="https://www.youtube.com/watch?v=DT-cbznw9aY">LL(1) Parsing Table</a></p><p><a href="https://www.youtube.com/watch?v=clkHOgZUGWU">LL(1) Parsing</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>Compilier</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Flutter 筆記</title>
    <link href="/notes/2024/05/03/flutter-notes/"/>
    <url>/notes/2024/05/03/flutter-notes/</url>
    
    <content type="html"><![CDATA[<figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;package:flutter/material.dart&#x27;</span>;<br><br><span class="hljs-keyword">void</span> main() &#123;<br>  runApp(<span class="hljs-keyword">const</span> MyApp());<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyApp</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">StatelessWidget</span> </span>&#123;<br>  <span class="hljs-keyword">const</span> MyApp(&#123;Key? key&#125;) : <span class="hljs-keyword">super</span>(key: key);<br><br>  <span class="hljs-meta">@override</span><br>  Widget build(BuildContext context) &#123;<br>    <span class="hljs-keyword">return</span> MaterialApp(<br>      debugShowCheckedModeBanner: <span class="hljs-keyword">false</span>,<br>      home: Scaffold(<br>          backgroundColor: Colors.deepPurple[<span class="hljs-number">200</span>],<br>          appBar: AppBar(<br>              title: <span class="hljs-keyword">const</span> Text(<span class="hljs-string">&quot;Hello World&quot;</span>),<br>              backgroundColor: Colors.deepPurple[<span class="hljs-number">400</span>],<br>              elevation: <span class="hljs-number">0</span>,<br>              leading: IconButton(<br>                icon: <span class="hljs-keyword">const</span> Icon(Icons.menu),<br>                onPressed: () &#123;&#125;,<br>              )),<br>          body: Center(<br>              child: Container(<br>            height: <span class="hljs-number">500</span>,<br>            width: <span class="hljs-number">300</span>,<br>            decoration: BoxDecoration(<br>              color: Colors.deepPurple,<br>              borderRadius: BorderRadius.circular(<span class="hljs-number">20</span>),<br>            ),<br>            padding: <span class="hljs-keyword">const</span> EdgeInsets.all(<span class="hljs-number">20</span>),<br>            child: Column(<br>              mainAxisAlignment: MainAxisAlignment.spaceEvenly,<br>              children: [<br>                <span class="hljs-keyword">const</span> Text(<br>                  <span class="hljs-string">&quot;Hello World&quot;</span>,<br>                  style: TextStyle(<br>                    color: Colors.white,<br>                    fontSize: <span class="hljs-number">30</span>,<br>                  ),<br>                ),<br>                Expanded(<br>                  child: Container(<br>                    color: Colors.deepPurple[<span class="hljs-number">100</span>],<br>                  ),<br>                ),<br>                Expanded(<br>                  flex: <span class="hljs-number">2</span>,<br>                  child: Container(<br>                    color: Colors.deepPurple[<span class="hljs-number">200</span>],<br>                  ),<br>                ),<br>                Expanded(<br>                  child: Container(<br>                    color: Colors.deepPurple[<span class="hljs-number">300</span>],<br>                  ),<br>                )<br>              ],<br>            ),<br>          ))),<br>    );<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/notes/./images/flutter-notes/demo1.png" alt="demo 1"></p><h3 id="ListView-and-GridView"><a href="#ListView-and-GridView" class="headerlink" title="ListView and GridView"></a>ListView and GridView</h3><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyApp</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">StatelessWidget</span> </span>&#123;<br>  MyApp(&#123;Key? key&#125;) : <span class="hljs-keyword">super</span>(key: key);<br>  <span class="hljs-keyword">final</span> <span class="hljs-built_in">List</span> names = [<br>    <span class="hljs-string">&#x27;John&#x27;</span>,<br>    <span class="hljs-string">&#x27;Doe&#x27;</span>,<br>    <span class="hljs-string">&#x27;Smith&#x27;</span>,<br>    <span class="hljs-string">&#x27;Alex&#x27;</span>,<br>    <span class="hljs-string">&#x27;James&#x27;</span>,<br>    <span class="hljs-string">&#x27;Robert&#x27;</span>,<br>    <span class="hljs-string">&#x27;William&#x27;</span>,<br>    <span class="hljs-string">&#x27;David&#x27;</span>,<br>    <span class="hljs-string">&#x27;Richard&#x27;</span>,<br>    <span class="hljs-string">&#x27;Joseph&#x27;</span><br>  ];<br>  <span class="hljs-meta">@override</span><br>  Widget build(BuildContext context) &#123;<br>    <span class="hljs-keyword">return</span> MaterialApp(<br>        debugShowCheckedModeBanner: <span class="hljs-keyword">false</span>,<br>        home: Scaffold(<br>            body: Column(<br>          children: [<br>            Expanded(<br>              child: ListView.builder(<br>                  itemCount: <span class="hljs-number">10</span>,<br>                  itemBuilder: (context, index) =&gt; ListTile(<br>                        title: Text(<span class="hljs-string">&#x27;Item <span class="hljs-subst">$index</span>&#x27;</span>),<br>                      )),<br>            ),<br>            Expanded(<br>              flex: <span class="hljs-number">2</span>,<br>              child: GridView.builder(<br>                itemCount: <span class="hljs-number">64</span>,<br>                gridDelegate: SliverGridDelegateWithFixedCrossAxisCount(<br>                    crossAxisCount: <span class="hljs-number">8</span>),<br>                itemBuilder: (count, index) =&gt; Container(<br>                    color: Colors.deepPurple, margin: EdgeInsets.all(<span class="hljs-number">2</span>)),<br>              ),<br>            ),<br>            Expanded(<br>              child: ListView.builder(<br>                  itemCount: names.length,<br>                  itemBuilder: (context, index) =&gt;<br>                      ListTile(title: Text(names[index]))),<br>            ),<br>          ],<br>        )));<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/notes/./images/flutter-notes/demo2.png" alt="demo 2"></p><h3 id="Stack-and-GestureDetector"><a href="#Stack-and-GestureDetector" class="headerlink" title="Stack and GestureDetector"></a>Stack and GestureDetector</h3><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyApp</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">StatelessWidget</span> </span>&#123;<br>  MyApp(&#123;Key? key&#125;) : <span class="hljs-keyword">super</span>(key: key);<br><br>  <span class="hljs-keyword">void</span> userTapped() &#123;<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;User tapped the container&quot;</span>);<br>  &#125;<br><br>  <span class="hljs-meta">@override</span><br>  Widget build(BuildContext context) &#123;<br>    <span class="hljs-keyword">return</span> MaterialApp(<br>        debugShowCheckedModeBanner: <span class="hljs-keyword">false</span>,<br>        home: Scaffold(<br>          body: Center(<br>            child: Stack(<br>              alignment: Alignment.center,<br>              children: [<br>                Container(<br>                  height: <span class="hljs-number">300</span>,<br>                  width: <span class="hljs-number">300</span>,<br>                  color: Colors.deepPurple,<br>                ),<br>                Container(<br>                  height: <span class="hljs-number">200</span>,<br>                  width: <span class="hljs-number">200</span>,<br>                  color: Colors.deepPurple[<span class="hljs-number">400</span>],<br>                ),<br>                GestureDetector(<br>                  onTap: userTapped,<br>                  child: Container(<br>                    height: <span class="hljs-number">100</span>,<br>                    width: <span class="hljs-number">100</span>,<br>                    color: Colors.deepPurple[<span class="hljs-number">200</span>],<br>                    child: Center(child: Text(<span class="hljs-string">&quot;Tap me!&quot;</span>)),<br>                  ),<br>                )<br>              ],<br>            ),<br>          ),<br>        ));<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/notes/./images/flutter-notes/demo3.png" alt="demo 3"></p><h3 id="Navigation"><a href="#Navigation" class="headerlink" title="Navigation"></a>Navigation</h3><h4 id="Main"><a href="#Main" class="headerlink" title="Main"></a>Main</h4><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-keyword">void</span> main() &#123;<br>  runApp(MyApp());<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyApp</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">StatelessWidget</span> </span>&#123;<br>  <span class="hljs-keyword">const</span> MyApp(&#123;Key? key&#125;) : <span class="hljs-keyword">super</span>(key: key);<br><br>  <span class="hljs-meta">@override</span><br>  Widget build(BuildContext context) &#123;<br>    <span class="hljs-keyword">return</span> MaterialApp(<br>      debugShowCheckedModeBanner: <span class="hljs-keyword">false</span>,<br>      home: FirstPage(),<br>      routes: &#123;<br>        <span class="hljs-string">&#x27;/second&#x27;</span>: (context) =&gt; <span class="hljs-keyword">const</span> SecondPage(),<br>      &#125;,<br>    );<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="First-Page"><a href="#First-Page" class="headerlink" title="First Page"></a>First Page</h4><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FirstPage</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">StatelessWidget</span> </span>&#123;<br>  <span class="hljs-keyword">const</span> FirstPage(&#123;<span class="hljs-keyword">super</span>.key&#125;);<br><br>  <span class="hljs-meta">@override</span><br>  Widget build(BuildContext context) &#123;<br>    <span class="hljs-keyword">return</span> Scaffold(<br>      appBar: AppBar(title: <span class="hljs-keyword">const</span> Text(<span class="hljs-string">&#x27;First Page&#x27;</span>)),<br>      body: Center(<br>          child: ElevatedButton(<br>        child: Text(<span class="hljs-string">&quot;Go to Second Page&quot;</span>),<br>        onPressed: () &#123;<br>          Navigator.pushNamed(context, <span class="hljs-string">&#x27;/second&#x27;</span>);<br>        &#125;,<br>      )),<br>    );<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="Second-Page"><a href="#Second-Page" class="headerlink" title="Second Page"></a>Second Page</h4><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SecondPage</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">StatelessWidget</span> </span>&#123;<br>  <span class="hljs-keyword">const</span> SecondPage(&#123;<span class="hljs-keyword">super</span>.key&#125;);<br><br>  <span class="hljs-meta">@override</span><br>  Widget build(BuildContext context) &#123;<br>    <span class="hljs-keyword">return</span> Scaffold(<br>      appBar: AppBar(title: <span class="hljs-keyword">const</span> Text(<span class="hljs-string">&#x27;Second Page&#x27;</span>)),<br>    );<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="Drawer-And-Navigation"><a href="#Drawer-And-Navigation" class="headerlink" title="Drawer And Navigation"></a>Drawer And Navigation</h3><h4 id="Main-1"><a href="#Main-1" class="headerlink" title="Main"></a>Main</h4><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-keyword">void</span> main() &#123;<br>  runApp(MyApp());<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyApp</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">StatelessWidget</span> </span>&#123;<br>  <span class="hljs-keyword">const</span> MyApp(&#123;Key? key&#125;) : <span class="hljs-keyword">super</span>(key: key);<br><br>  <span class="hljs-meta">@override</span><br>  Widget build(BuildContext context) &#123;<br>    <span class="hljs-keyword">return</span> MaterialApp(<br>      debugShowCheckedModeBanner: <span class="hljs-keyword">false</span>,<br>      home: FirstPage(),<br>      routes: &#123;<br>        <span class="hljs-string">&#x27;/firstpage&#x27;</span>: (context) =&gt; FirstPage(),<br>        <span class="hljs-string">&#x27;/homepage&#x27;</span>: (context) =&gt; HomePage(),<br>        <span class="hljs-string">&#x27;/settingspage&#x27;</span>: (context) =&gt; SettingsPage(),<br>      &#125;,<br>    );<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="First-Page-1"><a href="#First-Page-1" class="headerlink" title="First Page"></a>First Page</h4><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FirstPage</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">StatelessWidget</span> </span>&#123;<br>  <span class="hljs-keyword">const</span> FirstPage(&#123;<span class="hljs-keyword">super</span>.key&#125;);<br><br>  <span class="hljs-meta">@override</span><br>  Widget build(BuildContext context) &#123;<br>    <span class="hljs-keyword">return</span> Scaffold(<br>      appBar: AppBar(title: <span class="hljs-keyword">const</span> Text(<span class="hljs-string">&#x27;First Page&#x27;</span>)),<br>      drawer: Drawer(<br>          backgroundColor: Colors.deepPurple[<span class="hljs-number">100</span>],<br>          child: Column(<br>            children: [<br>              DrawerHeader(<br>                  child: Icon(<br>                Icons.favorite,<br>                size: <span class="hljs-number">48</span>,<br>              )),<br>              ListTile(<br>                leading: Icon(Icons.home),<br>                title: <span class="hljs-keyword">const</span> Text(<span class="hljs-string">&#x27;Home&#x27;</span>),<br>                onTap: () &#123;<br>                  Navigator.pop(context);<br>                  Navigator.pushNamed(context, <span class="hljs-string">&#x27;/homepage&#x27;</span>);<br>                &#125;,<br>              ),<br>              ListTile(<br>                leading: Icon(Icons.settings),<br>                title: <span class="hljs-keyword">const</span> Text(<span class="hljs-string">&#x27;Settings&#x27;</span>),<br>                onTap: () &#123;<br>                  Navigator.pop(context);<br>                  Navigator.pushNamed(context, <span class="hljs-string">&#x27;/settingspage&#x27;</span>);<br>                &#125;,<br>              ),<br>            ],<br>          )),<br>    );<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="Home"><a href="#Home" class="headerlink" title="Home"></a>Home</h4><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HomePage</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">StatelessWidget</span> </span>&#123;<br>  <span class="hljs-keyword">const</span> HomePage(&#123;<span class="hljs-keyword">super</span>.key&#125;);<br><br>  <span class="hljs-meta">@override</span><br>  Widget build(BuildContext context) &#123;<br>    <span class="hljs-keyword">return</span> Scaffold(<br>      appBar: AppBar(title: <span class="hljs-keyword">const</span> Text(<span class="hljs-string">&#x27;Home Page&#x27;</span>)),<br>    );<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/notes/./images/flutter-notes/demo4.png" alt="demo 4"></p><h3 id="Bottom-Navigation"><a href="#Bottom-Navigation" class="headerlink" title="Bottom Navigation"></a>Bottom Navigation</h3><h4 id="Main-2"><a href="#Main-2" class="headerlink" title="Main"></a>Main</h4><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-keyword">void</span> main() &#123;<br>  runApp(MyApp());<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyApp</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">StatelessWidget</span> </span>&#123;<br>  <span class="hljs-keyword">const</span> MyApp(&#123;Key? key&#125;) : <span class="hljs-keyword">super</span>(key: key);<br><br>  <span class="hljs-meta">@override</span><br>  Widget build(BuildContext context) &#123;<br>    <span class="hljs-keyword">return</span> MaterialApp(<br>      debugShowCheckedModeBanner: <span class="hljs-keyword">false</span>,<br>      home: FirstPage(),<br>      routes: &#123;<br>        <span class="hljs-string">&#x27;/firstpage&#x27;</span>: (context) =&gt; FirstPage(),<br>        <span class="hljs-string">&#x27;/homepage&#x27;</span>: (context) =&gt; HomePage(),<br>        <span class="hljs-string">&#x27;/settingspage&#x27;</span>: (context) =&gt; SettingsPage(),<br>      &#125;,<br>    );<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="First-Page-StateFul"><a href="#First-Page-StateFul" class="headerlink" title="First Page (StateFul)"></a>First Page (StateFul)</h4><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FirstPage</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">StatefulWidget</span> </span>&#123;<br>  FirstPage(&#123;<span class="hljs-keyword">super</span>.key&#125;);<br><br>  <span class="hljs-meta">@override</span><br>  State&lt;FirstPage&gt; createState() =&gt; _FirstPageState();<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">_FirstPageState</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">State</span>&lt;<span class="hljs-title">FirstPage</span>&gt; </span>&#123;<br>  <span class="hljs-built_in">int</span> _selectedIndex = <span class="hljs-number">0</span>;<br><br>  <span class="hljs-keyword">void</span> _navigateBottomBar(<span class="hljs-built_in">int</span> index) &#123;<br>    setState(() &#123;<br>      _selectedIndex = index;<br>    &#125;);<br>  &#125;<br><br>  <span class="hljs-keyword">final</span> <span class="hljs-built_in">List</span> _pages = [<br>    HomePage(),<br>    ProfilePage(),<br>    SettingsPage(),<br>  ];<br><br>  <span class="hljs-meta">@override</span><br>  Widget build(BuildContext context) &#123;<br>    <span class="hljs-keyword">return</span> Scaffold(<br>      appBar: AppBar(title: <span class="hljs-keyword">const</span> Text(<span class="hljs-string">&#x27;First Page&#x27;</span>)),<br>      body: _pages[_selectedIndex],<br>      bottomNavigationBar: BottomNavigationBar(<br>        currentIndex: _selectedIndex,<br>        onTap: _navigateBottomBar,<br>        items: [<br>          BottomNavigationBarItem(icon: Icon(Icons.home), label: <span class="hljs-string">&#x27;Home&#x27;</span>),<br>          BottomNavigationBarItem(icon: Icon(Icons.person), label: <span class="hljs-string">&#x27;Profile&#x27;</span>),<br>          BottomNavigationBarItem(<br>              icon: Icon(Icons.settings), label: <span class="hljs-string">&#x27;Settings&#x27;</span>),<br>        ],<br>      ),<br>    );<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="Hone"><a href="#Hone" class="headerlink" title="Hone"></a>Hone</h4><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HomePage</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">StatelessWidget</span> </span>&#123;<br>  <span class="hljs-keyword">const</span> HomePage(&#123;<span class="hljs-keyword">super</span>.key&#125;);<br><br>  <span class="hljs-meta">@override</span><br>  Widget build(BuildContext context) &#123;<br>    <span class="hljs-keyword">return</span> Scaffold(<br>      body: Center(child: Text(<span class="hljs-string">&#x27;Home Page&#x27;</span>)),<br>      backgroundColor: Colors.amber[<span class="hljs-number">100</span>],<br>    );<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/notes/./images/flutter-notes/demo5.png" alt="demo 5"></p><h3 id="Counter-App"><a href="#Counter-App" class="headerlink" title="Counter App"></a>Counter App</h3><h4 id="Main-3"><a href="#Main-3" class="headerlink" title="Main"></a>Main</h4><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-keyword">void</span> main() &#123;<br>  runApp(<span class="hljs-keyword">const</span> MyApp());<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyApp</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">StatelessWidget</span> </span>&#123;<br>  <span class="hljs-keyword">const</span> MyApp(&#123;<span class="hljs-keyword">super</span>.key&#125;);<br><br>  <span class="hljs-meta">@override</span><br>  Widget build(BuildContext context) &#123;<br>    <span class="hljs-keyword">return</span> MaterialApp(<br>      debugShowCheckedModeBanner: <span class="hljs-keyword">false</span>,<br>      home: CounterPage(),<br>    );<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="Counter-Page"><a href="#Counter-Page" class="headerlink" title="Counter Page"></a>Counter Page</h4><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CounterPage</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">StatefulWidget</span> </span>&#123;<br>  <span class="hljs-keyword">const</span> CounterPage(&#123;<span class="hljs-keyword">super</span>.key&#125;);<br><br>  <span class="hljs-meta">@override</span><br>  State&lt;CounterPage&gt; createState() =&gt; _CounterPageState();<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">_CounterPageState</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">State</span>&lt;<span class="hljs-title">CounterPage</span>&gt; </span>&#123;<br>  <span class="hljs-built_in">int</span> _counter = <span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">void</span> _incrementCounter() &#123;<br>    setState(() &#123;<br>      _counter++;<br>    &#125;);<br>  &#125;<br><br>  <span class="hljs-meta">@override</span><br>  Widget build(BuildContext context) &#123;<br>    <span class="hljs-keyword">return</span> Scaffold(<br>      body: Center(<br>        child: Column(<br>          mainAxisAlignment: MainAxisAlignment.center,<br>          children: [<br>            Text(<span class="hljs-string">&quot;You pushed the button this many times:&quot;</span>),<br>            Text(<br>              <span class="hljs-string">&#x27;<span class="hljs-subst">$_counter</span>&#x27;</span>,<br>              style: TextStyle(fontSize: <span class="hljs-number">40</span>),<br>            ),<br>            ElevatedButton(<br>                onPressed: _incrementCounter, child: Text(<span class="hljs-string">&quot;Increment&quot;</span>))<br>          ],<br>        ),<br>      ),<br>    );<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="TextField"><a href="#TextField" class="headerlink" title="TextField"></a>TextField</h3><h4 id="Main-4"><a href="#Main-4" class="headerlink" title="Main"></a>Main</h4><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-keyword">void</span> main() &#123;<br>  runApp(<span class="hljs-keyword">const</span> MyApp());<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyApp</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">StatelessWidget</span> </span>&#123;<br>  <span class="hljs-keyword">const</span> MyApp(&#123;<span class="hljs-keyword">super</span>.key&#125;);<br><br>  <span class="hljs-meta">@override</span><br>  Widget build(BuildContext context) &#123;<br>    <span class="hljs-keyword">return</span> MaterialApp(<br>      debugShowCheckedModeBanner: <span class="hljs-keyword">false</span>,<br>      home: ToDoPage(),<br>    );<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="ToDoPage"><a href="#ToDoPage" class="headerlink" title="ToDoPage"></a>ToDoPage</h4><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ToDoPage</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">StatefulWidget</span> </span>&#123;<br>  <span class="hljs-keyword">const</span> ToDoPage(&#123;<span class="hljs-keyword">super</span>.key&#125;);<br><br>  <span class="hljs-meta">@override</span><br>  State&lt;ToDoPage&gt; createState() =&gt; _ToDoPageState();<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">_ToDoPageState</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">State</span>&lt;<span class="hljs-title">ToDoPage</span>&gt; </span>&#123;<br>  TextEditingController myController = TextEditingController();<br>  <span class="hljs-built_in">String</span> greetingMessage = <span class="hljs-string">&quot;&quot;</span>;<br><br>  <span class="hljs-keyword">void</span> greetUser() &#123;<br>    setState(() &#123;<br>      greetingMessage = <span class="hljs-string">&quot;Hello, <span class="hljs-subst">$&#123;myController.text&#125;</span>&quot;</span>;<br>    &#125;);<br>  &#125;<br><br>  <span class="hljs-meta">@override</span><br>  Widget build(BuildContext context) &#123;<br>    <span class="hljs-keyword">return</span> Scaffold(<br>      body: Center(<br>        child: Padding(<br>          padding: <span class="hljs-keyword">const</span> EdgeInsets.all(<span class="hljs-number">25.0</span>),<br>          child: Column(<br>            mainAxisAlignment: MainAxisAlignment.center,<br>            children: [<br>              Text(greetingMessage),<br>              TextField(<br>                controller: myController,<br>                decoration: InputDecoration(<br>                  border: OutlineInputBorder(),<br>                  labelText: <span class="hljs-string">&quot;Enter your name&quot;</span>,<br>                ),<br>              ),<br>              ElevatedButton(onPressed: greetUser, child: Text(<span class="hljs-string">&quot;Tap&quot;</span>))<br>            ],<br>          ),<br>        ),<br>      ),<br>    );<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/notes/./images/flutter-notes/demo6.png" alt="demo 6"></p>]]></content>
    
    
    
    <tags>
      
      <tag>Flutter</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>專題</title>
    <link href="/notes/2024/04/27/%E5%B0%88%E9%A1%8C/"/>
    <url>/notes/2024/04/27/%E5%B0%88%E9%A1%8C/</url>
    
    <content type="html"><![CDATA[<h1 id="還沒看完"><a href="#還沒看完" class="headerlink" title="還沒看完"></a>還沒看完</h1><ul><li><p><a href="https://gamedevelopment.tutsplus.com/forward-rendering-vs-deferred-rendering--gamedev-12342a">Forward Rendering vs. Deferred Rendering</a></p></li><li><p><a href="https://zhuanlan.zhihu.com/p/447161601">UE4笔记-自定义一个UPrimitiveComponent-0</a><br>比較粗略的教學</p></li><li><p><a href="https://www.bilibili.com/read/cv27302584/?jump_opus=1">UE5自定义MeshComponent解析</a></p></li><li><p><a href="https://zhuanlan.zhihu.com/p/580731018">虚幻引擎 自定义VertexFactory（一）</a></p></li><li><p><a href="https://medium.com/@lordned/unreal-engine-4-rendering-overview-part-1-c47f2da65346">Unreal Engine 4 Rendering Part 1: Introduction</a></p></li><li><p><a href="https://unreal.shadeup.dev/docs/instancing">Indirect Instancing in UE5</a><br>只有 project，沒有介紹，有點難懂</p></li><li><p><a href="https://dev.epicgames.com/documentation/en-us/unreal-engine/designing-visuals-rendering-and-graphics-with-unreal-engine">Designing Visuals, Rendering, and Graphics</a><br>UE5 官方文件</p></li><li><p><a href="https://www.cnblogs.com/timlly/p/14588598.html#322-%E4%BB%8Efprimitivesceneproxy%E5%88%B0fmeshbatch">剖析虚幻渲染体系（03）- 渲染机制</a><br>大佬寫的，看不完</p></li></ul><h1 id="看完的"><a href="#看完的" class="headerlink" title="看完的"></a>看完的</h1><h2 id="Creating-a-Custom-Mesh-Component-in-UE4"><a href="#Creating-a-Custom-Mesh-Component-in-UE4" class="headerlink" title="Creating a Custom Mesh Component in UE4"></a>Creating a Custom Mesh Component in UE4</h2><p>教你怎麼在 UE4 寫自己的 Mesh Component，內容包含 Custom Mesh Component、Scene Proxy、Vertex Factory、Vertex Shader 等介紹，還有附 Project Github，可惜介紹沒有寫完，且不會再更新了<br><a href="https://medium.com/realities-io/creating-a-custom-mesh-component-in-ue4-part-0-intro-2c762c5f0cd6">Creating a Custom Mesh Component in UE4 | Part 0: Intro</a><br><a href="https://medium.com/realities-io/creating-a-custom-mesh-component-in-ue4-part-1-an-in-depth-explanation-of-vertex-factories-4a6fd9fd58f2">Creating a Custom Mesh Component in UE4 | Part 1: An In-depth Explanation of Vertex Factories</a><br><a href="https://medium.com/realities-io/creating-a-custom-mesh-component-in-ue4-part-2-implementing-the-vertex-factory-4e21e51a1e10">Creating a Custom Mesh Component in UE4 | Part 2: Implementing the Vertex Factory</a><br><a href="https://medium.com/realities-io/creating-a-custom-mesh-component-in-ue4-part-3-the-mesh-components-scene-proxy-6965a3ea4cc9">Creating a Custom Mesh Component in UE4 | Part 3: The Mesh Component’s Scene Proxy</a></p><p>翻譯版<br><a href="https://zhuanlan.zhihu.com/p/361322348">创建虚幻自定义Mesh组件 | Part 1: 深度解释顶点工厂（Vertex Factory）</a><br><a href="https://zhuanlan.zhihu.com/p/361601866">创建虚幻自定义Mesh组件 | Part 2: 顶点工厂的实现</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>計算機圖學 筆記</title>
    <link href="/notes/2024/04/12/computer-graphics/"/>
    <url>/notes/2024/04/12/computer-graphics/</url>
    
    <content type="html"><![CDATA[<blockquote><p>參考 清華大學 李潤容老師 計算機圖學講義</p></blockquote><h1 id="Introduction-to-Computer-Graphics"><a href="#Introduction-to-Computer-Graphics" class="headerlink" title="Introduction to Computer Graphics"></a>Introduction to Computer Graphics</h1><h2 id="What-is-Computer-Graphics"><a href="#What-is-Computer-Graphics" class="headerlink" title="What is Computer Graphics"></a>What is Computer Graphics</h2><table><thead><tr><th align="center">Input</th><th align="center">Output</th><th align="center">Category</th></tr></thead><tbody><tr><td align="center">Image</td><td align="center">Image</td><td align="center">Image Processing</td></tr><tr><td align="center">Description Images</td><td align="center">Description</td><td align="center">Computer Vision&#x2F; Pattern Recognition</td></tr><tr><td align="center">Description</td><td align="center">Image</td><td align="center">Computer Graphics</td></tr></tbody></table><h3 id="Image-Processing"><a href="#Image-Processing" class="headerlink" title="Image Processing"></a>Image Processing</h3><ul><li>Performing various types of operations on an input image, and output an image with some useful information</li><li>Ex: Edge Detection, Image Compression</li></ul><h3 id="Computer-Vision-Pattern-Recognition"><a href="#Computer-Vision-Pattern-Recognition" class="headerlink" title="Computer Vision &#x2F; Pattern Recognition"></a>Computer Vision &#x2F; Pattern Recognition</h3><ul><li>Computer Vision<ul><li>Building a artificial system that obtain information from images</li></ul></li><li>Pattern Recognition<ul><li>Classify data based on either prior knowledge or on statistical information extracted from the patterns</li></ul></li><li>Ex: Object Detection, Tracking, Classification, Recognition</li></ul><h3 id="Computer-Graphics"><a href="#Computer-Graphics" class="headerlink" title="Computer Graphics"></a>Computer Graphics</h3><ul><li>Concern the pictorial synthesis of real or imaginary objects from their computer-based models</li><li>2D graphics<ul><li>Ex: Texts, 2D lines&#x2F; polygons&#x2F; images…</li></ul></li><li>3D graphics<ul><li>Project the objects onto 2D projection plane and render</li></ul></li><li>Types<ul><li>Passive Stereo<ul><li>The 3D effect is achieved by presenting slightly different images to each eye using techniques such as polarization or color filtering.</li><li>Ex:Anaglyphic 3D glasses (紅藍 3D 眼鏡)、Polarization 3D glasses (偏光 3D 眼鏡)</li></ul></li><li>Active Stereo<ul><li>Involve synchronizing shutter glasses or alternate-frame sequencing with the display to present different images to each eye at high speed.</li><li>Ex: Shutter Glasses、VR display</li></ul></li></ul></li></ul><h1 id="Graphics-Hardware-System"><a href="#Graphics-Hardware-System" class="headerlink" title="Graphics Hardware System"></a>Graphics Hardware System</h1><h2 id="GPU"><a href="#GPU" class="headerlink" title="GPU"></a>GPU</h2><ul><li>Graphics Processing Unit</li><li>Very high complexity with massively parallelism</li></ul><h2 id="Frame-Buffer"><a href="#Frame-Buffer" class="headerlink" title="Frame Buffer"></a>Frame Buffer</h2><ul><li>Memory location for storing display data during processing<ul><li>Front buffer (Current display buffer)</li><li>Back buffer (Nexy display buffer)</li></ul></li></ul><h3 id="Screen-Display-Refresh"><a href="#Screen-Display-Refresh" class="headerlink" title="Screen&#x2F; Display Refresh"></a>Screen&#x2F; Display Refresh</h3><ul><li>Retrieve <strong>front buffer</strong> pixels for displaying pixel colors on screen</li><li>Constant refresh rate</li><li>Scan-line based display<ul><li>從左上往右，一行一行往下顯示</li></ul></li></ul><h3 id="Single-Buffering"><a href="#Single-Buffering" class="headerlink" title="Single Buffering"></a>Single Buffering</h3><ul><li>Display after rendering complete<ul><li>cannot render during display</li></ul></li><li>Rendering during displaying<ul><li>Display incomplete result</li><li>畫面可能會有黑黑的</li></ul></li></ul><p><img src="/notes/./images/computer-graphics/SingleBuffering.png" alt="Single Buffering"></p><h3 id="Double-Buffering"><a href="#Double-Buffering" class="headerlink" title="Double Buffering"></a>Double Buffering</h3><ul><li>A techinique to prevent from displaying incomplete frame</li></ul><p><img src="/notes/./images/computer-graphics/DoubleBuffering.png" alt="Double Buffering"></p><h3 id="Full-Screen-Display"><a href="#Full-Screen-Display" class="headerlink" title="Full Screen Display"></a>Full Screen Display</h3><ul><li>Uses Double Buffering or Triple Buffering</li><li>Flip display by changing <strong>display base address</strong> to corresponding buffer</li></ul><h3 id="Window-Mode-Display"><a href="#Window-Mode-Display" class="headerlink" title="Window Mode Display"></a>Window Mode Display</h3><ul><li>Uses Double Buffering or Triple Buffering</li><li>Flip display by using 2D bitblt to move <strong>back buffer</strong> frame on to <strong>front buffer</strong> display</li></ul><h1 id="3D-Graphics-Pipeline"><a href="#3D-Graphics-Pipeline" class="headerlink" title="3D Graphics Pipeline"></a>3D Graphics Pipeline</h1><ul><li>Almost everything you see on the display is processed by the graphics pipeline<ul><li>Windows UI、Video Games 等</li><li>不過像播影片就不算，它是直接寫到 frame buffer，沒有經過 graphics pipeline</li></ul></li><li>It is realized by graphics hardware (GPU) or by software (CPU)<ul><li>用 hardware 可以比較快，但如果沒有 GPU 加速，用 software (CPU) 也可以算</li></ul></li></ul><h2 id="Graphics-Rendering-Process"><a href="#Graphics-Rendering-Process" class="headerlink" title="Graphics Rendering Process"></a>Graphics Rendering Process</h2><p><img src="/notes/./images/computer-graphics/GraphicsRenderingProcess.png" alt="Graphics Rendering Process"></p><h3 id="3D-Graphics-Engine"><a href="#3D-Graphics-Engine" class="headerlink" title="3D Graphics Engine"></a>3D Graphics Engine</h3><ul><li>屬於硬體，Graphics pipeline 就在這邊</li></ul><h3 id="Driver"><a href="#Driver" class="headerlink" title="Driver"></a>Driver</h3><ul><li>不是所有的硬體可以解決所有問題，有些事情你會以為硬體幫你做，其實是 Driver 在做。有時候有 Bug，它會幫你用 Driver (software) 的方式繞過去，看起來是硬體修復了</li><li>做 Hardware 的人通常也負責做 Driver，雖然它算是軟體</li></ul><h2 id="Inside-a-3D-Graphics-Pipeline"><a href="#Inside-a-3D-Graphics-Pipeline" class="headerlink" title="Inside a 3D Graphics Pipeline"></a>Inside a 3D Graphics Pipeline</h2><h3 id="Fixed-Function-Pipeline"><a href="#Fixed-Function-Pipeline" class="headerlink" title="Fixed Function Pipeline"></a>Fixed Function Pipeline</h3><p>每個 Stage 功能都是寫死的，像是 Transform and Lighting，所以效果都看起來差不多，現在很少用</p><p><img src="https://cg2010studio.files.wordpress.com/2011/09/opengles_1x_pipeline.gif" alt="OpenGL ESv1.1"></p><h3 id="Programmable-Pipeline"><a href="#Programmable-Pipeline" class="headerlink" title="Programmable Pipeline"></a>Programmable Pipeline</h3><p>把 Fixed Function Pipeline 其中某幾個功能包裝成 Shader，讓 programmer 可以自己改，像是多了 Vertex Shader 來取代原本的 Transform and Lighting</p><p><img src="https://cg2010studio.com/wp-content/uploads/2011/09/opengles_2x_pipeline.gif" alt="OpenGL ESv2.0"></p><p><img src="/notes/./images/computer-graphics/Overviewofa3DGraphicsPipeline.png" alt="Overview of a 3D Graphics Pipeline"></p><h4 id="Modeling"><a href="#Modeling" class="headerlink" title="Modeling"></a>Modeling</h4><p><img src="/notes/./images/computer-graphics/Modeling.png" alt="Modeling"></p><h4 id="Transform"><a href="#Transform" class="headerlink" title="Transform"></a>Transform</h4><p>放大、縮小、平移、旋轉</p><ol><li>Geometrical Transformation (Model Transformation)</li></ol><ul><li>From <strong>Object Space</strong> to <strong>World Space</strong><ul><li>每個物體有自己的座標系</li></ul></li></ul><p><img src="/notes/./images/computer-graphics/GeometricalTransformation.png" alt="Geometrical Transformation"></p><ol start="2"><li>Viewing Transformation</li></ol><ul><li>From <strong>World Space</strong> to <strong>View Space</strong></li></ul><p><img src="/notes/./images/computer-graphics/ViewingTransformation.png" alt="Viewing Transformation"></p><ol start="3"><li>Projection Transformation</li></ol><ul><li>From <strong>View Space</strong> to <strong>Screen Space</strong></li></ul><p><img src="/notes/./images/computer-graphics/ProjectionTransformation.png" alt="Projection Transformation"></p><h4 id="Lighting"><a href="#Lighting" class="headerlink" title="Lighting"></a>Lighting</h4><p>Simulate the Effect of Light-Object Interaction</p><ul><li>簡化成 Ambient(環境光) + Diffuse(漫反射光) + Specular Reflection(鏡面光)</li></ul><p><img src="http://learnopengl.com/img/lighting/basic_lighting_phong.png" alt="Lighting"></p><ul><li><a href="https://learnopengl-cn.readthedocs.io/zh/latest/02%20Lighting/02%20Basic%20Lighting/">光照基础 - LearnOpenGL-CN</a></li></ul><h4 id="Triangle-Setup"><a href="#Triangle-Setup" class="headerlink" title="Triangle Setup"></a>Triangle Setup</h4><p>對於一個三角形，算出每邊的斜率，三個頂點的座標不一定是整數，但是畫的點座標必須是整數，所以要得到三角形內部的所有整數座標</p><p><img src="/notes/./images/computer-graphics/TriangleSetup.png" alt="Triangle Setup"></p><h4 id="Rasterization"><a href="#Rasterization" class="headerlink" title="Rasterization"></a>Rasterization</h4><ul><li>根據頂點的顏色，用內插法算出三角形內部的顏色</li></ul><p><img src="/notes/./images/computer-graphics/TriangleRasterization.png" alt="Triangle Rasterization"></p><ul><li>Line Rasterization</li></ul><p><img src="/notes/./images/computer-graphics/LineRasterization.png" alt="Line Rasterization"></p><h4 id="Hidden-Surface-Removal"><a href="#Hidden-Surface-Removal" class="headerlink" title="Hidden Surface Removal"></a>Hidden Surface Removal</h4><p>移除被擋住、看不到的地方</p><p><img src="https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcQtEhHXHQSecUmH7ZSasawmMxaeKglIcD1yOQ&usqp=CAU" alt="Hidden Surface Removal"></p><h4 id="Texture-Mapping"><a href="#Texture-Mapping" class="headerlink" title="Texture Mapping"></a>Texture Mapping</h4><p><img src="https://glasnost.itcarlow.ie/~powerk/GeneralGraphicsNotes/texturemapping/texture_mapping.jpg" alt="Texture Mapping"></p><h4 id="Rendering"><a href="#Rendering" class="headerlink" title="Rendering"></a>Rendering</h4><h5 id="Color-Composition"><a href="#Color-Composition" class="headerlink" title="Color Composition"></a>Color Composition</h5><p>Render with lighting and texturing<br><img src="/notes/./images/computer-graphics/ColorComposition.png" alt="Color Composition"></p><h5 id="Blending"><a href="#Blending" class="headerlink" title="Blending"></a>Blending</h5><p>Translucent Effect<br><img src="/notes/./images/computer-graphics/Blending.png" alt="Blending"><br>物體透明度和桌子透明度都變 50%，然後混合</p><h4 id="Advanced-Features"><a href="#Advanced-Features" class="headerlink" title="Advanced Features"></a>Advanced Features</h4><h5 id="Shadow"><a href="#Shadow" class="headerlink" title="Shadow"></a>Shadow</h5><ul><li>Hard Shadow</li><li>Soft Shadow</li></ul><p><img src="https://www.peachpit.com/content/images/chap3_0321316312/elementLinks/dir2_03_22.jpg" alt="Shadow"></p><h5 id="Anti-Aliasing"><a href="#Anti-Aliasing" class="headerlink" title="Anti-Aliasing"></a>Anti-Aliasing</h5><p>Smooth out the Jaggy Edges<br><img src="https://camo.githubusercontent.com/d02e9089abb4f56ece4a30705261fd7d9554947a8dc2f4e3006b358bb5700ca1/68747470733a2f2f686172647a6f6e652e65732f6170702f75706c6f6164732d686172647a6f6e652e65732f323032302f30342f416e74692d416c696173696e672d312e6a7067" alt="Anti-Aliasing"></p><h5 id="Shader"><a href="#Shader" class="headerlink" title="Shader"></a>Shader</h5><p><img src="/notes/./images/computer-graphics/Shader.png" alt="Shader"></p><h6 id="Vertex-Shader"><a href="#Vertex-Shader" class="headerlink" title="Vertex Shader"></a>Vertex Shader</h6><ul><li>Process vertices<ul><li>Transformation</li><li>Lighting </li><li>Displacement</li></ul></li><li>Operate on a single input vertex and produce a single output vertex</li></ul><h6 id="Tessellation-Geometry-Shader"><a href="#Tessellation-Geometry-Shader" class="headerlink" title="Tessellation&#x2F;Geometry Shader"></a>Tessellation&#x2F;Geometry Shader</h6><ul><li>近的時候可以切成很多小三角形，遠的時候切比較大</li><li>Process priitives<ul><li>Point sprite tessellation</li><li>Wide line tessellation</li><li>Shadow volume generation</li><li>Surface subdivision</li></ul></li><li>Inputs one primitive and outputs can be more than one primitives</li></ul><h6 id="Pixel-Shader"><a href="#Pixel-Shader" class="headerlink" title="Pixel Shader"></a>Pixel Shader</h6><ul><li>Process pixels<ul><li>Texture mapping</li><li>Color combine</li><li>Per-pixel lighting</li><li>…</li></ul></li><li>Inputs one pixel and outputs one pixel at same position, or no pixel at all</li></ul><h1 id="Introduction-to-OpenGL"><a href="#Introduction-to-OpenGL" class="headerlink" title="Introduction to OpenGL"></a>Introduction to OpenGL</h1><h2 id="What-is-OpenGL"><a href="#What-is-OpenGL" class="headerlink" title="What is OpenGL"></a>What is OpenGL</h2><ul><li>Open Graphics Library (OpenGL) is an open standard for <strong>cross-language</strong>, <strong>cross-platform</strong> API specification</li><li>OpenGL is a set of <strong>APIs</strong> used to write 2D&#x2F;3D graphics applications</li><li>OpenGL defines the function specification of each API and leaves the implementation to the vendors themselves<ul><li>OpenGL 只有定 SPEC，具體怎麼做留給硬體廠商</li><li>每個硬體可能執行運算的方式不太一樣，像是做加法時，可能精度不一樣</li></ul></li></ul><h2 id="Other-Graphics-APIs"><a href="#Other-Graphics-APIs" class="headerlink" title="Other Graphics APIs"></a>Other Graphics APIs</h2><ul><li>Direct3D<ul><li><strong>Proprietary</strong> Microsoft Windows 3D graphics API</li></ul></li><li>Vulkan</li><li>OpenGL ES <ul><li>OpenGL for Emnedded Systems</li></ul></li><li>Web-based OpenGL</li><li>Metal</li><li>Mantle</li></ul><h2 id="OpenGL-vs-Direct3D"><a href="#OpenGL-vs-Direct3D" class="headerlink" title="OpenGL vs. Direct3D"></a>OpenGL vs. Direct3D</h2><p><img src="/notes/./images/computer-graphics/OpenGLvsDirect3D.png" alt="OpenGL vs. Direct3D"></p><h2 id="OpenGL-Extension"><a href="#OpenGL-Extension" class="headerlink" title="OpenGL Extension"></a>OpenGL Extension</h2><p>硬體廠商可以寫自己的 OpenGL Extension，像是 AMD、NVDIA…</p><ul><li>Advantages<ul><li>Develop new functionality before new API spec is released</li><li>Hardware vendors can expose their new hardware features via extension first</li><li>Extension becomes core function (or extension) after being approved by ARB(Architecture Review Board)</li></ul></li><li>Disadvantages<ul><li>It is vendor specific before approved by ARB</li><li>Compatibility</li></ul></li><li>GLEW&#x2F;GLAD can help in querying and loading OpenGL extensions</li></ul><h2 id="Why-OpenGL"><a href="#Why-OpenGL" class="headerlink" title="Why OpenGL"></a>Why OpenGL</h2><ul><li>Cross-platform<ul><li>Windows Mac OSX, Linux</li></ul></li><li>Better backward compatibility<ul><li>舊的 OpenGL code 通常還是可以跑</li></ul></li><li>Run on various hardware platforms<ul><li>OpenGL, OpenGL ES, WebGL</li></ul></li></ul><h2 id="Convention-of-an-OpenGL-API"><a href="#Convention-of-an-OpenGL-API" class="headerlink" title="Convention of an OpenGL API"></a>Convention of an OpenGL API</h2><p><img src="/notes/./images/computer-graphics/ConventionofanOpenGLAPI.png" alt="Convention of an OpenGL API"></p><h3 id="Data-Types"><a href="#Data-Types" class="headerlink" title="Data Types"></a>Data Types</h3><p>C++ data types 和 OpenGL data types 大部分一樣，但還是有些許不同<br><img src="/notes/./images/computer-graphics/OpenGLDataTypes.png" alt="OpenGL Data Types"></p><h2 id="OpenGL-Pipeline"><a href="#OpenGL-Pipeline" class="headerlink" title="OpenGL Pipeline"></a>OpenGL Pipeline</h2><p><img src="/notes/./images/computer-graphics/OpenGLPipeline.png" alt="OpenGL Pipeline"><br><a href="http://romain.vergne.free.fr/teaching/IS/SI03-pipeline.html">Image synthesis and OpenGL: graphics pipeline</a></p><p><img src="/notes/./images/computer-graphics/OpenGLPipeline2.png" alt="OpenGL Pipeline"></p><ul><li>紅色代表 programmable，虛線代表可以不需要，但還是建議要寫 fragment shader 比較好</li></ul><h2 id="OpenGL-Shading-Language"><a href="#OpenGL-Shading-Language" class="headerlink" title="OpenGL Shading Language"></a>OpenGL Shading Language</h2><ul><li>High-Level shading language based on C programming language</li><li>DirectX + HLSL vs. OpenGL + GLSL</li><li>Hardware vendors will provide shader compiler to optimize the shader codes for deriving best performance running on their hardware architecture</li></ul><h2 id="OpenGL-工具"><a href="#OpenGL-工具" class="headerlink" title="OpenGL 工具"></a>OpenGL 工具</h2><h3 id="OpenGL-Context-Window-Creation"><a href="#OpenGL-Context-Window-Creation" class="headerlink" title="OpenGL Context&#x2F;Window Creation"></a>OpenGL Context&#x2F;Window Creation</h3><ul><li><strong>context</strong> stores all the states associated with the instance of OpenGL rendering</li><li><strong>window</strong> is the window where your rendering result displayed</li><li><strong>event handlings</strong> process different kinds of input such as keyboard and mouse</li></ul><p>A cross-platform toolkit for writing OpenGL programs</p><ul><li>Support application frameworks to control the platform’s <strong>window system</strong> and <strong>event handling</strong></li></ul><h5 id="GLUT"><a href="#GLUT" class="headerlink" title="GLUT"></a>GLUT</h5><ul><li>Pretty old and no longer maintained</li></ul><h4 id="Freeglut"><a href="#Freeglut" class="headerlink" title="Freeglut"></a>Freeglut</h4><ul><li>An alternative to GLUT</li><li><a href="https://freeglut.sourceforge.net/">https://freeglut.sourceforge.net/</a></li></ul><h5 id="GLFW"><a href="#GLFW" class="headerlink" title="GLFW"></a>GLFW</h5><ul><li><a href="https://www.glfw.org/">https://www.glfw.org/</a></li></ul><h3 id="OpenGL-Loading-Libraries"><a href="#OpenGL-Loading-Libraries" class="headerlink" title="OpenGL Loading Libraries"></a>OpenGL Loading Libraries</h3><p>OpenGL loader checks the graphics driver for which OpenGL version profile is supported and gets all the function pointers as well as the supported extensions</p><h5 id="GLEW"><a href="#GLEW" class="headerlink" title="GLEW"></a>GLEW</h5><p>The OpenGL Extension Wrangler Library</p><ul><li>A cross-platform open-source C&#x2F;C++ extension loading library</li><li>Provides efficient run-time mechanisms for determining which OpenGL extensions are supported on the target platform</li><li><a href="http://glew.sourceforge.net/">http://glew.sourceforge.net/</a></li></ul><h5 id="GLAD"><a href="#GLAD" class="headerlink" title="GLAD"></a>GLAD</h5><p>Multi-Language GL&#x2F;GLES&#x2F;EGL&#x2F;GLX&#x2F;WGL Loader-Generator based on the official specs</p><ul><li>An tool (with a web-service) for generating OpenGL, OpenGL ES, EGL, GLX and WGL headers (and loaders) based on the official XML specifications</li><li>You can customized to the version you like without including those deprecated or legacy functions</li><li><a href="https://glad.dav1d.de/">https://glad.dav1d.de/</a></li></ul><h3 id="Other-OpenGL-Useful-Utilities"><a href="#Other-OpenGL-Useful-Utilities" class="headerlink" title="Other OpenGL Useful Utilities"></a>Other OpenGL Useful Utilities</h3><h5 id="GLM"><a href="#GLM" class="headerlink" title="GLM"></a>GLM</h5><p>OpenGL mathematics libraries</p><ul><li>A header only C++ mathematics library for graphics software based on the OpenGL Shading Language (GLSL) specifications</li><li><a href="https://glm.g-truc.net/0.9.9/index.html">https://glm.g-truc.net/0.9.9/index.html</a></li></ul><h5 id="stb-image-h"><a href="#stb-image-h" class="headerlink" title="stb_image.h"></a>stb_image.h</h5><p>Image and texture</p><ul><li>An image-loading library that supports several popular formats</li><li><a href="https://github.com/nothings/stb/blob/master/stb_imag">https://github.com/nothings/stb/blob/master/stb_imag</a></li></ul><h4 id="Asset-Model-loader"><a href="#Asset-Model-loader" class="headerlink" title="Asset&#x2F;Model loader"></a>Asset&#x2F;Model loader</h4><h5 id="Open-Asset-Import"><a href="#Open-Asset-Import" class="headerlink" title="Open Asset Import"></a>Open Asset Import</h5><ul><li>A loader with support to a variety of 3D file formats</li><li><a href="http://www.assimp.org/">http://www.assimp.org/</a></li></ul><h5 id="TinyOBJ-loader"><a href="#TinyOBJ-loader" class="headerlink" title="TinyOBJ loader"></a>TinyOBJ loader</h5><ul><li>A simple wavefront boj file loader</li><li><a href="https://github.com/tinyobjloader/tinyobjloader">https://github.com/tinyobjloader/tinyobjloader</a></li></ul><h5 id="glm"><a href="#glm" class="headerlink" title="glm"></a>glm</h5><ul><li>A simple wavefront obj file loader</li><li>Not the OpenGL Mathematics Library</li><li><a href="http://devernay.free.fr/hacks/glm/">http://devernay.free.fr/hacks/glm/</a></li></ul><h2 id="OpenGL-Application-Framework"><a href="#OpenGL-Application-Framework" class="headerlink" title="OpenGL Application Framework"></a>OpenGL Application Framework</h2><p>[P42]</p>]]></content>
    
    
    
    <tags>
      
      <tag>CG</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Unity 新手教學 - 導入物件</title>
    <link href="/notes/2024/04/10/unity-tutorial-3/"/>
    <url>/notes/2024/04/10/unity-tutorial-3/</url>
    
    <content type="html"><![CDATA[<p>在這次教學中，我們將學習如何導入自己的圖片、音樂，或是將來自 Sketchfab 和 Unity Asset Store 的酷炫 3D 物件導入到你的 Unity 專案中</p><h2 id="導入自己的資源"><a href="#導入自己的資源" class="headerlink" title="導入自己的資源"></a>導入自己的資源</h2><p>導入自己的物件非常簡單，可以在 Project View 空白處點擊右鍵，Import New Asset，然後選擇要導入的物件即可</p><p><img src="/notes/./images/unity-tutorial-3/ImportNewAsset.png" alt="Import New Asset"></p><p>還有另一個方法，可以直接把那個東西拉進來就好（我都這樣，因為我很懶 XD</p><p><img src="/notes/./images/unity-tutorial-3/ImportDemo.gif" alt="Import Demo"></p><h3 id="導入圖片"><a href="#導入圖片" class="headerlink" title="導入圖片"></a>導入圖片</h3><p>值得一提的是，導入的圖片會自動變成 Texture，所以可以直接用在 3D 模型、UI 元素、粒子效果上面<br><img src="/notes/./images/unity-tutorial-3/Texture.png" alt="Texture"></p><h2 id="Unity-Asset-Store"><a href="#Unity-Asset-Store" class="headerlink" title="Unity Asset Store"></a>Unity Asset Store</h2><h3 id="什麼是-Unity-Asset-Store？"><a href="#什麼是-Unity-Asset-Store？" class="headerlink" title="什麼是 Unity Asset Store？"></a>什麼是 Unity Asset Store？</h3><p><a href="https://assetstore.unity.com/zh-CN">Unity Asset Store</a> 是 Unity 官方提供的一個平台，類似於 APP store，但是專注於 Unity 開發的資源。這裡有各種各樣的資源，包括 2D pixel art、3D 模型、材質、音效、程式碼，甚至是完整的專案模板、各種輔助型的工具。無論你是需要一個小工具還是一個完整的遊戲框架，Unity Asset Store 都能滿足你的需求。</p><h3 id="如何使用？"><a href="#如何使用？" class="headerlink" title="如何使用？"></a>如何使用？</h3><p>我這邊隨便選擇一個 <a href="https://assetstore.unity.com/packages/3d/environments/landscapes/mars-landscape-3d-175814">Mars Landscape 3D</a> 的 Package，確認右邊的 <strong>Original Unity version</strong> 符合當前版本後，點擊右邊的 <strong>Add to My Assets</strong>，它應該會叫你先登入帳號</p><p><img src="/notes/./images/unity-tutorial-3/AddNewAsset.png" alt="Add New Asset"></p><p>登入並 <strong>Add to My Assets</strong> 後，就成功加入了到你帳號的 Assets 裡面了</p><p><img src="/notes/./images/unity-tutorial-3/AddNewAsset2.png" alt="Add New Asset"></p><p>接著點擊 <strong>Open In Unity</strong>，它會自動幫你打開 Unity 裡面的 Package Manager</p><p><img src="/notes/./images/unity-tutorial-3/PackageManager.png" alt="Package Manager"></p><p>Package Manager 會有你所有的 Assets，之後你想要檢視 Package Manager 的話，也可以從上方的 Windows 裡面打開</p><p><img src="/notes/./images/unity-tutorial-3/PackageManager2.png" alt="Package Manager"></p><p>點擊右上方的 <strong>Download</strong>，下載完後再點 <strong>Import</strong>，然後繼續點 <strong>Import</strong></p><p><img src="/notes/./images/unity-tutorial-3/PackageManager3.png" alt="Package Manager"></p><p>現在這個 Unity Asset Store 的 Package 就成功導入到你的專案中了！</p><p><img src="/notes/./images/unity-tutorial-3/ProjectView.png" alt="Project View"></p><p><img src="/notes/./images/unity-tutorial-3/DemoScene.png" alt="Demo Scene"></p><p>不喜歡這個場景中的天空？沒問題！這邊再導入另一個在 Unity Asset Store 上的 Package - <a href="https://assetstore.unity.com/packages/2d/textures-materials/sky/skybox-series-free-103633">Skybox Series Free</a>，這 Package 提供許多精緻好看的 Skybox Material</p><p><img src="/notes/./images/unity-tutorial-3/SkyboxUnityAssetStore.png" alt="Skybox Unity Asset Store"></p><h4 id="Skybox"><a href="#Skybox" class="headerlink" title="Skybox"></a>Skybox</h4><p>Unity Skybox 是一種用於創建場景背景的特殊 Material，Unity 提供了幾種預設的 Skybox Shader，像是 6 Sided、Cubemap、Procedural 等，想要有更多動態效果，也可以自定義 Skybox Shader，不過這會比較進階一點</p><h5 id="6-Sided"><a href="#6-Sided" class="headerlink" title="6 Sided"></a>6 Sided</h5><p>我們可以在 Assets 中新增一個 Material</p><p><img src="/notes/./images/unity-tutorial-3/NewMaterial.png" alt="New Material"></p><p>在這個材質的 Inspector 中，把上方的 Shader 改成 6 Sided</p><p><img src="/notes/./images/unity-tutorial-3/SixSided.png" alt="Six Sided"><br><img src="/notes/./images/unity-tutorial-3/MaterialInspector.png" alt="Material Inspector"></p><p>可以看到它要我們放六張 Texture 進去，分別對應到正方體的六個面，就可以做出一個 Skybox</p><p><img src="https://opengameart.org/sites/default/files/Sorsele.jpg" alt="Skybox"></p><p>這邊我就直接拿導入的 Skybox Material 來演示怎麼改變場景中的天空</p><h5 id="全域改變"><a href="#全域改變" class="headerlink" title="全域改變"></a>全域改變</h5><p><img src="/notes/./images/unity-tutorial-3/Lighting.png" alt="Lighting"></p><p>在上方 Window 裡面的 Rendering 中可以找到 Lighting，點選後會跳出一個視窗</p><p><img src="/notes/./images/unity-tutorial-3/LightingInspector.png" alt="Lighting Inspector"></p><p>在這個視窗上方的 Environment 中會找到一個 <strong>Skybox Material</strong>，可以直接把剛剛導入的 Package 中的 Material 拖曳進去，或是直接拖曳到場景中也可以，都是做全域的改變，會影響所有場景的 Camera 的 Skybox</p><p><img src="/notes/./images/unity-tutorial-3/GlobalSkybox.gif" alt="Global Skybox"></p><h5 id="局部改變"><a href="#局部改變" class="headerlink" title="局部改變"></a>局部改變</h5><p>比較好的做法是在 Camera 裡面新增一個 Skybox Component</p><p><img src="/notes/./images/unity-tutorial-3/CameraInspector.png" alt="Camera Inspector"></p><p>一樣把想要的 Skybox Material 拖曳進去，這樣只會影響這個 Camera，且會 Override Lighting Tab 的設定</p><p><img src="/notes/./images/unity-tutorial-3/LocalSkybox.gif" alt="Local Skybox"></p><h4 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h4><p>每次 Import Package 後，可以先去找這個 Package 所提供的 Demo Scene，執行看看有沒有問題，確保這個 Package 是和你現在的 Unity 專案相容的，避免未來出現問題卻找不到問題點在哪</p><h2 id="Sketchfab"><a href="#Sketchfab" class="headerlink" title="Sketchfab"></a>Sketchfab</h2><h3 id="什麼是-Sketchfab？"><a href="#什麼是-Sketchfab？" class="headerlink" title="什麼是 Sketchfab？"></a>什麼是 Sketchfab？</h3><p><a href="https://sketchfab.com/">Sketchfab</a> 是一個線上的平台，提供大量的 3D 模型資源，從建築到角色、動物等各種類型的物件都可以在這裡取得。這些模型通常由社群或專業的模型師製作，你可以在 Sketchfab 上瀏覽、分享，甚至購買這些模型來使用在你的專案中。</p><h3 id="如何使用？-1"><a href="#如何使用？-1" class="headerlink" title="如何使用？"></a>如何使用？</h3><p>這邊隨便選擇一個 Pop cat 的 3D 模型，右上角兩個符號代表這模型有動畫，且是可以下載的</p><p><img src="/notes/./images/unity-tutorial-3/SketchfabModel.png" alt="Sketchfab Model"></p><p><img src="/notes/./images/unity-tutorial-3/SketchfabModel2.png" alt="Sketchfab Model"></p><p><img src="/notes/./images/unity-tutorial-3/SketchfabModel3.png" alt="Sketchfab Model"></p><p>可以看到這邊沒有 Unity 支援的 .fbx、.dae (Collada)、.dxf 和 .obj. 等格式，不過有提供 .blend，所以我們可以自己開 blender 轉換成 .fbx</p><p><img src="/notes/./images/unity-tutorial-3/Blender.png" alt="Blender"></p><p>導出成 .fbx 的時候，記得把右上角的 Path Mode 改成 Copy，並點擊右邊的 Embed Textures，之後導入進 Unity 中才能生成對應的 Texture</p><p><img src="/notes/./images/unity-tutorial-3/Blender2.png" alt="Blender"></p><p>按照先前說的方式導入模型進 Unity 後，你會發現它沒有 Texture</p><p><img src="/notes/./images/unity-tutorial-3/CatModel.png" alt="Cat Model"></p><p>這時候只要點選剛剛導入進 Assets 的模型，在右邊 Inspector 中的 Materials 裡面點擊 Extract Textures…，就可以順利加上 Texture 了</p><p><img src="/notes/./images/unity-tutorial-3/CatInspector.png" alt="Cat Model"></p><p>這樣就模型就有 Texture 了！</p><p><img src="/notes/./images/unity-tutorial-3/CatModelTexture.png" alt="Cat Model Texture"></p><h2 id="Prefab"><a href="#Prefab" class="headerlink" title="Prefab"></a>Prefab</h2><h3 id="什麼是-Prefab？"><a href="#什麼是-Prefab？" class="headerlink" title="什麼是 Prefab？"></a>什麼是 Prefab？</h3><p>你可能有注意到，當你從 Unity Asset Store 或 Sketchfab 導入模型後，在 Hierarchy View 中看到一些藍色的物件。這些藍色物件被稱為 Prefab（預製配件）。Prefab 是 Unity 中的一種特殊、可以重複使用的物件。</p><p><img src="/notes/./images/unity-tutorial-3/Prefab.png" alt="Prefab"></p><p>舉個例子，假如你在場景中有大量一樣的石頭，這時候你就可以把石頭做成一個 Prefab，這就有點像是這顆石頭的 <strong>藍圖</strong>，你可以根據這個藍圖去建立一大堆石頭。當你想要一次修改時，就可以改這個藍圖就好，不用每一顆慢慢去修改。</p><p><img src="/notes/./images/unity-tutorial-3/CatArmy.png" alt="Cat Army"></p><p><img src="/notes/./images/unity-tutorial-3/ModifyPrefab.gif" alt="Modify Prefab"></p><p>這邊我想要更改 Cat 模型的 Scale，只需要更改藍圖就好，這樣場景中所有根據這個 Prefab 建立的物件就會一起更新。</p><h3 id="如何建立-Prefab？"><a href="#如何建立-Prefab？" class="headerlink" title="如何建立 Prefab？"></a>如何建立 Prefab？</h3><p>非常簡單，只要把你 Hierarchy View 中的物件拉進你的 Project View 裡面就好。像是我這邊建立一個 Cube 到場景中，把它拉進下方就成功囉～</p><p><img src="/notes/./images/unity-tutorial-3/CreatePrefab.gif" alt="Create Prefab"></p><hr><p>到目前為止，你應該大致了Prefab 作用及應用，也知道怎麼導入其它人準備好的各種素材。善用 Unity Asset Store 的各種資源，就算對美術一竅不通，也能夠打造出精緻的遊戲！</p><p>下次再見～</p>]]></content>
    
    
    
    <tags>
      
      <tag>Unity</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Unity 新手教學 - 介面介紹和基本操作</title>
    <link href="/notes/2024/04/10/unity-tutorial-2/"/>
    <url>/notes/2024/04/10/unity-tutorial-2/</url>
    
    <content type="html"><![CDATA[<p>在這次教學中，我們將學習了解 Unity 的開發者介面，以及如何新增物件還有編輯的快捷鍵。</p><h2 id="Unity-介面介紹"><a href="#Unity-介面介紹" class="headerlink" title="Unity 介面介紹"></a>Unity 介面介紹</h2><p>在 Unity Editor 中，開發者的介面分割得非常明確，大致可以將畫面分成幾個區塊，每個區塊都有特定的功能</p><p><img src="/notes/./images/unity-tutorial-2/UnityEditor.png" alt="Unity Editor"></p><h3 id="Hierarchy-View"><a href="#Hierarchy-View" class="headerlink" title="Hierarchy View"></a>Hierarchy View</h3><p>預設位於介面的左上方，這裡顯示了場景中的所有物體的層次結構。你可以在這裡看到物體之間的父子關係，還有它們的名稱。</p><p>在預設場景中，Unity 會幫你新增兩個物件，Main Camera 和 Direction Light。Camera 可以想像成有人扛著攝影機負責轉播現在遊戲的情況，所以玩家看到的遊戲畫面都至少有一個 Camera 負責。Direction Light 則負責場景中的光照。</p><h4 id="補充"><a href="#補充" class="headerlink" title="補充"></a>補充</h4><ul><li>請記得把所有物件都以英文命名，不然在程式碼中尋找中文名稱的物件時，極有可能發生找不到的問題</li><li>請把所有物件的名稱都命名的淺顯易懂，最好是一看到名字就知道這個東西在幹嘛，不然日後會被自己害死… (親身經驗</li></ul><h3 id="Scene-View"><a href="#Scene-View" class="headerlink" title="Scene View"></a>Scene View</h3><p>預設位於介面的中間，這是遊戲的可視化界面，可以在這裡編輯和調整場景中的物體</p><h3 id="Game-View"><a href="#Game-View" class="headerlink" title="Game View"></a>Game View</h3><p>預設位於介面的中間，這裡顯示遊戲的運行結果，也就是你在 Scene View 更改的結果，可以在這邊做簡單的 Demo，看一下目前遊戲長什麼樣子</p><h3 id="Inspector-View"><a href="#Inspector-View" class="headerlink" title="Inspector View"></a>Inspector View</h3><p>預設位於介面的右邊，這裡顯示的是點選的物體或資源的屬性，對於物體而言，可能會有位置、旋轉、碰撞器或是腳本等屬性，都在這邊可以做修改它們的設定</p><h3 id="Project-View"><a href="#Project-View" class="headerlink" title="Project View"></a>Project View</h3><p>預設位於介面的下方，這邊包含遊戲會用到的所有資源。在 Project View 裡面可以看到有兩個資料夾，Assets 和 Packages，Packages 存放的是許多 Unity 內建既有的東西，我們可以不用理它。我們所新加入的任何資源都會在 Assets 裡面，像是 Material、Script、Shader、Prefab、音效、圖片以及導入的 Package 等等</p><p>現在我們就我們開始在場景中新增物件吧～</p><h2 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h2><h3 id="新增物件"><a href="#新增物件" class="headerlink" title="新增物件"></a>新增物件</h3><p><img src="/notes/./images/unity-tutorial-2/AddGameObject.png" alt="Add Game Object"><br>在左邊的 Hierarchy View 中點擊滑鼠右鍵，選擇 <strong>3D OBject</strong> 可以看到許多選擇，像是正方體、球體、膠囊體(?、圓柱體等等，這邊先選擇正方體</p><p><img src="/notes/./images/unity-tutorial-2/AddGameObject2.png" alt="Add Game Object"></p><p>新增好後 Hierarchy View 就多了一個名為 Cube 的 Cube，Scene View 和 Game View 也可以看到這個正方體。點選這個正方體，右邊的 Inspector View 就會顯示這個正方體的詳細資訊。</p><h3 id="快捷鍵"><a href="#快捷鍵" class="headerlink" title="快捷鍵"></a>快捷鍵</h3><p>想要快速編輯遊戲場景，勢必要熟悉 Unity 的一些操作，這邊簡單介紹一下我經常使用的快捷鍵</p><h4 id="滑鼠滾輪"><a href="#滑鼠滾輪" class="headerlink" title="滑鼠滾輪"></a>滑鼠滾輪</h4><p>放大和縮小當前的畫面<br><img src="/notes/./images/unity-tutorial-2/MouseScroll.gif" alt="Mouse Scroll"></p><h4 id="ALT"><a href="#ALT" class="headerlink" title="ALT"></a>ALT</h4><p>能夠改變當前的視角角度<br><img src="/notes/./images/unity-tutorial-2/ALT.gif" alt="ALT"></p><h4 id="Q"><a href="#Q" class="headerlink" title="Q"></a>Q</h4><p>快速切換成 View Tool，可以在 Scene View 中自由移動<br><img src="/notes/./images/unity-tutorial-2/Q.gif" alt="Q"></p><h4 id="W"><a href="#W" class="headerlink" title="W"></a>W</h4><p>快速切換成 Move Tool，可以移動物體的位置<br><img src="/notes/./images/unity-tutorial-2/W.gif" alt="W"></p><h4 id="E"><a href="#E" class="headerlink" title="E"></a>E</h4><p>快速切換成 Rotate Tool，可以旋轉物體<br><img src="/notes/./images/unity-tutorial-2/E.gif" alt="E"></p><h4 id="R"><a href="#R" class="headerlink" title="R"></a>R</h4><p>快速切換成 Scale Tool，可以改變物體的大小<br><img src="/notes/./images/unity-tutorial-2/R.gif" alt="R"></p><p>事實上，上面提到的 QWER 也可以直接用滑鼠點 Scene View 左上角的 Tools 來使用，不過直接用快捷鍵會在日後方便許多，建議可以多熟悉使用快捷鍵來編輯。</p><p>除此之外，在移動物體、旋轉物體和縮放物體的時候，可以看到右上角 Inspector 中的 Transform 也會隨之改變，前面有提到 Inspector View 可以檢視當前物體的屬性，且物體的位置、旋轉角度和大小都存在於 <strong>Transform 屬性</strong> 裡面，所以其實也可以直接在這邊輸入數字去做修改，和在 Scene View 去編輯是沒有差別的。</p><p><img src="/notes/./images/unity-tutorial-2/InspectorView.gif" alt="Inspector View"></p><h4 id="按住右鍵-W-A-S-D-Q-E-滾輪"><a href="#按住右鍵-W-A-S-D-Q-E-滾輪" class="headerlink" title="按住右鍵 + W&#x2F;A&#x2F;S&#x2F;D&#x2F;Q&#x2F;E&#x2F;滾輪"></a>按住右鍵 + W&#x2F;A&#x2F;S&#x2F;D&#x2F;Q&#x2F;E&#x2F;滾輪</h4><p>按住右鍵加上 W (前進)、A (往左)、S (後退)、D (往右)、 Q (往下)、E (往上)、滾輪 (調整移動速度)，可以快速在 Scene View 裡面移動，就跟你正在以第一人稱在遊戲場景中移動一樣，非常方便</p><p><img src="/notes/./images/unity-tutorial-2/Combo.gif" alt="Combo"></p><h4 id="F"><a href="#F" class="headerlink" title="F"></a>F</h4><p>快速在場景中找到某物件。在 Hierarchy View 裡面找到目標物件，點擊 F 可以瞬間到它旁邊。當遊戲場景很大的時候，這個功能會變得很好用，不用在場景中慢慢自己找。用滑鼠點兩下也可以<br><img src="/notes/./images/unity-tutorial-2/F.gif" alt="R"></p><h4 id="Ctrl-Z-Ctrl-Y"><a href="#Ctrl-Z-Ctrl-Y" class="headerlink" title="Ctrl + Z &#x2F; Ctrl + Y"></a>Ctrl + Z &#x2F; Ctrl + Y</h4><p>Undo 和 Redo，這應該不用多說什麼</p><h4 id="Ctrl-S"><a href="#Ctrl-S" class="headerlink" title="Ctrl + S"></a>Ctrl + S</h4><p>儲存檔案。請<strong>務必</strong>養成做完任何改動都點一下 Ctrl + S 的習慣，Unity 並不會自動幫你儲存。有時候做完大幅度的改動後 Unity 突然崩潰，所有努力直接化為泡影，當下真的欲哭無淚 QAQ</p><p><img src="/notes/./images/unity-tutorial-2/UnityCrash.png" alt="Unity Crash"><br>每次看到這畫面心都會抖一下… </p><hr><p>到目前為止，你應該已經知道怎麼在遊戲中新增物件，還有怎麼改變物體在場景的位置、大小等，記得多多使用快捷鍵來提高效率！還有記住有事沒事就點一下 Ctrl + S，日後一定會感謝自己。</p><p>下一篇會介紹怎麼使用 Unity Asset Store、Sketchfab 導入 3D 場景和物件，或是導入自己的素材，下次再見～<a href="https://933yee.github.io/notes/2024/04/10/unity-tutorial-3/">Unity 新手教學 - 導入物件</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>Unity</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Unity 新手教學 - WHY and HOW</title>
    <link href="/notes/2024/04/10/unity-tutorial/"/>
    <url>/notes/2024/04/10/unity-tutorial/</url>
    
    <content type="html"><![CDATA[<p>在這次教學中，我們將學習 Unity 相較於 Unreal Engine 有哪些優勢，以及如何下載和建立一個新的 Unity 專案</p><h2 id="為什麼要用-Unity？"><a href="#為什麼要用-Unity？" class="headerlink" title="為什麼要用 Unity？"></a>為什麼要用 Unity？</h2><p>在遊戲開發的世界裡，Unity 是一個非常受歡迎的遊戲引擎，擁有許多獨特的優勢使它成為許多開發者的首選。儘管 Epic Games 開發的 Unreal Engine 因 Fortnite 的成功而聲名大噪，使他成為當今最熱門的遊戲引擎之一，許多 3A 大作也都是出自於 Unreal</p><p>說了那麼多，為什麼我們還要考慮使用 Unity 呢？讓我們來看看 Unity 有哪些 Unreal 沒有的優勢：</p><ol><li><p><strong>簡單好上手</strong><br>對於新手來說，Unity 提供了一個相對輕鬆的入門門檻。它的介面設計和操作方式相對更直觀，學習曲線也比 Unreal 穩定許多。此外，個人覺得 C# 會比 C++ 更好上手，不用處理一堆指標的問題，會更適合新手去學習，不過 C++ 能夠壓榨出更多硬體效能就是了～</p></li><li><p><strong>適合獨立遊戲製作</strong><br>Unreal Engine 通常被用於開發大型、高品質的遊戲，開發時間、成本會比較高，Unity 則更適用於快速開發、跨平台部署和較小規模的專案。如果你是一個獨立開發者或是想要快速將遊戲推向市場的團隊，Unity 可能會更適合你。（這也是為什麼 Unity 收費事件會被炎上，新的收費方案將會扼殺許多獨立遊戲工作室，我最期待的 Silksong 可能要再多等五年，好險後來 CEO 下台了（X</p></li><li><p><strong>龐大的開發者社群</strong><br>當你在用 Unity 的時候遇到問題，唯一需要做的就是去 Google 一下。不管是 Bug 訊息還是你想做的事情，幾乎都能找到別人分享的程式碼或影片教學。而且，Unity 的<a href="https://docs.unity3d.com/Manual/index.html">官方文件</a>也極其有好，裡面涵蓋了各種用法的詳細使用說明。相比之下，我個人覺得 Unreal Engine 的教學文件就…好像沒什麼用，常常看了還是搞不清楚在說啥，這也是被人詬病的地方。</p></li></ol><p>其他還有像是豐富的資源庫、跨平台性等優勢，這裡就先不贅述了。</p><h2 id="下載-Unity"><a href="#下載-Unity" class="headerlink" title="下載 Unity"></a>下載 Unity</h2><p>在使用 Unity 之前，我們會需要去下載 <a href="https://unity.com/download">Unity Hub</a>。 </p><h3 id="Unity-Hub"><a href="#Unity-Hub" class="headerlink" title="Unity Hub"></a>Unity Hub</h3><p>Unity Hub 是 Unity 的一個管理工具，能夠讓你輕鬆管理和更新 Unity 的各種版本，也能夠在需要時隨時切換。</p><p><img src="/notes/./images/unity-tutorial/UnityDownload.png" alt="Unity Download"></p><h3 id="Unity-Editor"><a href="#Unity-Editor" class="headerlink" title="Unity Editor"></a>Unity Editor</h3><p>Unity Editor 版本就相當於你的 Unity 版本，不同版本之間使用上會有差異，不同 Package 能夠支援的版本也不一樣，所以在建立專案前，我們會需要決定這個專案要使用的 Unity 版本是什麼。</p><p>下載好 Unity Hub 後，我們可以看到這個畫面，下面的那兩個專案是我之前建立的</p><p><img src="/notes/./images/unity-tutorial/UnityHub.png" alt="Unity Hub"></p><p>這邊點選左邊的<strong>安裝</strong>，下面的那兩個 Unity Editor 版本也是我之前下載的</p><p><img src="/notes/./images/unity-tutorial/UnityHub2.png" alt="Unity Hub"></p><p>在這邊可以新增你想要的 Unity Editor 版本，也可以管理你已經擁有的版本</p><h3 id="管理授權"><a href="#管理授權" class="headerlink" title="管理授權"></a>管理授權</h3><p>在新增專案之前，可以看到上面會跟你說 <em><code>沒有可用授權 要建立並開啟專案，您需要有一個有效的授權</code></em> </p><p><img src="/notes/./images/unity-tutorial/UnityHub3.png" alt="Unity Hub"></p><p>這時候可以點選右上角的<strong>管理授權</strong></p><p><img src="/notes/./images/unity-tutorial/UnityHub4.png" alt="Unity Hub"></p><p>然後點選<strong>新增授權</strong></p><p><img src="/notes/./images/unity-tutorial/UnityHub5.png" alt="Unity Hub"></p><p>這邊選擇<strong>取得免費的個人版授權</strong>就好</p><p><img src="/notes/./images/unity-tutorial/UnityHub6.png" alt="Unity Hub"></p><p>重開後會發現現在已經有授權了～不過這授權是有時效的，過期後再做一遍剛剛做的事就好，現在就可以開始建立專案了。</p><h2 id="建立專案"><a href="#建立專案" class="headerlink" title="建立專案"></a>建立專案</h2><p>授權好後，現在我們來建立一個自己的專案</p><p><img src="/notes/./images/unity-tutorial/UnityHub7.png" alt="Unity Hub"></p><p>這邊點選右上角的 <strong>新專案</strong></p><p><img src="/notes/./images/unity-tutorial/UnityHub8.png" alt="Unity Hub"></p><p>可以看到一個專案也有各種不同的範本，像是 2D、3D、2D Mobile、3D Mobile…，這邊我們先選擇 3D (Built-in)，最上方可以選擇 Unity 的版本，右邊可以命名專案的名稱和專案存放的位置</p><p><img src="/notes/./images/unity-tutorial/UnityHub9.png" alt="Unity Hub"></p><p>建立好後，能夠看到這個預設畫面，現在就可以開始製作自己的遊戲了～ </p><p><img src="/notes/./images/unity-tutorial/UnityEditor.png" alt="Unity Editor"></p><hr><p>到目前為止，你應該大致理解 Unity 有哪些好處，還有 Unity 下載的流程是什麼。</p><p>下一篇教學會介紹如何在 3D 場景中執行一些操作，下次再見～<a href="https://933yee.github.io/notes/2024/04/10/unity-tutorial-2/">Unity 新手教學 - 介面介紹和基本操作</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>Unity</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Compiler 筆記 (3)</title>
    <link href="/notes/2024/03/27/compiler-3/"/>
    <url>/notes/2024/03/27/compiler-3/</url>
    
    <content type="html"><![CDATA[<blockquote><p>參考 清華大學 李政崑老師 編譯器設計講義</p></blockquote><p><img src="/notes/./images/compiler-3/Relation.png" alt="Relations"></p><h2 id="Regular-Expression"><a href="#Regular-Expression" class="headerlink" title="Regular Expression"></a>Regular Expression</h2><ul><li>A Language is a set of strings that can be formed from the given alphabet</li><li>Grammar defines a Language</li></ul><h3 id="Example-1"><a href="#Example-1" class="headerlink" title="Example 1"></a>Example 1</h3><ul><li>a | b denotes {a, b}</li><li>(a | b)(a | b) denotes {ab, aa, ba, bb}</li><li>a* &#x3D; {$\epsilon$, a, aa, aaa, …}</li><li>a$^+$ &#x3D; {a, aa, aaa, …}</li><li>(a | b) &#x3D; {a, b}</li><li>a | a* b &#x3D; {a, b, ab, aab, aaab, …}</li></ul><h3 id="Example-2"><a href="#Example-2" class="headerlink" title="Example 2"></a>Example 2</h3><h4 id="11-0-00-1"><a href="#11-0-00-1" class="headerlink" title="(11 + 0)* (00 + 1)*"></a>(11 + 0)* (00 + 1)*</h4><p>不能奇數個 1 出現在奇數個 0 前面，像是 01010 就不可能</p><h3 id="Example-3"><a href="#Example-3" class="headerlink" title="Example 3"></a>Example 3</h3><h4 id="1-01-001-epsilon-0-00"><a href="#1-01-001-epsilon-0-00" class="headerlink" title="(1 + 01 + 001)* ($\epsilon$ + 0 + 00)*"></a>(1 + 01 + 001)* ($\epsilon$ + 0 + 00)*</h4><p>不能連續三個 0，像是 000</p><h3 id="Example-4"><a href="#Example-4" class="headerlink" title="Example 4"></a>Example 4</h3><h4 id="D-D-D-D"><a href="#D-D-D-D" class="headerlink" title="(D*.D | D.D*)"></a>(D*.D | D.D*)</h4><p>D &#x3D; [0 ~ 9]<br>0.5, .5, 123.6, 9.2, 9.237, 9.</p><h2 id="Finite-State-Automata-FSA"><a href="#Finite-State-Automata-FSA" class="headerlink" title="Finite State Automata (FSA)"></a>Finite State Automata (FSA)</h2><ul><li>FSA is a 5-tuple (Q, $\Sigma$, $\delta$, $q_0$, F)</li><li>Q is a set of states</li><li>$\Sigma$ is an input alphabet, symbol</li><li>$\delta$ is a transition function</li><li>$q_0$ is the initial state</li><li>F is a set of final states</li></ul><h3 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h3><h4 id="Vending-Machine"><a href="#Vending-Machine" class="headerlink" title="Vending Machine"></a>Vending Machine</h4><p><img src="/notes/./images/compiler-3/VendingMachine.png" alt="Vending Machine"></p><ul><li>M &#x3D; (Q, $\Sigma$, $\delta$, $q_{0}$, F)</li><li>Q &#x3D; {$q_{0}, q_{5}, q_{10}, q_{15}, q_{20}$}</li><li>$\Sigma$ &#x3D; {5, 10}</li><li>F &#x3D; {$q_{20}$}</li><li>$\delta$($q_{0}$, 5) &#x3D; $q_{5}$, $\delta$($q_{5}$, 5) &#x3D; $q_{10}$</li><li>$\delta$($q_{10}$, 5) &#x3D; $q_{15}$, $\delta$($q_{15}$, 5) &#x3D; $q_{20}$</li><li>$\delta$($q_{0}$, 10) &#x3D; $q_{10}$, $\delta$($q_{10}$, 10) &#x3D; $q_{20}$</li></ul><h3 id="NFA-non-deterministic-Finite-State-Automata"><a href="#NFA-non-deterministic-Finite-State-Automata" class="headerlink" title="NFA (non-deterministic Finite State Automata)"></a>NFA (non-deterministic Finite State Automata)</h3><ul><li>可能有多個 Next State </li><li>NFA with empty string move ($\epsilon$)<ul><li>$\epsilon$ 允許到新狀態的變換不消耗任何輸入符號。例如，如果它處於狀態 1，下一個輸入符號是 a，它可以移動到狀態 2 而不消耗任何輸入符號，因此就有了歧義：在消耗字母 a 之前系統是處於狀態 1 還是狀態 2 呢 ? 由於這種歧義性，可以更加方便的談論系統可以處在的可能狀態的集合。因此在消耗字母 a 之前，NFA-ε 可以處於集合 {1,2} 內的狀態中的任何一個。等價的說，你可以想像這個 NFA 同時處於狀態 1 和狀態 2: 這給出了對冪集構造的非正式提示：等價於這個 NFA 的 DFA 被定義為此時處於狀態 q&#x3D;{1,2} 中<ul><li><a href="https://zh.wikipedia.org/zh-tw/%E9%9D%9E%E7%A1%AE%E5%AE%9A%E6%9C%89%E9%99%90%E7%8A%B6%E6%80%81%E8%87%AA%E5%8A%A8%E6%9C%BA">非確定有限狀態自動機</a></li></ul></li></ul></li><li>NFA without empty string move</li></ul><h3 id="DFA-Deterministic-Finite-State-Automata"><a href="#DFA-Deterministic-Finite-State-Automata" class="headerlink" title="DFA (Deterministic Finite State Automata)"></a>DFA (Deterministic Finite State Automata)</h3><ul><li>只有一個 Next State</li></ul><p><img src="https://www.researchgate.net/publication/2659477/figure/fig1/AS:647496795713537@1531386674269/NFA-and-DFA-for-Pattern-Matching-of-any-counterexample-Angluin-and-Kharitonov-1991.png" alt="NFA vs DFA"></p><h4 id="Example-of-NFA"><a href="#Example-of-NFA" class="headerlink" title="Example of NFA"></a>Example of NFA</h4><p><img src="https://i.stack.imgur.com/hXhcF.png" alt="Example of NFA"></p><h4 id="epsilon-and-phi"><a href="#epsilon-and-phi" class="headerlink" title="$\epsilon$ and $\phi$"></a>$\epsilon$ and $\phi$</h4><ul><li>$\epsilon$ is a 0 length string</li><li>$\phi$ is a null, i.e. no string.</li></ul><h5 id="r-epsilon"><a href="#r-epsilon" class="headerlink" title="r &#x3D; $\epsilon$"></a>r &#x3D; $\epsilon$</h5><ul><li>You can insert any number of epsilons between two alphabets of input string</li><li>Ex: <code>aeeeeeeeeeb</code>, it won’t make any difference</li><li>If we want to denote a null move, I.e.. one state going to other state without any input symbol, then epsilon is used<ul><li><a href="https://www.quora.com/What-is-the-difference-between-epsilon-and-phi-in-Automata">What is the difference between epsilon and phi in Automata?</a></li></ul></li></ul><p><img src="/notes/./images/compiler-3/epsilon.png" alt="epsilon"></p><h5 id="r-phi"><a href="#r-phi" class="headerlink" title="r &#x3D; $\phi$"></a>r &#x3D; $\phi$</h5><ul><li>Denotes empty i.e. no input string exists.</li></ul><p><img src="/notes/./images/compiler-3/phi.png" alt="phi"></p><h3 id="Conversion-of-NFA-without-epsilon-transition-to-DFA"><a href="#Conversion-of-NFA-without-epsilon-transition-to-DFA" class="headerlink" title="Conversion of NFA without $\epsilon$-transition to DFA"></a>Conversion of NFA without $\epsilon$-transition to DFA</h3><ul><li><p>Every DFA is an NFA, but not vice versa</p></li><li><p>There is an equivalent DFA for every NFA</p></li><li><p>M &#x3D; (Q, $\Sigma$, $\delta$, $q_0$, F)</p></li><li><p>M’ &#x3D; (Q’, $\Sigma$, $\delta$’, $q_0’$, F’)</p><ul><li>Q’ &#x3D; $2^Q$</li><li>The state of M’ are all the <strong>subset</strong> of the set of states of M</li><li>F’ is the set of all states in Q’ constructing a <strong>final states of M</strong></li><li>$\delta$’([$q_1$, $q_2$, …, $q_i$], a) &#x3D; [$p_1$, $p_2$, …, $p_j$] iff $\delta$({$q_1$, $q_2$, …, $q_i$}, a) &#x3D; {$p_1$, $p_2$, …, $p_j$}</li><li>Note: $2^Q$ is <strong>Power Set</strong>, meaning that the set of all subsets of Q<ul><li>Q &#x3D; {a, b, c}</li><li>$2^Q$ &#x3D; {$\phi$, {a}, {b}, {c}, {a, b}, {b, c}, {a, c}, {a, b, c}}</li></ul></li></ul></li><li><p><a href="https://www.youtube.com/watch?v=i-fk9o46oVY">Conversion of NFA to DFA (Example 2)</a></p></li></ul><h3 id="Convert-NFA-with-epsilon-transition-to-NFA-without-epsilon-transition"><a href="#Convert-NFA-with-epsilon-transition-to-NFA-without-epsilon-transition" class="headerlink" title="Convert NFA with $\epsilon$-transition to NFA without $\epsilon$-transition"></a>Convert NFA with $\epsilon$-transition to NFA without $\epsilon$-transition</h3><ul><li>$\delta$’(q, a) &#x3D; $\epsilon$-closure($\delta$($\epsilon$-closure (q), a))</li></ul><h4 id="epsilon-closure"><a href="#epsilon-closure" class="headerlink" title="$\epsilon$-closure"></a>$\epsilon$-closure</h4><ul><li>The set of states that can be reachable by making $\epsilon$-transitions from a given set of start states is called a $\epsilon$-closure</li></ul><h5 id="Epsilon-closure-Example"><a href="#Epsilon-closure-Example" class="headerlink" title="Epsilon-closure Example"></a>Epsilon-closure Example</h5><ul><li>$\epsilon$-closure($q_0$) &#x3D; {$q_0, q_1, q_2, q_4, q_7$}</li><li>$\epsilon$-closure($q_1$) &#x3D; {$q_1, q_2, q_4$}</li><li>$\epsilon$-closure($q_2$) &#x3D; {$q_2$}</li><li>$\epsilon$-closure($q_3$) &#x3D; {$q_1, q_2, q_3, q_4, q_6, q_7$}</li><li>$\epsilon$-closure($q_4$) &#x3D; {$q_4$}</li><li>$\epsilon$-closure($q_5$) &#x3D; {$q_1, q_2, q_3, q_4, q_5, q_6, q_7$}</li><li>$\epsilon$-closure($q_6$) &#x3D; {$q_1, q_2, q_4, q_6, q_7$}</li><li>$\epsilon$-closure($q_7$) &#x3D; {$q_7$}</li><li>$\epsilon$-closure($q_8$) &#x3D; {$q_8$}</li><li>$\epsilon$-closure($q_9$) &#x3D; {$q_9$}</li><li>$\epsilon$-closure($q_10$) &#x3D; {$q_10$}</li></ul><p><img src="/notes/./images/compiler-3/EpsilonClosureExample.png" alt="Epsilon-Closure Example"></p><h4 id="Conversion-Example"><a href="#Conversion-Example" class="headerlink" title="Conversion Example"></a>Conversion Example</h4><p><img src="/notes/./images/compiler-3/Epsilon-closureConversion.png" alt="Epsilon-closure Conversion"></p><ul><li>$\epsilon$-closure($q_0$) &#x3D; {$q_0, q_1, q_2$}</li><li>$\delta$($q_0$, 0) &#x3D; $\epsilon$-closure($\delta$($\epsilon$-closure($q_0$), 0))</li></ul><p>$$<br>  \begin{align}<br>    \epsilon\text{-closure}(q_0) &amp;&#x3D; {q_0, q_1, q_2} \newline<br>    \delta(q_0, 0) &amp;&#x3D; \epsilon\text{-closure}(\delta(\epsilon\text{-closure}(q_0), 0)) \newline<br>    &amp;&#x3D; \epsilon\text{-closure}(\delta({q_0, q_1, q_2}, 0)) \newline<br>    &amp;&#x3D; \epsilon\text{-closure}({q_0}) \newline<br>    &amp;&#x3D; {q_0, q_1, q_2}<br>  \end{align}<br>$$</p><ul><li>對每個 State 都做一次上面的操作</li></ul><p><img src="/notes/./images/compiler-3/Epsilon-closureConversion2.png" alt="Epsilon-closure Conversion"></p><h3 id="Minimizing-the-number-of-states-of-a-DFA"><a href="#Minimizing-the-number-of-states-of-a-DFA" class="headerlink" title="Minimizing the number of states of a DFA"></a>Minimizing the number of states of a DFA</h3><ul><li>一開始把 Final states 和不是 Final states 的 state 分成兩組<ul><li>ex: {A, B, C}, {D, E}</li></ul></li><li>每次比較同組的兩個 state，比較所有 inpts 的 next state 是否在同組，不同的話就分開<ul><li>ex: A 輸入 a 變成 C (C 在第一組)、B 輸入 a 變成 D (D 在第二組)，C 和 D 在上一次操作中位於不同組別，所以要把 A、B 分成不同組，變成 {A, C}, {B}, {D, E}</li><li>接著就持續比 AC、DE</li></ul></li><li>持續執行上述操作，直到沒有改變</li></ul><p><a href="https://www.youtube.com/watch?v=0XaGAkY09Wc">Minimization of DFA (Example 1)</a></p><h3 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h3><p>Relation</p><ul><li><p>Reflexive<br>if (a, b) &#x2F;belongs R for every a &#x2F;belongs A<br>aRa</p></li><li><p>Symmetry<br>aRb &#x3D; bRa</p></li><li><p>transitinity<br>aRb, bRc -&gt; aRc</p></li></ul><p>Back tracking is not that powerful<br>Parsar with no back tracking<br>(frist set, follow set, selection set)</p><p><a href="https://www.google.com/url?sa=i&url=https://www.geeksforgeeks.org/ambiguous-grammar/&psig=AOvVaw16puthtwLbOpQ45_NJxyBy&ust=1711547242637000&source=images&cd=vfe&opi=89978449&ved=0CBIQjRxqFwoTCKCr_LyIkoUDFQAAAAAdAAAAABAE">Ambiguous Grammar</a></p><h3 id="會考的"><a href="#會考的" class="headerlink" title="會考的"></a>會考的</h3><ul><li>bindings</li><li>First class object<ul><li>可以 assign 到 variable</li><li>AMP</li><li>lambda</li></ul></li><li>call-by-reference, call-by-name, call-by-text, call-by-need (lazy binding)</li></ul><h3 id="Finite-State-Machine-vs-Push-Down-Automata"><a href="#Finite-State-Machine-vs-Push-Down-Automata" class="headerlink" title="Finite State Machine vs Push Down Automata"></a>Finite State Machine vs Push Down Automata</h3><h4 id="FSM"><a href="#FSM" class="headerlink" title="FSM"></a>FSM</h4><ul><li>$M &#x3D; (Q, \Sigma, \delta, g_0, F)$</li><li>$\delta(q_0, a) &#x3D; q_2$</li></ul><h4 id="PDA"><a href="#PDA" class="headerlink" title="PDA"></a>PDA</h4><ul><li>$M &#x3D; (Q, \Sigma, \Gamma, \delta, q_0, Z_0, F)$<ul><li>$Z_0$: initial</li><li>$\Gamma$: all the state of symbols</li></ul></li><li>$\delta(q_0, Z_a, a) &#x3D; q_1$, (push, pop, e)</li></ul><h5 id="Example-2-1"><a href="#Example-2-1" class="headerlink" title="Example 2"></a>Example 2</h5><p>丟進stack<br>b<br>b<br>b<br>a<br>a<br>a</p><p>丟進c 消光 b<br>丟進d 消光 a</p><h4 id=""><a href="#" class="headerlink" title=""></a></h4>]]></content>
    
    
    
    <tags>
      
      <tag>Compilier</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python 筆記</title>
    <link href="/notes/2024/03/27/python-notes/"/>
    <url>/notes/2024/03/27/python-notes/</url>
    
    <content type="html"><![CDATA[<h3 id="讀取-env"><a href="#讀取-env" class="headerlink" title="讀取 .env"></a>讀取 .env</h3><h4 id="env"><a href="#env" class="headerlink" title=".env"></a>.env</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">MY_TOKEN = &quot;example token&quot;<br></code></pre></td></tr></table></figure><h4 id="讀取"><a href="#讀取" class="headerlink" title="讀取"></a>讀取</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">from</span> dotenv <span class="hljs-keyword">import</span> load_dotenv<br><br>load_dotenv() <span class="hljs-comment"># load .env 的東東</span><br><br>MY_TOKEN = os.getenv(<span class="hljs-string">&#x27;MY_TOKEN&#x27;</span>)<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Compiler 筆記 (2)</title>
    <link href="/notes/2024/03/26/compiler-2/"/>
    <url>/notes/2024/03/26/compiler-2/</url>
    
    <content type="html"><![CDATA[<blockquote><p>參考 清華大學 李政崑老師 編譯器設計講義</p></blockquote><h2 id="Terminlogy"><a href="#Terminlogy" class="headerlink" title="Terminlogy"></a>Terminlogy</h2><ul><li>Gramma<ul><li>$X \in G $ iff $ G \rightarrow X$</li></ul></li><li>Language<ul><li>$L(G) &#x3D; $ { $X | X \in G$ }</li></ul></li><li>Alphabet<ul><li>$\Sigma$ &#x3D; {0, 1}</li><li>$L$ over $\Sigma$</li></ul></li></ul><h2 id="Context-Free-Grammar-CFG"><a href="#Context-Free-Grammar-CFG" class="headerlink" title="Context-Free Grammar (CFG)"></a>Context-Free Grammar (CFG)</h2><h4 id="Grammar-G-V-T-P-S"><a href="#Grammar-G-V-T-P-S" class="headerlink" title="Grammar G &#x3D; (V, T, P, S)"></a>Grammar G &#x3D; (V, T, P, S)</h4><ul><li><strong>V</strong>: A set of non-terminals (variables)</li><li><strong>T</strong>: A set of terminals</li><li><strong>P</strong>: A set of production rules</li><li><strong>S</strong>: Starting symbol</li></ul><h4 id="Example-1"><a href="#Example-1" class="headerlink" title="Example 1:"></a>Example 1:</h4><p>Write a grammar to represent L &#x3D; { $a^{n}b^{n}$ | $n\ge0$}</p><ul><li>G &#x3D; (V, T, P, S)</li><li>V &#x3D; {S}</li><li>T &#x3D; {a, b}</li><li>P &#x3D; {S $\rightarrow$ aSb | $\epsilon$}</li></ul><h4 id="Example-2"><a href="#Example-2" class="headerlink" title="Example 2"></a>Example 2</h4><p>Write a grammar representing a balanced expression with ‘(‘ and ‘)’</p><ul><li>G &#x3D; (V, T, P, S)</li><li>V &#x3D; {S}</li><li>T &#x3D; {(, )}</li><li>P &#x3D; {S $\rightarrow$ (S) | SS | $\epsilon$}</li></ul><h4 id="Example-3"><a href="#Example-3" class="headerlink" title="Example 3"></a>Example 3</h4><p>Write a grammar for palindrome, L &#x3D; { $W W^{T}$ | $W \in (a, b)^{*}$ }</p><ul><li>G &#x3D; (V, T, P, S)</li><li>V &#x3D; {S}</li><li>T &#x3D; {a, b}</li><li>P &#x3D; {S $\rightarrow$ aSa | bSb | a | b | $\epsilon$}</li></ul><h4 id="Example-4"><a href="#Example-4" class="headerlink" title="Example 4"></a>Example 4</h4><p>L &#x3D; { $WcW^T$ | $W \in (a, b)^{*}$}</p><ul><li>G &#x3D; (V, T, P, S)</li><li>V &#x3D; {S}</li><li>T &#x3D; {a, b, c}</li><li>P &#x3D; {S $\rightarrow$ aSa | bSb | c}</li></ul><h4 id="Example-5"><a href="#Example-5" class="headerlink" title="Example 5"></a>Example 5</h4><p>Write a grammar representing an expression with equal number of a, b</p><ul><li>G &#x3D; (V, T, P, S)</li><li>V &#x3D; {S}</li><li>T &#x3D; {a, b}</li><li>P &#x3D; {S $\rightarrow$ aSb | bSa | SS | $\epsilon$}</li></ul><h3 id="Ambiguous-Grammar"><a href="#Ambiguous-Grammar" class="headerlink" title="Ambiguous Grammar"></a>Ambiguous Grammar</h3><ul><li>一個 sentence 可以由某文法推導出兩個或兩個以上的剖析樹 (parse tree)</li></ul><h4 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h4><p>$$<br>  \begin{align}<br>    E &amp;\rightarrow E + E \newline<br>    &amp;\rightarrow E * E \newline<br>    &amp;\rightarrow \text{ID} \newline<br>    &amp;\rightarrow \text{number} \newline<br>    &amp;\rightarrow (E)<br>  \end{align}<br>$$<br>  Target: 2 + 3 + 2</p><h3 id="Un-Ambiguous-Grammar"><a href="#Un-Ambiguous-Grammar" class="headerlink" title="Un-Ambiguous Grammar"></a>Un-Ambiguous Grammar</h3><h4 id="Example-1-1"><a href="#Example-1-1" class="headerlink" title="Example 1"></a>Example 1</h4><ul><li>乘法在 lower level，因為 priority 比加法高</li><li>加法和乘法都是 left associative<br>$$<br>\begin{align}<br>  E &amp;\rightarrow E + \text{term} \newline<br>  &amp;\rightarrow \text{term} \newline\newline<br>  \text{term} &amp;\rightarrow \text{term} * \text{factor} \newline<br>  &amp;\rightarrow \text{factor} \newline\newline<br>  \text{factor} &amp;\rightarrow \text{number} \newline<br>  &amp;\rightarrow (E)<br>\end{align}<br>$$</li></ul><h4 id="Example-2-1"><a href="#Example-2-1" class="headerlink" title="Example 2"></a>Example 2</h4><ul><li>exponent 在 lower level，因為 priority 比加法和乘法高</li><li>exponent 是 right associative<br>$$<br>\begin{align}<br>  E &amp;\rightarrow E + \text{term} \newline<br>  &amp;\rightarrow \text{term} \newline\newline<br>  \text{term} &amp;\rightarrow \text{term} * \text{expo} \newline<br>  &amp;\rightarrow \text{expo} \newline\newline<br>  \text{expo} &amp;\rightarrow \text{factor} ^ \text{expo} \newline<br>  &amp;\rightarrow \text{factor} \newline\newline<br>  \text{factor} &amp;\rightarrow \text{number} \newline<br>  &amp;\rightarrow (E)<br>\end{align}<br>$$</li></ul><h2 id="Recursion"><a href="#Recursion" class="headerlink" title="Recursion"></a>Recursion</h2><ul><li><strong>任何left recursion都可以用數學轉換成right recursion</strong></li><li>With right recursion, no reduction takes place until the entire list of elements has been read; with left recursion, a reduction takes place as each new list element is encountered. Left recursion can therefore save a lot of stack space.<ul><li><a href="https://www.ibm.com/docs/en/zvm/7.2?topic=topics-right-recursion-versus-left-recursion">Right Recursion versus Left Recursion</a></li></ul></li><li>With a left-recursive grammar, the top-down parser can expand the frontier indefinitely without generating a leading terminal symbol that the parser can either match or reject. To fix this problem, a compiler writer can convert the left-recursive grammar so that it uses only right-recursion.<ul><li><a href="https://www.sciencedirect.com/topics/computer-science/left-recursion">Left-Recursion</a></li></ul></li></ul><h3 id="Example-1-2"><a href="#Example-1-2" class="headerlink" title="Example 1"></a>Example 1</h3><h4 id="Left-Recursion"><a href="#Left-Recursion" class="headerlink" title="Left-Recursion"></a>Left-Recursion</h4><p>$$<br>  \begin{align}<br>    S &amp;\rightarrow S\alpha | \beta<br>  \end{align}<br>$$</p><h4 id="Right-Recursion"><a href="#Right-Recursion" class="headerlink" title="Right-Recursion"></a>Right-Recursion</h4><p>$$<br>  \begin{align}<br>    S &amp;\rightarrow \beta S’ \newline<br>    S’ &amp;\rightarrow \alpha S’ | \epsilon<br>  \end{align}<br>$$</p><h3 id="Example-2-2"><a href="#Example-2-2" class="headerlink" title="Example 2"></a>Example 2</h3><h4 id="Left-Recursion-1"><a href="#Left-Recursion-1" class="headerlink" title="Left-Recursion"></a>Left-Recursion</h4><p>$$<br>  \begin{align}<br>    E &amp;\rightarrow E + \text{term} \newline<br>    &amp;\rightarrow \text{term} \newline\newline<br>    \text{term} &amp;\rightarrow \text{term} * \text{factor} \newline<br>    &amp;\rightarrow \text{factor} \newline\newline<br>    \text{factor} &amp;\rightarrow \text{number} \newline<br>    &amp;\rightarrow (E)<br>  \end{align}<br>$$</p><h4 id="Right-Recursion-1"><a href="#Right-Recursion-1" class="headerlink" title="Right-Recursion"></a>Right-Recursion</h4><p>$$<br>  \begin{align}<br>    E &amp;\rightarrow TE’ \newline<br>    E’ &amp;\rightarrow +TE’ | \epsilon \newline<br>    T &amp;\rightarrow FT’ \newline<br>    T’ &amp;\rightarrow *FT’ | \epsilon \newline<br>    F &amp;\rightarrow (E) | id<br>  \end{align}<br>$$</p><h3 id="Example-3-1"><a href="#Example-3-1" class="headerlink" title="Example 3"></a>Example 3</h3><h4 id="Left-Recursion-2"><a href="#Left-Recursion-2" class="headerlink" title="Left-Recursion"></a>Left-Recursion</h4><p>$$<br>  \begin{align}<br>    E &amp;\rightarrow E + T \newline<br>    &amp;\rightarrow T \newline<br>    T &amp;\rightarrow T * P \newline<br>    &amp;\rightarrow P \newline<br>    P &amp;\rightarrow F ^ P\newline<br>    &amp;\rightarrow F \newline<br>    F &amp;\rightarrow id \newline<br>    &amp;\rightarrow (E)<br>  \end{align}<br>$$</p><h4 id="Right-Recursion-2"><a href="#Right-Recursion-2" class="headerlink" title="Right-Recursion"></a>Right-Recursion</h4><p>$$<br>  \begin{align}<br>    E &amp;\rightarrow TE’ \newline<br>    E’ &amp;\rightarrow +TE’ | \epsilon \newline<br>    T &amp;\rightarrow PT’ \newline<br>    T’ &amp;\rightarrow *PT’ | \epsilon \newline<br>    P &amp;\rightarrow F ^ P \newline<br>    &amp;\rightarrow F \newline<br>    F &amp;\rightarrow (E) | id<br>  \end{align}<br>$$</p><p><a href="https://www.youtube.com/watch?v=IO5ie7GbJGI">Problem of Left Recursion and Solution in CFGs</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>Compilier</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>作業系統筆記</title>
    <link href="/notes/2024/03/13/os-1/"/>
    <url>/notes/2024/03/13/os-1/</url>
    
    <content type="html"><![CDATA[<blockquote><p>周志遠教授作業系統開放式課程</p></blockquote><h1 id="Course-Contents"><a href="#Course-Contents" class="headerlink" title="Course Contents"></a>Course Contents</h1><ul><li>Overview</li><li>Process Management</li><li>Process Coordination</li><li>Memory Management</li><li>Storage Management</li></ul><h1 id="Historical-Prospective"><a href="#Historical-Prospective" class="headerlink" title="Historical Prospective"></a>Historical Prospective</h1><ul><li><p>Mainframe Systems</p><ul><li>Batch</li><li>Multi-programming</li><li>Time-sharing</li></ul></li><li><p>Computer-system Architecture</p><ul><li>Desktop Systems: single processor</li><li>Parellel Systems: tightly coupled</li><li>Distributed Systems: loosely coupled</li></ul></li><li><p>Special-purpose Systems</p><ul><li>Real-Time Systems</li><li>Multimedia Systems</li><li>Handheld Systems</li></ul></li></ul><h2 id="Mainframe-Systems"><a href="#Mainframe-Systems" class="headerlink" title="Mainframe Systems"></a>Mainframe Systems</h2><ul><li>最早的電腦，體積很大，用於科學計算</li><li>IO device 很慢<ul><li>card reader&#x2F;printer, tape drivers</li></ul></li><li>Evolution:<ul><li>Batch -&gt; Multi-programming -&gt; Time-sharing</li></ul></li><li>現在說的 Mainframe 是指專門做某工作的機器<ul><li>For critical application with better <strong>reliability &amp; security</strong></li><li>Bulk data processing</li><li>廣泛使用於醫院、銀行</li></ul></li></ul><h3 id="Batch-Systems"><a href="#Batch-Systems" class="headerlink" title="Batch Systems"></a>Batch Systems</h3><p><img src="/notes/./images/os-1/BatchSystem.png" alt="Batch System"></p><ul><li>Process steps:<ul><li>Users submit jobs (program, data, control card)</li><li>Operator(人) sort jobs with similar requirements</li><li><strong>OS simply transfer control from one job to the next</strong></li></ul></li><li>缺點<ul><li>一次只能做一個工作</li><li>user 和 jobs 之間無法互動，執行過程中不能做其他事情</li><li><strong>CPU 常常耍廢</strong><ul><li>資源使用率很低</li><li>IO 速度 &lt;&lt; CPU 速度</li></ul></li></ul></li></ul><h3 id="Multi-programming-Systems"><a href="#Multi-programming-Systems" class="headerlink" title="Multi-programming Systems"></a>Multi-programming Systems</h3><ul><li>Overlaps the I&#x2F;O and computation of jobs<ul><li>某 program 在做 IO 時，CPU 不用等他做完，先做其他的 program</li></ul></li><li>Spooling (Simultaneous Peripheral Operation On-Line)<ul><li>做 IO 的過程不需要 CPU 參與</li><li>只需要 IO 做完再 notify CPU</li><li>靠 interrupt 達成</li></ul></li><li>Load 很多 jobs 到 Main memory，讓 CPU 決定現在要執行哪個</li><li>以上的工作包含<ul><li>Memory Management</li><li>CPU Scheduling</li><li>I&#x2F;O System</li></ul></li></ul><h3 id="Multi-tasking-Systems"><a href="#Multi-tasking-Systems" class="headerlink" title="Multi-tasking Systems"></a>Multi-tasking Systems</h3><ul><li>Multi-programming 雖然 CPU 的使用率提高了，但不是 <strong>interactive</strong>，最大問題就是依然只能一次執行一個</li><li>Time-sharing<ul><li>CPU 執行時，可以很頻繁的偵測 IO device 有沒有 input，就可以偵測使用者的互動</li><li>每個 job 只執行幾個 millisecond，就切換其他 job，讓使用者覺得每個程式好像同時在執行</li><li>螢幕、鍵盤都是這種概念</li></ul></li><li>可以讓多個使用者分享同個電腦</li><li>Switch jobs when<ul><li>finish</li><li>waiting IO</li><li>a short time peroid</li></ul></li><li>以上的工作包含<ul><li>Virtual Memory<ul><li>讓 memory 越大越好，可以 Load 更多 programs</li></ul></li><li>File System and Disk Management</li><li>Process Synchronization and Deadlock</li></ul></li></ul><p><img src="/notes/./images/os-1/MainframeSystemSummary.png" alt="Mainframe System Summary"></p><h2 id="Computer-system-Architecture"><a href="#Computer-system-Architecture" class="headerlink" title="Computer-system Architecture"></a>Computer-system Architecture</h2><h3 id="Desktop-Systems-PC"><a href="#Desktop-Systems-PC" class="headerlink" title="Desktop Systems: PC"></a>Desktop Systems: PC</h3><ul><li>Single user</li><li>GUI</li><li>lack of file and OS protection<ul><li>那時候沒有考慮到後來出現的網路</li></ul></li></ul><h3 id="Parallel-Systems"><a href="#Parallel-Systems" class="headerlink" title="Parallel Systems"></a>Parallel Systems</h3><ul><li><strong>multiprocessor</strong> or <strong>tightly coupled system</strong><ul><li>More than one CPU&#x2F;core in close communication</li><li>Usually communicate through <strong>shared memory</strong></li></ul></li><li>Purposes<ul><li>Throughput<ul><li>計算量增加</li></ul></li><li>Economical<ul><li>很多東西可以共用，memory、CPU、IO device、主機板…</li></ul></li><li>Reliability<ul><li>一個 CPU 掛了，其他還能繼續工作</li></ul></li></ul></li></ul><p><img src="/notes/./images/os-1/ParallelSystems.png" alt="Parallel Systems"></p><h4 id="Symmetric-multiprocessor-system-SMP"><a href="#Symmetric-multiprocessor-system-SMP" class="headerlink" title="Symmetric multiprocessor system (SMP)"></a>Symmetric multiprocessor system (SMP)</h4><ul><li>每個 processor 角色都相同，都由 OS 控制</li><li>現在幾乎都是 SMP</li><li>Require <strong>extensive synchronization</strong><ul><li>overhead 會比較大</li></ul></li></ul><h4 id="Asymmetric-multiprocessor-system"><a href="#Asymmetric-multiprocessor-system" class="headerlink" title="Asymmetric multiprocessor system"></a>Asymmetric multiprocessor system</h4><ul><li>有一個 Master CPU 和很多 multiple slave CPUs</li><li>每個 processor 會被 assign 特定工作</li><li>Master CPU 無法用來計算，只能用來管理</li><li>通常用在比較大的 system</li></ul><h4 id="Multi-Core-Processor"><a href="#Multi-Core-Processor" class="headerlink" title="Multi-Core Processor"></a>Multi-Core Processor</h4><ul><li>A CPU with <strong>multiple cores on the same die (chip)</strong></li><li>On-chip communication 會比 between-chip communication 還要快</li><li>One chip with multiple cores 會比 multiple single-core chips 還要省電</li></ul><p><img src="/notes/./images/os-1/MultiCoreProcessor.png" alt="Multi-Core Processor"></p><h4 id="Many-Core-Processor"><a href="#Many-Core-Processor" class="headerlink" title="Many-Core Processor"></a>Many-Core Processor</h4><ul><li>GPGPU<ul><li>Single Instruction Multiple Data (SIMD) 的操作</li><li>上千個 core</li></ul></li><li>Intel Xeon Phi</li><li>TILE64</li></ul><h4 id="Memory-Access-Architecture"><a href="#Memory-Access-Architecture" class="headerlink" title="Memory Access Architecture"></a>Memory Access Architecture</h4><ul><li>Uniform Memory Access (UMA)<ul><li>每個 CPU access memory 的速度相同，使用者不用在乎現在是在哪個 CPU 上執行</li><li>Identical processors</li><li>most commodity computers</li></ul></li></ul><p><img src="/notes/./images/os-1/UMA.png" alt="UMA"></p><ul><li>Non-Uniform Memory Access (NUMA)<ul><li>often made by physically linking two or more SMPs</li><li>One SMP can directly access memory or another SMP</li><li>Memory access across link 會比較慢</li><li>hierarchy 的架構，可以建構更大的電腦</li><li>高效能計算系統都是 NUMA</li></ul></li></ul><p><img src="/notes/./images/os-1/NUMA.png" alt="NUMA"></p><h3 id="Distributed-Systems"><a href="#Distributed-Systems" class="headerlink" title="Distributed Systems"></a>Distributed Systems</h3><ul><li>loosely coupled system</li><li>每個 system 有自己的 local memory</li><li>Easy to scale</li><li>Purposes<ul><li>Resource sharing</li><li>Load sharing<ul><li>某電腦工作量太大可以分給別台做</li></ul></li><li>Reliability<ul><li>一台電腦壞掉不會影響其他台</li></ul></li></ul></li></ul><h4 id="Client-Server"><a href="#Client-Server" class="headerlink" title="Client-Server"></a>Client-Server</h4><ul><li>Eaiser to manage and control resources</li><li>Server 可能會變成 bottleneck 和 single failure point</li><li>FTP</li></ul><h4 id="Peer-to-Peer"><a href="#Peer-to-Peer" class="headerlink" title="Peer-to-Peer"></a>Peer-to-Peer</h4><ul><li>Decentralized</li><li>ppStream, bitTorrent, Internet</li></ul><h4 id="Clustered-Systems"><a href="#Clustered-Systems" class="headerlink" title="Clustered Systems"></a>Clustered Systems</h4><ul><li>Cluster computers share storage</li><li>Local Area Network (LAN)，更快</li><li>Asymmetric clustering, Symmetric clustering</li></ul><p><img src="/notes/./images/os-1/SystemArchitecture.png" alt="System Architecture"></p><h2 id="Special-purpose-Systems"><a href="#Special-purpose-Systems" class="headerlink" title="Special-purpose Systems"></a>Special-purpose Systems</h2><h3 id="Real-Time-Operating-Systems"><a href="#Real-Time-Operating-Systems" class="headerlink" title="Real-Time Operating Systems"></a>Real-Time Operating Systems</h3><ul><li>Well-defined <strong>fixed-time contraints</strong><ul><li>Real-time 代表會在 deadlines 之前做完，跟速度沒關係</li></ul></li><li>Soft real-time<ul><li>Missing the deadline is unwanted, but is not immediately critical</li><li>Critical real-time task gets <strong>priority</strong> over others</li><li>Ex: multimedia streaming<ul><li>畫面不是馬上畫出來，可能會先出現線條，然後顏色，最後高解析度</li></ul></li></ul></li><li>Hard real-time<ul><li>Fundamental failure</li><li>Secondary storage limited or absent<ul><li>沒有 harddrive，因為讀取太慢，而且讀取時間不好掌握</li></ul></li><li>Ex: nuclear power plant controller</li></ul></li></ul><h3 id="Multimedia-Systems"><a href="#Multimedia-Systems" class="headerlink" title="Multimedia Systems"></a>Multimedia Systems</h3><ul><li>A wide range of applications including audio and video files</li><li>Issues<ul><li>Timing contraints</li><li>On-demand&#x2F;live streaming</li><li>Compression</li></ul></li></ul><h3 id="Handheld-Embedded-Systems"><a href="#Handheld-Embedded-Systems" class="headerlink" title="Handheld&#x2F;Embedded Systems"></a>Handheld&#x2F;Embedded Systems</h3><ul><li>Hardware specialized OS</li><li>Issues<ul><li>Limited memory</li><li>Slow processors</li><li>Battery consumption</li><li>Samll display screens</li></ul></li></ul><h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><ul><li>What is an Operating System?</li><li>Computer-System Organization</li><li>Hardware Protection</li></ul><h2 id="What-is-an-Operating-System"><a href="#What-is-an-Operating-System" class="headerlink" title="What is an Operating System"></a>What is an Operating System</h2><ul><li><p>Computer System</p><ul><li>Hardware<ul><li>provides basic <strong>computing resources</strong></li><li>CPU, memory, I&#x2F;O devices…</li></ul></li><li>OS<ul><li><strong>controls</strong> and <strong>coordinates</strong> the use of the <strong>hardware&#x2F;resources</strong></li></ul></li><li>Application<ul><li>define the ways in which the system resources are used to solve computer problems</li></ul></li><li>User<ul><li>people, machines, other computers</li></ul></li></ul></li><li><p>An OS is the <strong>permanent</strong> software that <strong>controls&#x2F;abstract</strong> hardware resources for user applications</p><ul><li>把下層的 hardware 變成一堆 API 讓使用者用，virtual 的概念</li></ul></li><li><p>Multi-tasking Operating Systems</p><ul><li>Manages resources and processes to support different user applications</li><li>Provides API for user applications</li></ul></li><li><p>General-Purpose Operating Systems</p><ul><li>使用 printf 的時候要印到螢幕，是 OS 負責的，所以要 system call</li><li>user call printf -&gt; printf call system call -&gt; system call call driver…</li><li>Device drivers 是 OS 的一部分<br><img src="/notes/./images/os-1/GeneralPurposeOperatingSystems.png" alt="General-Purpose Operating Systems"></li></ul></li><li><p>Definition of an Operating System</p><ul><li>Resource allocator<ul><li><strong>manages</strong> and <strong>allocates resources</strong> to insure efficiency and fairness</li></ul></li><li>Control program<ul><li><strong>controls</strong> the execution of user <strong>programs</strong> and operations of <strong>I&#x2F;O devices</strong> to prevent errors and improper use of computer</li></ul></li><li>Kernel<ul><li>the one program running at all times</li></ul></li></ul></li><li><p>Goals of an Operating Systems</p><ul><li>Convenience<ul><li>make computer system easy to use and compute</li><li>in particular for small PC</li></ul></li><li>Efficiency<ul><li>use computer hardware in an efficient manner</li><li>especially for large, shared, multiuser systems</li></ul></li><li>Two goals are sometimes contradictory</li></ul></li><li><p>Importance of an Operating Systems</p><ul><li>System API are the <strong>only</strong> interface between user applications and hardware<ul><li>API are designed for general-purpose, not performance driven</li></ul></li><li>OS code cannot allow any bug<ul><li>Any break causes reboot</li><li>有 bug 代表整台電腦都毀了</li></ul></li><li>The owner of OS technology controls the software &amp; hardware industry<ul><li>ex: hardware 和 software 都要 fllow microsoft 的 API、Mac hardware 都自己做</li></ul></li></ul></li></ul><h2 id="Computer-System-Organization"><a href="#Computer-System-Organization" class="headerlink" title="Computer-System Organization"></a>Computer-System Organization</h2><ul><li>One or more CPUs, device controllers connect through <strong>common bus</strong> providing access to <strong>shared memory</strong></li><li>Goal: <strong>Concurrent</strong> execution of CPUs and devices competing for memory cycles<ul><li>OS 要負責不讓 access memory 出問題，不讓它發生衝突</li></ul></li></ul><p><img src="/notes/./images/os-1/ComputerSystemOrganization.png" alt="Computer-System Organization"></p><h3 id="Device-Controller"><a href="#Device-Controller" class="headerlink" title="Device Controller"></a>Device Controller</h3><ul><li>Each device controller is in charge of a particular device type</li><li>Status reg 用來記錄現在 device controller 是 busy 還是 idle</li><li>Data reg 和 buffer 都是用來存資料，會先寫到 reg 再寫到 buffer</li><li>Device controller 有自己的 CPU 去 access disk 資料到自己的 buffer</li><li>Memory 是 CPU 在用的，所以 CPU 負責 moves data from&#x2F;to memory to&#x2F;from local buffers in device controllers</li></ul><p><img src="/notes/./images/os-1/DeviceController.png" alt="Device Controller"></p><h3 id="Busy-wait-output"><a href="#Busy-wait-output" class="headerlink" title="Busy&#x2F;wait output"></a>Busy&#x2F;wait output</h3><ul><li>Simplest way to program device<ul><li>Use instructions to test when device is ready</li></ul></li><li>浪費 CPU，常常 IDLE<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">define</span> OUT_CHAR 0x1000 <span class="hljs-comment">// device data register</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> OUT_STATUS 0x1001 <span class="hljs-comment">// device status register</span></span><br><br>current_char = mystring;<br><span class="hljs-keyword">while</span> (*current_char != <span class="hljs-string">&#x27;\0&#x27;</span>) &#123;<br>  <span class="hljs-built_in">poke</span>(OUT_CHAR,*current_char); <span class="hljs-comment">// 寫到 device controller 的 buffer</span><br>  <span class="hljs-keyword">while</span> (<span class="hljs-built_in">peek</span>(OUT_STATUS) != <span class="hljs-number">0</span>); <span class="hljs-comment">// busy waiting</span><br>  current_char++;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h3 id="Interrupt-I-O"><a href="#Interrupt-I-O" class="headerlink" title="Interrupt I&#x2F;O"></a>Interrupt I&#x2F;O</h3><ul><li>Busy&#x2F;wait 很沒效率<ul><li>CPU can’t do other work while testing device</li><li>Hard to do simultaneous I&#x2F;O</li></ul></li><li>Interrupts allow a device to <strong>change the flow of control in the CPU</strong><ul><li>讓 CPU 可以做其他程式的事情，而不是等 IO 做完</li><li>Causes subroutine call to handle device</li></ul></li></ul><h4 id="Interrupt-I-O-Timeline"><a href="#Interrupt-I-O-Timeline" class="headerlink" title="Interrupt I&#x2F;O Timeline"></a>Interrupt I&#x2F;O Timeline</h4><ul><li>Interrupt time line for I&#x2F;O on a single process<br><img src="/notes/./images/os-1/InterruptTimeline.png" alt="Interrupt I/O Timeline"><br>可以看到在做 IO 時 CPU 在做其他事情，等 IO 做完後 call 一個 interrupt 打斷 CPU 原本在做的事，讓 CPU 先過來搬資料，interrupt 結束後 CPU 又回去做它原本的事情</li></ul><h4 id="Interrupt-Driven-I-O"><a href="#Interrupt-Driven-I-O" class="headerlink" title="Interrupt-Driven I&#x2F;O"></a>Interrupt-Driven I&#x2F;O</h4><p><img src="/notes/./images/os-1/InterruptDrivenIO.png" alt="Interrupt-Driven I/O"></p><h4 id="Interrupt"><a href="#Interrupt" class="headerlink" title="Interrupt"></a>Interrupt</h4><ul><li>現在每個 OS 都是 interrupt driven</li><li>可能是 Hardware interrupt 或 Software interrupt<ul><li><strong>Hardware</strong> may trigger an interrupt at any time by sending a <strong>signal</strong> to CPU<ul><li>比較被動</li></ul></li><li><strong>Software</strong> may trigger an interrupt either by an <strong>error</strong> or by a user request for an operating system serivce (system call)<ul><li>error 像是 division by zero 或 invalid memory access，會讓 program counter reset 到可以印出錯誤訊息的地方，而不是 crash，比較被動</li><li>system call 就是要叫 OS 做事，呼叫 OS 的 API，比較主動<ul><li>間接處理，可以區分使用者的 function call 和 OS 的 function call</li></ul></li><li>Software interrupt 叫作 <strong>trap</strong></li></ul></li></ul></li></ul><h4 id="Hardware-interrupt"><a href="#Hardware-interrupt" class="headerlink" title="Hardware interrupt"></a>Hardware interrupt</h4><p><img src="/notes/./images/os-1/Hardwareinterrupt.png" alt="Hardware interrupt"></p><ul><li>interrupt vector 是 array of function pointers，array 大小是固定的</li><li>signal 都會有一個 singal number，根據這個 number 去找 vector 上的欄位</li><li>每個 port 的 hardware 有燒死的 singal number， 裝 driver 的時候會 overwrite 那個欄位的 pointer 的位置，去執行你要處理的程式碼</li></ul><h4 id="Software-interrupt"><a href="#Software-interrupt" class="headerlink" title="Software interrupt"></a>Software interrupt</h4><ul><li>是用 switch case 而不是 array，因為軟體有無限的可能性，跟硬體無關，可以任意增加不同的 system call</li><li>流程跟 hardware interrupt 差不多</li></ul><p><img src="/notes/./images/os-1/Softwareinterrupt.png" alt="Software interrupt"></p><h4 id="Common-Functions-of-Interrupts"><a href="#Common-Functions-of-Interrupts" class="headerlink" title="Common Functions of Interrupts"></a>Common Functions of Interrupts</h4><ul><li>Interrupt transfers control to the interrupt service routine generally, through the <strong>interrupt vector</strong>, which contains the <strong>addresses</strong> (function pointer) of all the <strong>service (i.e. interrupt handler) routines</strong></li><li>Interrupt architecture must save the address of the interrupted instruction<ul><li>才能在 interrupt 結束後執行原本的程式</li></ul></li><li>Incoming interrupts are <strong>disabled</strong> while another interrupt is being processed to prevent a lost interrupt<ul><li>避免發生很多 synchronize 的問題，這些問題需要大量的 overhead 去處理</li></ul></li></ul><h3 id="Storage-Device-Hierarchy"><a href="#Storage-Device-Hierarchy" class="headerlink" title="Storage-Device Hierarchy"></a>Storage-Device Hierarchy</h3><p><img src="/notes/./image/os-1/StorageDeviceHierarchy.png" alt="Storage-Device Hierarchy"></p><ul><li><p>真正的大型的系統最後還是用 tapes，因為非常 reliable</p></li><li><p>這是最傳統的架構，現在有很多其他的 storage device 會插在中間</p></li><li><p>Storage systems organized in hierarchy</p><ul><li>speed, cost, volatility</li><li>volatile 關掉會遺失</li></ul></li><li><p><strong>Main memory</strong> only large storage media that the <strong>CPU can access directly</strong></p></li><li><p>Secondary storage</p><ul><li>memory 以下都叫做 secondary storage</li><li><strong>large nonvolatile storage</strong></li></ul></li></ul><h4 id="Random-Access-Memory"><a href="#Random-Access-Memory" class="headerlink" title="Random-Access Memory"></a>Random-Access Memory</h4><ul><li><p>DRAM (Dynamic RAM)</p><ul><li>one transistor</li><li>less power</li><li>must be periodically refreshed </li><li>體積小，速度比較慢</li><li>因為 CPU 有很多 core， RAM 的速度其實就那樣，channel 的 bus 其實才是真正的 bottleneck</li></ul></li><li><p>SRAM (Static Ram)</p><ul><li>six transistors</li><li>more power</li><li>cache memory</li></ul></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>OS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Compiler 筆記 (1)</title>
    <link href="/notes/2024/03/07/compiler-1/"/>
    <url>/notes/2024/03/07/compiler-1/</url>
    
    <content type="html"><![CDATA[<blockquote><p>參考 清華大學 李政崑老師 編譯器設計講義</p></blockquote><h2 id="compilers-and-Assemblers"><a href="#compilers-and-Assemblers" class="headerlink" title="compilers and Assemblers"></a>compilers and Assemblers</h2><p>High-level language program (C)<br>⇒ C compiler<br>⇒ Assembly language program (for MIPS)<br>⇒ Assembler<br>⇒ Binary machine language program (for MIPS)</p><h2 id="Analysis-Synthesis-Model"><a href="#Analysis-Synthesis-Model" class="headerlink" title="Analysis-Synthesis Model"></a>Analysis-Synthesis Model</h2><p>Compilation 可以分成兩個部分</p><ul><li>Analysis (front end)<ul><li>Breaks up the source program into constituent pieces</li><li>Creates an Intermediate Representation (IR)</li></ul></li><li>Synthesis (back end)<ul><li>Constructs the desired target program from the IR</li><li>(Optionally) performs optimizations</li></ul></li></ul><p><img src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEjy5NjmBdRfsrfg96b3KYpevQqRBAygBtuvsszgZpXmPhyy7M9VH81zkvqd-uhdJBBtWL_u0_iaHC8nhSWK1gW7_0DNHxSofoPpj5CD76mp5wCRN7fSz5cDkzZmns_HZ12pRbBD37q9jYY/s1600/aandSmodel.bmp" alt="Analysis-Synthesis Model"></p><h2 id="Phase-of-a-Compiler"><a href="#Phase-of-a-Compiler" class="headerlink" title="Phase of a Compiler"></a>Phase of a Compiler</h2><p><img src="https://cdn1.byjus.com/wp-content/uploads/2022/03/phase-of-compiler.png" alt="Phase of a compiler"></p><h3 id="Symbol-Table-Management"><a href="#Symbol-Table-Management" class="headerlink" title="Symbol-Table Management"></a>Symbol-Table Management</h3><ul><li>Essential function of a compiler<ul><li>To <strong>record the identifier</strong> used in the source program and collect information about various attributes of each identifier<ul><li>allocate storage, type, scope, etc</li></ul></li></ul></li><li>Symbol Table<ul><li>A data structure containing a record for each identifiers, with fields for the attributes</li><li>When a identifier is detected by the <strong>lexical analysis(詞法分析)</strong> , it is entered into the symbol table</li><li>The attributes are determined during <strong>syntax analysis(語法分析)</strong> and <strong>semanic analysis(語義分析)</strong></li></ul></li></ul><h3 id="Analysis-Phases"><a href="#Analysis-Phases" class="headerlink" title="Analysis Phases"></a>Analysis Phases</h3><ul><li>Lexical Analysis</li><li>Syntax Analysis</li><li>Semantic Analysis</li></ul><p><img src="/notes/./images/compiler-1/AnalysisPhasesExample.png" alt="Analysis Phases Example"></p><h3 id="Intermediate-Code-Generation"><a href="#Intermediate-Code-Generation" class="headerlink" title="Intermediate Code Generation"></a>Intermediate Code Generation</h3><ul><li>Two properties<ul><li>Easy to produce</li><li>Easy to translate into the target program</li></ul></li><li>Examples<ul><li>Graph representations</li><li>Postfix notation</li><li>Three-address code<ul><li>每條指令最多有三個 operands</li></ul></li></ul></li></ul><p><img src="/notes/./images/compiler-1/IntermediateCodeGenerationExample.png" alt="Intermediate Code Generation Example"></p><h3 id="Code-Optimization"><a href="#Code-Optimization" class="headerlink" title="Code Optimization"></a>Code Optimization</h3><ul><li>Attempts to improve the intermediate code<ul><li>So the faster-running machine code will result</li></ul></li></ul><p><img src="/notes/./images/compiler-1/CodeOptimizationExample.png" alt="Code Optimization Example"></p><h3 id="Code-Generation"><a href="#Code-Generation" class="headerlink" title="Code Generation"></a>Code Generation</h3><ul><li>Generates target code<ul><li>Consisting of reocatable machine code or assembly code</li></ul></li></ul><p><img src="/notes/./images/compiler-1/CodeGenerationExample.png" alt="Code Generation Example"></p><h3 id="Counsins-of-the-compiler"><a href="#Counsins-of-the-compiler" class="headerlink" title="Counsins of the compiler"></a>Counsins of the compiler</h3><ul><li>Preprocessors<ul><li>Produce input to compilers</li><li>Macro processing</li><li>File inclusion</li></ul></li><li>Assemblers</li><li>Loaders and Link-Editors</li></ul><h2 id="Evolution-of-Programming-Languages"><a href="#Evolution-of-Programming-Languages" class="headerlink" title="Evolution of Programming Languages"></a>Evolution of Programming Languages</h2><h3 id="Imperative-language"><a href="#Imperative-language" class="headerlink" title="Imperative language"></a>Imperative language</h3><ul><li>命令式語言</li><li>指定程式該執行的確切操作</li><li>Ex: C, C++, Java, Python</li></ul><h3 id="Declarative-language"><a href="#Declarative-language" class="headerlink" title="Declarative language"></a>Declarative language</h3><ul><li>宣告式語言</li><li>只要所需的結果，而不是詳細指定要執行的步驟</li><li>Ex: SQL, HTML, CSS, Prolog</li></ul><h3 id="Von-Neumann-language"><a href="#Von-Neumann-language" class="headerlink" title="Von Neumann language"></a>Von Neumann language</h3><ul><li><p>基於 Von Neumann 電腦架構</p></li><li><p>Many widely used programming languages such as C, C++ and Java have <strong>ceased</strong> to be strictly von Neumann by adding support for parallel processing, in the form of threads.</p></li><li><p>Before C++ 11 added threads, C++ was strictly a Von Neumann language</p></li><li><p><a href="https://stackoverflow.com/questions/58312638/is-c-considered-a-von-neumann-programming-language">Is C++ considered a Von Neumann programming language?</a></p></li><li><p><a href="https://ictjournal.itri.org.tw/xcdoc/cont?xsmsid=0M236556470056558161&sid=0M250379986616668141">高效能需求應用興起記憶體內運算的新戰場</a></p></li></ul><h3 id="Object-oriented-language"><a href="#Object-oriented-language" class="headerlink" title="Object-oriented language"></a>Object-oriented language</h3><ul><li>繼承、封裝、多型</li><li>Ex: Java, C++</li></ul><h3 id="Functional-language"><a href="#Functional-language" class="headerlink" title="Functional language"></a>Functional language</h3><ul><li>在一般常見的命令式語言中，要執行操作的話是給電腦一組命令，而狀態會隨著命令的執行而改變。例如你指派變數 a 的值為 5，而隨後做了其它一些事情之後 a 就可能變成的其它值。有控制流程 (control flow)，你就可以重複執行操作</li><li>然而在純粹函數式程式語言中，你不是像命令式語言那樣命令電腦「要做什麼」，而是通過用函數來描述出問題「是什麼」，如「階乘是指從 1 到某個數的乘積」，「一個串列中數字的和」是指把第一個數字跟剩餘數字的和相加。你用宣告函數是什麼的形式來寫程式</li><li>另外，變數 (variable) 一旦被指定，就不可以更改了，你已經說了 a 就是 5，就不能再說 a 是別的什麼數</li><li>Ex: Haskell、Scala、Clojure</li></ul><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs Haskell"><span class="hljs-title">add</span> x y = x + y<br><span class="hljs-title">result</span> = add <span class="hljs-number">5</span> <span class="hljs-number">10</span><br></code></pre></td></tr></table></figure><ul><li><a href="https://learnyouahaskell.mno2.org/zh-tw/ch01/introduction">Haskell 趣學指南</a></li></ul><h3 id="Assignment-oriented-language"><a href="#Assignment-oriented-language" class="headerlink" title="Assignment-oriented language"></a>Assignment-oriented language</h3><ul><li>賦值操作來實現程式邏輯的語言</li><li>Ex: C, Java, </li><li>反例: Haskell</li></ul><h3 id="Third-generation-language"><a href="#Third-generation-language" class="headerlink" title="Third-generation language"></a>Third-generation language</h3><ul><li>相對於機器語言和組合語言而言的高階程式語言</li><li>Ex: C, Java, Python</li></ul><h3 id="Fourth-generation-language"><a href="#Fourth-generation-language" class="headerlink" title="Fourth-generation language"></a>Fourth-generation language</h3><ul><li>更高級、更抽象的程式語言，旨在簡化特定領域的應用程式開發</li><li>提供了更高程度的自動化和巨集</li><li>Ex: SQL, MATLAB</li></ul><h3 id="Scripting-language"><a href="#Scripting-language" class="headerlink" title="Scripting language"></a>Scripting language</h3><ul><li>一個指令碼通常是直譯執行而非編譯</li><li>Ex: JavaScript、Perl、PHP、Python、Ruby 和 Tcl，</li></ul><h3 id="補充"><a href="#補充" class="headerlink" title="補充"></a>補充</h3><p>如果是說 imperative programming 和 declarative programming，我查到的都是程式碼的寫法</p><ul><li><p>Imperative language</p><ul><li>命令式編程</li><li>著重在 <strong>HOW</strong>，具體表達程式碼該做什麼才能達到目標，程式一步一步按著順序照著你給他指示執行。</li><li>Imperative 比較常運用 Statement ，像是是 if, while, for, switch 等。</li><li>You tell the compiler what you want to happen, step by step.</li></ul></li><li><p>Delcarative language</p><ul><li>宣告式編程</li><li>著重在該做什麼 <strong>WHAT</strong> ，採取抽象化流程。Declarative 比較常運用表達式 expression，</li><li>Delcarative 特色是單純運算並一定會有返回值</li></ul></li></ul><p>Example: choose the odd numbers</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cs">List&lt;<span class="hljs-built_in">int</span>&gt; collection = <span class="hljs-keyword">new</span> List&lt;<span class="hljs-built_in">int</span>&gt; &#123; <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span> &#125;;<br></code></pre></td></tr></table></figure><p>With <strong>imperative programming</strong>, we’d step through this, and decide what we want:</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs cs">List&lt;<span class="hljs-built_in">int</span>&gt; results = <span class="hljs-keyword">new</span> List&lt;<span class="hljs-built_in">int</span>&gt;();<br><span class="hljs-keyword">foreach</span>(<span class="hljs-keyword">var</span> num <span class="hljs-keyword">in</span> collection)<br>&#123;<br>    <span class="hljs-keyword">if</span> (num % <span class="hljs-number">2</span> != <span class="hljs-number">0</span>)<br>          results.Add(num);<br>&#125;<br></code></pre></td></tr></table></figure><p>With <strong>declarative programming</strong>, on the other hand, you declare your desired results, but not the step-by-step:</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cs"><span class="hljs-keyword">var</span> results = collection.Where( num =&gt; num % <span class="hljs-number">2</span> != <span class="hljs-number">0</span>);<br></code></pre></td></tr></table></figure><p>Source</p><ul><li><a href="https://ithelp.ithome.com.tw/articles/10233761">Buzz Word 1 : Declarative vs. Imperative</a></li><li><a href="https://stackoverflow.com/questions/1784664/what-is-the-difference-between-declarative-and-imperative-paradigm-in-programmin">What is the difference between declarative and imperative paradigm in programming?</a></li></ul><h2 id="Lambda-Parameters"><a href="#Lambda-Parameters" class="headerlink" title="Lambda Parameters"></a>Lambda Parameters</h2><p>C++ 中，Lambda 架構是</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++">[capture clause](parameters) -&gt; return_type &#123; body &#125;<br></code></pre></td></tr></table></figure><p><strong>[ ]</strong> 空的捕獲列表，表示不捕獲任何外部變數</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp">[]() &#123; <span class="hljs-keyword">return</span> <span class="hljs-number">42</span>; &#125;<br></code></pre></td></tr></table></figure><p><strong>[&amp;]</strong> 按引用捕獲所有外部變數</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-type">int</span> x = <span class="hljs-number">10</span>;<br>[&amp;]() &#123; x++; &#125; <span class="hljs-comment">// 修改外部變數 x</span><br></code></pre></td></tr></table></figure><p><strong>[&#x3D;]</strong> 按值捕獲所有外部變數</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-type">int</span> x = <span class="hljs-number">10</span>;<br>[=]() &#123; <span class="hljs-keyword">return</span> x * <span class="hljs-number">2</span>; &#125; <span class="hljs-comment">// 訪問但不修改外部變數 x</span><br></code></pre></td></tr></table></figure><p><strong>[&#x3D;, &amp;foo]</strong> 按值捕獲所有外部變數，但特別引用了 foo 變數</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-type">int</span> x = <span class="hljs-number">10</span>;<br><span class="hljs-type">int</span> foo = <span class="hljs-number">20</span>;<br>[=, &amp;foo]() &#123; <span class="hljs-keyword">return</span> x + foo; &#125; <span class="hljs-comment">// 訪問 x 按值，訪問 foo 按引用</span><br></code></pre></td></tr></table></figure><p><strong>[bar]</strong> 按值捕獲 bar 變數</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-type">int</span> bar = <span class="hljs-number">30</span>;<br>[bar]() &#123; <span class="hljs-keyword">return</span> bar * <span class="hljs-number">3</span>; &#125;<br></code></pre></td></tr></table></figure><p><strong>[this]</strong> 按值捕獲當前物件的指標（常用於 lambda 在 class 內部的情況）</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyClass</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">MyClass</span>(<span class="hljs-type">int</span> value) : <span class="hljs-built_in">value</span>(value) &#123;&#125;<br><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">printValue</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-comment">// Lambda 捕獲當前物件的指標，可以使用內部的變數和函式</span><br>        <span class="hljs-keyword">auto</span> lambda = [<span class="hljs-keyword">this</span>]() &#123;<br>            std::cout &lt;&lt; <span class="hljs-string">&quot;Value inside lambda: &quot;</span> &lt;&lt; value &lt;&lt; std::endl; <span class="hljs-comment">// 訪問物件變數</span><br>            <span class="hljs-built_in">someMethod</span>(); <span class="hljs-comment">// 呼叫物件函式</span><br>        &#125;;<br><br>        <span class="hljs-built_in">lambda</span>(); <br>    &#125;<br><br><span class="hljs-keyword">private</span>:<br>    <span class="hljs-type">int</span> value;<br><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">someMethod</span><span class="hljs-params">()</span> </span>&#123;<br>        std::cout &lt;&lt; <span class="hljs-string">&quot;Inside someMethod&quot;</span> &lt;&lt; std::endl;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="First-Class-Object"><a href="#First-Class-Object" class="headerlink" title="First Class Object"></a>First Class Object</h2><ul><li>Entity can be stored into a variable</li><li>Something can be passed around as parameters</li><li>In C language, structure and function are consider first class objects</li></ul><h2 id="Bindings"><a href="#Bindings" class="headerlink" title="Bindings"></a>Bindings</h2><h3 id="Static-Binding"><a href="#Static-Binding" class="headerlink" title="Static Binding"></a>Static Binding</h3><ul><li>在編譯時期或者早期階段就確定呼叫哪個方法或函式</li><li>Ex: C 的函式呼叫，它在編譯時期就將函式內容綁定到識別符上，而無法在執行時期變更。</li></ul><h3 id="Dynamic-Binding"><a href="#Dynamic-Binding" class="headerlink" title="Dynamic Binding"></a>Dynamic Binding</h3><ul><li>綁定發生在 runtime，而不是在編譯時</li><li>Ex: C++ 的虛擬方法呼叫，由於多型的機制，物件的型別無法在編譯時期得知，所以綁定會在執行時期處理。</li></ul><h3 id="Fluid-Binding"><a href="#Fluid-Binding" class="headerlink" title="Fluid Binding"></a>Fluid Binding</h3><ul><li>AKA dynamic assignment</li><li>Assignments with dynamic extent to bindings that have lexical scope</li><li>Syntax<ul><li>var :&#x3D; expr during stmt-body</li></ul></li></ul><figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs scheme">(<span class="hljs-name"><span class="hljs-built_in">define</span></span> x <span class="hljs-number">10</span>)  <span class="hljs-comment">; 定義變數 x，並賦值為 10</span><br><br>(<span class="hljs-name">displayln</span> <span class="hljs-string">&quot;在動態賦值之前：&quot;</span>)<br>(<span class="hljs-name">displayln</span> x)  <span class="hljs-comment">; 輸出當前變數 x 的值</span><br><br><span class="hljs-comment">; 在這個程式碼塊內，我們動態地改變變數 x 的值</span><br>(<span class="hljs-name"><span class="hljs-built_in">let</span></span> ((<span class="hljs-name">x</span> := <span class="hljs-number">20</span> during<br>       (<span class="hljs-name"><span class="hljs-built_in">begin</span></span><br>         (<span class="hljs-name">displayln</span> <span class="hljs-string">&quot;在動態賦值內部：&quot;</span>)<br>         (<span class="hljs-name">displayln</span> x)  <span class="hljs-comment">; 輸出改變後的 x 的值</span><br>         (<span class="hljs-name"><span class="hljs-built_in">set!</span></span> x (<span class="hljs-name"><span class="hljs-built_in">*</span></span> x <span class="hljs-number">2</span>))  <span class="hljs-comment">; 修改 x 的值</span><br>         (<span class="hljs-name">displayln</span> <span class="hljs-string">&quot;在動態賦值內部修改後：&quot;</span>)<br>         (<span class="hljs-name">displayln</span> x)  <span class="hljs-comment">; 輸出修改後的 x 的值</span><br>       )))<br>  <span class="hljs-comment">; 這裡的 x 仍然是原始值</span><br>  (<span class="hljs-name">displayln</span> <span class="hljs-string">&quot;在動態賦值之後：&quot;</span>)<br>  (<span class="hljs-name">displayln</span> x)  <span class="hljs-comment">; 輸出原始值</span><br>)<br></code></pre></td></tr></table></figure><h3 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h3><figure class="highlight delphi"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs delphi"><span class="hljs-keyword">program</span> parameter-passing;<br>  <span class="hljs-keyword">var</span> i: integer;<br>  a: <span class="hljs-keyword">array</span> [<span class="hljs-number">1</span>..<span class="hljs-number">3</span>] <span class="hljs-keyword">of</span> integer;<br><br>  <span class="hljs-function"><span class="hljs-keyword">procedure</span> <span class="hljs-title">mess</span>;</span><br>    <span class="hljs-keyword">begin</span><br>      <span class="hljs-keyword">var</span> y: integer;<br>      y = a[i] + <span class="hljs-number">5</span>;<br>      writeln(<span class="hljs-string">&#x27;y=&#x27;</span>, y);<br>    <span class="hljs-keyword">end</span>;<br><br>  <span class="hljs-function"><span class="hljs-keyword">procedure</span> <span class="hljs-title">sub1</span>;</span><br>    <span class="hljs-keyword">var</span> i: integer;<br>    a: <span class="hljs-keyword">array</span> [<span class="hljs-number">1</span>..<span class="hljs-number">3</span>] <span class="hljs-keyword">of</span> integer;<br>    <span class="hljs-keyword">begin</span><br>      i := <span class="hljs-number">2</span>;<br>      a[<span class="hljs-number">1</span>] := <span class="hljs-number">5</span> ; a[<span class="hljs-number">2</span>] := <span class="hljs-number">7</span>; a[<span class="hljs-number">3</span>] := <span class="hljs-number">9</span>;<br>    mess;<br>  <span class="hljs-keyword">end</span>;<br><br>  <span class="hljs-keyword">begin</span> <br>    i := <span class="hljs-number">1</span>;<br>    a[<span class="hljs-number">1</span>] :=<span class="hljs-number">1</span> ; a[<span class="hljs-number">2</span>] := <span class="hljs-number">4</span>; a[<span class="hljs-number">3</span>] :=<span class="hljs-number">8</span> ;<br>    sub1;<br>  <span class="hljs-keyword">end</span><br></code></pre></td></tr></table></figure><ul><li><p>Suppose static binding (also known as lexical binding) is used for variable scopes. What’s the printout value of y?</p><blockquote><p>我猜 mess 裡面 i 是 1、a[i] 是 1，所以 y &#x3D; 1 + 5 &#x3D; 6</p></blockquote></li><li><p>Suppose dynamic binding is used for variable scopes. What’s the printout value of y?</p><blockquote><p>我猜 mess 裡面 i 是 2、a[i] 是 7，所以 y &#x3D; 7 + 5 &#x3D; 12</p></blockquote></li></ul><h2 id="Parameter-Passing-Schemes"><a href="#Parameter-Passing-Schemes" class="headerlink" title="Parameter Passing Schemes"></a>Parameter Passing Schemes</h2><h3 id="Call-by-reference"><a href="#Call-by-reference" class="headerlink" title="Call-by-reference"></a>Call-by-reference</h3><ul><li>Call 的瞬間就看 caller</li><li>在呼叫 function 的當下就已經決定好 parameter 的值</li></ul><h3 id="Call-by-name"><a href="#Call-by-name" class="headerlink" title="Call-by-name"></a>Call-by-name</h3><ul><li>用的時候重新看 caller</li><li>在呼叫的 function 當中每次使用到 parameter 就重新去檢查 caller 當中當下的值</li></ul><h3 id="Call-by-need"><a href="#Call-by-need" class="headerlink" title="Call-by-need"></a>Call-by-need</h3><ul><li>跟 call by name 很像，一樣去算 caller 的，但是第一次算完就存起來，不用每次都算</li><li>第一次使用時重新看 caller</li><li>在呼叫的 function 當中第一次使用到 parameter 的時候才去決定後續的值</li></ul><h3 id="Call-by-text"><a href="#Call-by-text" class="headerlink" title="Call-by-text"></a>Call-by-text</h3><ul><li>用的時候重新看 callee</li><li>在呼叫的 function 當中每次使用到 parameter 就重新去檢查 callee 當中當下的值</li><li>更好的理解方式是從名稱 “call by text”，意即 parameter 會以 text 的型態傳遞，因此需要把所有的 parameter 都視為傳遞前的原貌</li><li>例如定義 <code>f(v: integer)</code> ，呼叫 <code>f(a[i])</code> ，則 <code>f</code> 當中的每個 <code>v</code> 都需要替換成 <code>a[i]</code></li></ul><h4 id="Example-1"><a href="#Example-1" class="headerlink" title="Example"></a>Example</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs css">program parameter-passing;<br>  <span class="hljs-selector-tag">var</span> <span class="hljs-selector-tag">i</span>: integer;<br>  <span class="hljs-selector-tag">a</span>: array [<span class="hljs-number">1</span>..<span class="hljs-number">3</span>] of integer;<br><br>  procedure mess(v : integer);<br>    begin<br>      v := v + <span class="hljs-number">1</span>;<br>      <span class="hljs-selector-tag">a</span><span class="hljs-selector-attr">[i]</span> := <span class="hljs-number">5</span>;<br>      <span class="hljs-selector-tag">i</span> := <span class="hljs-number">3</span>;<br>      v := v + <span class="hljs-number">1</span>;<br>    end;<br><br>  begin<br>    for <span class="hljs-selector-tag">i</span>:= <span class="hljs-number">1</span> to <span class="hljs-number">3</span> do a[i] := <span class="hljs-number">0</span>;<br>    <span class="hljs-selector-tag">a</span><span class="hljs-selector-attr">[2]</span> := <span class="hljs-number">10</span>;<br>    <span class="hljs-selector-tag">i</span> := <span class="hljs-number">2</span>;<br>    mess(<span class="hljs-selector-tag">a</span><span class="hljs-selector-attr">[i]</span>);<br>  end<br></code></pre></td></tr></table></figure><ul><li>If by assuming <strong>Call-by-Text</strong>, what’s the value in the array a and the variable i?</li></ul><table><thead><tr><th align="center"></th><th align="center">a[1]</th><th align="center">a[2]</th><th align="center">a[3]</th><th align="center">i</th><th align="center">v</th></tr></thead><tbody><tr><td align="center">before mess</td><td align="center">0</td><td align="center">10</td><td align="center">0</td><td align="center">2</td><td align="center">-</td></tr><tr><td align="center">v :&#x3D; v + 1;</td><td align="center">0</td><td align="center">11</td><td align="center">0</td><td align="center">2</td><td align="center">a[i] (a[2])</td></tr><tr><td align="center">a[i] :&#x3D; 5;</td><td align="center">0</td><td align="center">5</td><td align="center">0</td><td align="center">2</td><td align="center">a[i] (a[2])</td></tr><tr><td align="center">i :&#x3D; 3</td><td align="center">0</td><td align="center">5</td><td align="center">0</td><td align="center">3</td><td align="center">a[i] (a[3])</td></tr><tr><td align="center">v :&#x3D; v + 1</td><td align="center">0</td><td align="center">5</td><td align="center">1</td><td align="center">3</td><td align="center">a[i] (a[3])</td></tr><tr><td align="center">observation point</td><td align="center">0</td><td align="center">5</td><td align="center">1</td><td align="center">3</td><td align="center">-</td></tr></tbody></table><ul><li>If by assuming <strong>Call-by-Reference</strong>, what’s the value in the array a and the variable i?</li></ul><table><thead><tr><th align="center"></th><th align="center">a[1]</th><th align="center">a[2]</th><th align="center">a[3]</th><th align="center">i</th><th align="center">v</th></tr></thead><tbody><tr><td align="center">before mess</td><td align="center">0</td><td align="center">10</td><td align="center">0</td><td align="center">2</td><td align="center">-</td></tr><tr><td align="center">v :&#x3D; v + 1;</td><td align="center">0</td><td align="center">11</td><td align="center">0</td><td align="center">2</td><td align="center">a[2]</td></tr><tr><td align="center">a[i] :&#x3D; 5;</td><td align="center">0</td><td align="center">5</td><td align="center">0</td><td align="center">2</td><td align="center">a[2]</td></tr><tr><td align="center">i :&#x3D; 3</td><td align="center">0</td><td align="center">5</td><td align="center">0</td><td align="center">3</td><td align="center">a[2]</td></tr><tr><td align="center">v :&#x3D; v + 1</td><td align="center">0</td><td align="center">6</td><td align="center">0</td><td align="center">3</td><td align="center">a[2]</td></tr><tr><td align="center">observation point</td><td align="center">0</td><td align="center">6</td><td align="center">0</td><td align="center">3</td><td align="center">-</td></tr></tbody></table><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs css">program parameter-passing;<br>  <span class="hljs-selector-tag">var</span> <span class="hljs-selector-tag">i</span>: integer;<br>  <span class="hljs-selector-tag">a</span>: array [<span class="hljs-number">1</span>..<span class="hljs-number">3</span>] of integer;<br><br>  procedure mess(v : integer);<br>    <span class="hljs-selector-tag">var</span> <span class="hljs-selector-tag">i</span>: integer;<br>    begin<br>      <span class="hljs-selector-tag">i</span> := <span class="hljs-number">1</span>;<br>      v := v + <span class="hljs-number">1</span>;<br>      <span class="hljs-selector-tag">a</span><span class="hljs-selector-attr">[i]</span> := <span class="hljs-number">5</span>;<br>      <span class="hljs-selector-tag">i</span> := <span class="hljs-number">3</span>;<br>      v := v + <span class="hljs-number">1</span>;<br>    end;<br><br>  begin<br>    for <span class="hljs-selector-tag">i</span>:= <span class="hljs-number">1</span> to <span class="hljs-number">3</span> do a[i] := <span class="hljs-number">0</span>;<br>    <span class="hljs-selector-tag">a</span><span class="hljs-selector-attr">[2]</span> := <span class="hljs-number">10</span>;<br>    <span class="hljs-selector-tag">i</span> := <span class="hljs-number">2</span>;<br>    mess(<span class="hljs-selector-tag">a</span><span class="hljs-selector-attr">[i]</span>);<br>  end<br></code></pre></td></tr></table></figure><ul><li>If by assuming <strong>Call-by-Name</strong>, what’s the value in the array a and the variable i?</li></ul><table><thead><tr><th align="center"></th><th align="center">a[1]</th><th align="center">a[2]</th><th align="center">a[3]</th><th align="center">i (caller)</th><th align="center">i (callee)</th><th align="center">v</th></tr></thead><tbody><tr><td align="center">before mess</td><td align="center">0</td><td align="center">10</td><td align="center">0</td><td align="center">2</td><td align="center">-</td><td align="center">-</td></tr><tr><td align="center">i :&#x3D; 1</td><td align="center">0</td><td align="center">10</td><td align="center">0</td><td align="center">2</td><td align="center">1</td><td align="center">a[2]</td></tr><tr><td align="center">v :&#x3D; v + 1;</td><td align="center">0</td><td align="center">11</td><td align="center">0</td><td align="center">2</td><td align="center">1</td><td align="center">a[2]</td></tr><tr><td align="center">a[i] :&#x3D; 5;</td><td align="center">5</td><td align="center">11</td><td align="center">0</td><td align="center">2</td><td align="center">1</td><td align="center">a[2]</td></tr><tr><td align="center">i :&#x3D; 3</td><td align="center">5</td><td align="center">11</td><td align="center">0</td><td align="center">2</td><td align="center">3</td><td align="center">a[2]</td></tr><tr><td align="center">v :&#x3D; v + 1</td><td align="center">5</td><td align="center">12</td><td align="center">0</td><td align="center">2</td><td align="center">3</td><td align="center">a[2]</td></tr><tr><td align="center">observation point</td><td align="center">5</td><td align="center">12</td><td align="center">0</td><td align="center">2</td><td align="center">-</td><td align="center">-</td></tr></tbody></table><ul><li>If by assuming <strong>Call-by-Text</strong>, what’s the value in the array a and the variable i?</li></ul><table><thead><tr><th align="center"></th><th align="center">a[1]</th><th align="center">a[2]</th><th align="center">a[3]</th><th align="center">i (caller)</th><th align="center">i (callee)</th><th align="center">v</th></tr></thead><tbody><tr><td align="center">before mess</td><td align="center">0</td><td align="center">10</td><td align="center">0</td><td align="center">2</td><td align="center">-</td><td align="center">-</td></tr><tr><td align="center">i :&#x3D; 1</td><td align="center">0</td><td align="center">10</td><td align="center">0</td><td align="center">2</td><td align="center">1</td><td align="center">a[i(callee)] (a[1])</td></tr><tr><td align="center">v :&#x3D; v + 1;</td><td align="center">1</td><td align="center">10</td><td align="center">0</td><td align="center">2</td><td align="center">1</td><td align="center">a[i(callee)] (a[1])</td></tr><tr><td align="center">a[i] :&#x3D; 5;</td><td align="center">5</td><td align="center">10</td><td align="center">0</td><td align="center">2</td><td align="center">1</td><td align="center">a[i(callee)] (a[1])</td></tr><tr><td align="center">i :&#x3D; 3</td><td align="center">5</td><td align="center">10</td><td align="center">0</td><td align="center">2</td><td align="center">3</td><td align="center">a[i(callee)] (a[3])</td></tr><tr><td align="center">v :&#x3D; v + 1</td><td align="center">5</td><td align="center">10</td><td align="center">1</td><td align="center">2</td><td align="center">3</td><td align="center">a[i(callee)] (a[3])</td></tr><tr><td align="center">observation point</td><td align="center">5</td><td align="center">10</td><td align="center">1</td><td align="center">2</td><td align="center">-</td><td align="center">-</td></tr></tbody></table><ul><li>If by assuming <strong>Call-by-Need</strong>, what’s the value in the array a and the variable i?</li></ul><table><thead><tr><th align="center"></th><th align="center">a[1]</th><th align="center">a[2]</th><th align="center">a[3]</th><th align="center">i (caller)</th><th align="center">i (callee)</th><th align="center">v</th></tr></thead><tbody><tr><td align="center">before mess</td><td align="center">0</td><td align="center">10</td><td align="center">0</td><td align="center">2</td><td align="center">-</td><td align="center">-</td></tr><tr><td align="center">i :&#x3D; 1</td><td align="center">0</td><td align="center">10</td><td align="center">0</td><td align="center">2</td><td align="center">1</td><td align="center">-</td></tr><tr><td align="center">v :&#x3D; v + 1;</td><td align="center">0</td><td align="center">11</td><td align="center">0</td><td align="center">2</td><td align="center">1</td><td align="center">a[i(caller)] (a[2])</td></tr><tr><td align="center">a[i] :&#x3D; 5;</td><td align="center">5</td><td align="center">11</td><td align="center">0</td><td align="center">2</td><td align="center">1</td><td align="center">a[2]</td></tr><tr><td align="center">i :&#x3D; 3</td><td align="center">5</td><td align="center">11</td><td align="center">0</td><td align="center">2</td><td align="center">3</td><td align="center">a[2]</td></tr><tr><td align="center">v :&#x3D; v + 1</td><td align="center">5</td><td align="center">12</td><td align="center">0</td><td align="center">2</td><td align="center">3</td><td align="center">a[2]</td></tr><tr><td align="center">observation point</td><td align="center">5</td><td align="center">12</td><td align="center">0</td><td align="center">2</td><td align="center">-</td><td align="center">-</td></tr></tbody></table><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs css">program parameter-passing;<br>  <span class="hljs-selector-tag">var</span> <span class="hljs-selector-tag">i</span>: integer;<br>  <span class="hljs-selector-tag">a</span>: array [<span class="hljs-number">1</span>..<span class="hljs-number">3</span>] of integer;<br><br>  procedure mess(v : integer);<br>    begin<br>      <span class="hljs-selector-tag">i</span> := <span class="hljs-number">1</span>;<br>      v := v + <span class="hljs-number">1</span>;<br>      <span class="hljs-selector-tag">a</span><span class="hljs-selector-attr">[i]</span> := <span class="hljs-number">5</span>;<br>      <span class="hljs-selector-tag">i</span> := <span class="hljs-number">3</span>;<br>      v := v + <span class="hljs-number">1</span>;<br>    end;<br><br>  begin<br>    for <span class="hljs-selector-tag">i</span>:= <span class="hljs-number">1</span> to <span class="hljs-number">3</span> do a[i] := <span class="hljs-number">0</span>;<br>    <span class="hljs-selector-tag">a</span><span class="hljs-selector-attr">[2]</span> := <span class="hljs-number">10</span>;<br>    <span class="hljs-selector-tag">i</span> := <span class="hljs-number">2</span>;<br>    mess(<span class="hljs-selector-tag">a</span><span class="hljs-selector-attr">[i]</span>);<br>  end<br></code></pre></td></tr></table></figure><ul><li>If by assuming <strong>Call-by-Name</strong>, what’s the value in the array a and the variable i?</li></ul><table><thead><tr><th align="center"></th><th align="center">a[1]</th><th align="center">a[2]</th><th align="center">a[3]</th><th align="center">i</th><th align="center">v</th></tr></thead><tbody><tr><td align="center">before mess</td><td align="center">0</td><td align="center">10</td><td align="center">0</td><td align="center">2</td><td align="center">-</td></tr><tr><td align="center">i :&#x3D; 1</td><td align="center">0</td><td align="center">10</td><td align="center">0</td><td align="center">1</td><td align="center">-</td></tr><tr><td align="center">v :&#x3D; v + 1;</td><td align="center">1</td><td align="center">10</td><td align="center">0</td><td align="center">1</td><td align="center">a[i] (a[1])</td></tr><tr><td align="center">a[i] :&#x3D; 5;</td><td align="center">5</td><td align="center">10</td><td align="center">0</td><td align="center">1</td><td align="center">a[i] (a[1])</td></tr><tr><td align="center">i :&#x3D; 3</td><td align="center">5</td><td align="center">10</td><td align="center">0</td><td align="center">3</td><td align="center">a[i] (a[3])</td></tr><tr><td align="center">v :&#x3D; v + 1</td><td align="center">5</td><td align="center">10</td><td align="center">1</td><td align="center">3</td><td align="center">a[i] (a[3])</td></tr><tr><td align="center">observation point</td><td align="center">5</td><td align="center">10</td><td align="center">1</td><td align="center">3</td><td align="center">-</td></tr></tbody></table><ul><li>If by assuming <strong>Call-by-Need</strong>, what’s the value in the array a and the variable i?</li></ul><table><thead><tr><th align="center"></th><th align="center">a[1]</th><th align="center">a[2]</th><th align="center">a[3]</th><th align="center">i</th><th align="center">v</th></tr></thead><tbody><tr><td align="center">before mess</td><td align="center">0</td><td align="center">10</td><td align="center">0</td><td align="center">2</td><td align="center">-</td></tr><tr><td align="center">i :&#x3D; 1</td><td align="center">0</td><td align="center">10</td><td align="center">0</td><td align="center">1</td><td align="center">-</td></tr><tr><td align="center">v :&#x3D; v + 1;</td><td align="center">1</td><td align="center">10</td><td align="center">0</td><td align="center">1</td><td align="center">a[i] (a[1])</td></tr><tr><td align="center">a[i] :&#x3D; 5;</td><td align="center">5</td><td align="center">10</td><td align="center">0</td><td align="center">1</td><td align="center">a[1]</td></tr><tr><td align="center">i :&#x3D; 3</td><td align="center">5</td><td align="center">10</td><td align="center">0</td><td align="center">3</td><td align="center">a[1]</td></tr><tr><td align="center">v :&#x3D; v + 1</td><td align="center">6</td><td align="center">10</td><td align="center">0</td><td align="center">3</td><td align="center">a[1]</td></tr><tr><td align="center">observation point</td><td align="center">6</td><td align="center">10</td><td align="center">0</td><td align="center">3</td><td align="center">-</td></tr></tbody></table>]]></content>
    
    
    
    <tags>
      
      <tag>compiler</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Unreal Engine 4 - GPGPU flocking 解析</title>
    <link href="/notes/2024/02/25/ue4-cs-aceyan/"/>
    <url>/notes/2024/02/25/ue4-cs-aceyan/</url>
    
    <content type="html"><![CDATA[<p>source code: <a href="https://github.com/aceyan/UE4_GPGPU_flocking/tree/ComputeShader">https://github.com/aceyan/UE4_GPGPU_flocking/tree/ComputeShader</a></p><h3 id="GPU-Instances"><a href="#GPU-Instances" class="headerlink" title="GPU Instances"></a>GPU Instances</h3><p>這個專案使用 GPU Instancing，一次渲染大量 Static Mesh。為了讓每個 instance 有區別，它賦予每個 instance 一個 CustomData，作為分辨的 ID。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-built_in">UPROPERTY</span>(EditAnywhere, BlueprintReadWrite, Category = <span class="hljs-string">&quot;Flocking&quot;</span>)<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">UInstancedStaticMeshComponent</span>* InstancedComponent;<br><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; instatnceNum; i++)<br>&#123;<br>FTransform t = <span class="hljs-built_in">FTransform</span>();<br>InstancedComponent-&gt;<span class="hljs-built_in">AddInstance</span>(t);<br>InstancedComponent-&gt;<span class="hljs-built_in">SetCustomDataValue</span>(i, <span class="hljs-number">0</span>, i);<br><span class="hljs-built_in">UE_LOG</span>(LogTemp, Warning, <span class="hljs-built_in">TEXT</span>(<span class="hljs-string">&quot;AddInstance %d&quot;</span>), i);<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/notes/./images/ue4-cs-aceyan/InstancedComponent.png" alt="Instanced Component"></p><p>然後藉由 PerInstanceCustomData[0]，取得不同的 Instance ID，然後更新它們各自的 Material 的 World Position Offset (相對位置) ，來達到移動的效果。</p><h3 id="GPGPU"><a href="#GPGPU" class="headerlink" title="GPGPU"></a>GPGPU</h3><p>由於運算量龐大，可以藉由 GPGPU (Compute Shader) 來計算。那要怎麼直接把 GPGPU 算出的結果傳給 World Position Offset？</p><p>這裡使用 Render Target (RT) 去除存每個 Instance 的位置、速度，所以每個 Texel 的 RGB 儲存的是 World Position Offset 的 XYZ。因此，遊戲開始的時候，儲存 Position 的 Render Target 會長這樣，五彩繽紛的顏色就代表各種 World Position Offset。</p><p><img src="/notes/./images/ue4-cs-aceyan/PositionRenderTarget.png" alt="Position Render Target"></p><p>藉由這個方法，CPU 叫 GPU 算完可以直接渲染，不用再回傳到 CPU，所以整個邏輯是 GPGPU -&gt; RenderTarget -&gt; Material。</p><p>最後，只要想辦法取出每個 Instance 對應到的 Texel 的顏色，傳到 World Position Offset 就好。</p><p><img src="/notes/./images/ue4-cs-aceyan/UpdateInstancePosition.png" alt="Update Instance Position"></p><p>看起來很複雜，實際上就是根據 ID 算出對應的 Texel 的座標，左上是 (0, 0)，右下是 (1, 1)，再 Sample 出 Texture Object 某 Texel 的顏色。</p>]]></content>
    
    
    <categories>
      
      <category>UE4</category>
      
    </categories>
    
    
    <tags>
      
      <tag>UE4, GPU</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>GPGPU</title>
    <link href="/notes/2024/02/21/gpgpu/"/>
    <url>/notes/2024/02/21/gpgpu/</url>
    
    <content type="html"><![CDATA[<h1 id="名詞解釋"><a href="#名詞解釋" class="headerlink" title="名詞解釋"></a>名詞解釋</h1><ul><li><p>CUDA (Compute Unified Device Architecture)</p><ul><li>強大的平行計算平台，讓開發者能夠充分利用 NVIDIA GPU 的計算能力(NVIDIA 專用)，進行高效的計算任務處理</li></ul></li><li><p>OpenCL (Open Computing Language)</p><ul><li>用於編寫在多種處理器上運行的程序，包括 CPU、GPU、DSP（數字訊號處理器）和其他類型的處理器，主要用於通用計算，特別是那些可以利用平行計算的任務</li></ul></li></ul><h1 id="從-GPU-到-GPGPU"><a href="#從-GPU-到-GPGPU" class="headerlink" title="從 GPU 到 GPGPU"></a>從 GPU 到 GPGPU</h1><p>CPU 單核心性能的提高受到<strong>功耗</strong>、<strong>存取記憶體速度</strong>、<strong>設計複雜度</strong>等多重瓶頸的限制，而 GPU 僅侷限於處理圖形繪製的計算任務，是極大的資源浪費。</p><p>2006 年，NVIDIA 公布了統一著色器架構(unified shader architecture)，從此 GPU 進入了通用計算時代。 傳統的 GPU 通常採用固定比例的頂點著色器和像素著色器單元，但這種作法會導致單元使用率低下的問題。為解決這一問題，統一著色器架構整合了頂點著色器和像素著色器，這種無差別的著色器設計，使 GPU 成為一個多核心的通用處理器。</p><h1 id="計算模型"><a href="#計算模型" class="headerlink" title="計算模型"></a>計算模型</h1><h3 id="SIMT-Single-Instruction-Multiple-Threads-，單指令多執行緒"><a href="#SIMT-Single-Instruction-Multiple-Threads-，單指令多執行緒" class="headerlink" title="SIMT (Single Instruction Multiple Threads)，單指令多執行緒"></a>SIMT (Single Instruction Multiple Threads)，單指令多執行緒</h3><ul><li>一行指令被多個執行緒同時執行，與 SIMD 平行類似，在 GPGPU 中被稱為 SIMT 計算模型</li><li>ex: 矩陣乘法<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">// 從輸入矩陣 A 和 B 中讀取一部份向量 a, b</span><br><span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; N; i++)&#123;<br>  c += a[i] + b[i];<br>&#125;<br><span class="hljs-comment">// 將 c 寫回結果矩陣 C 的對應位置中</span><br></code></pre></td></tr></table></figure></li><li>CUDA 為 SIMT 計算模型引入 thread grid、thread block、thread，對等地，OpenCL 為 SIMT 計算模型引入 NDRange、work-group、work-item</li></ul><h3 id="裝置端和核心函數"><a href="#裝置端和核心函數" class="headerlink" title="裝置端和核心函數"></a>裝置端和核心函數</h3><p>在 CUDA 和 OpenCL 模型中，會把程式劃分成<strong>主機端 (host)</strong> 和<strong>裝置端 (device)</strong> ，分別在 CPU 和 GPGPU 上執行。 CPU 硬體執行主機端程式，GPGPU 硬體將根據程式設計人員給定的執行緒網格 (上面提到的 thread grid) 組織方式等參數，將裝置端程式進一步分發到執行緒中。每個執行緒執行相同的程式，但是是不同的資料。</p><p>以上面的矩陣乘法為例，主機端程式分成三個步驟：</p><h4 id="資料複製"><a href="#資料複製" class="headerlink" title="資料複製"></a>資料複製</h4><ul><li>CPU 將主記憶體資料複製到 GPGPU。主機端程式會先完成 GPGPU 的待處理資料宣告和前置處理，然後 CPU 呼叫 API 對 GPGPU 進行初始化和控制。<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// 主記憶體的資料</span><br><span class="hljs-type">float</span> A[M * N], B[N * K], C[M * K];<br><span class="hljs-comment">// GPGPU 裝置端全域記憶體</span><br><span class="hljs-type">float</span>* d_A, * d_B, * d_C;<br><br><span class="hljs-type">int</span> size = M * N * <span class="hljs-keyword">sizeof</span>(<span class="hljs-type">float</span>);<br><span class="hljs-comment">// CPU 呼叫 API 分配裝置端空間 </span><br>cudaMalloc((<span class="hljs-type">void</span>**)&amp; d_A, size);<br><span class="hljs-comment">// CPU 呼叫 API 控制 CPU 和 GPGPU 之間的通訊</span><br><span class="hljs-comment">// 將資料從主機端記憶體複製到 GPGPU 全域記憶體裡面</span><br>cudaMemcpy(d_A, A, size, cudaMemcpyHostToDevice);<br><br>size = N * K * <span class="hljs-keyword">sizeof</span>(<span class="hljs-type">float</span>);<br>cudaMalloc((<span class="hljs-type">void</span>**)&amp; d_B, size);<br>cudaMemcpy(d_B, B, size, cudaMemcpyHostToDevice);<br><br>size = M * K * <span class="hljs-keyword">sizeof</span>(<span class="hljs-type">float</span>);<br>cudaMalloc((<span class="hljs-type">void</span>**)&amp; d_C, size);<br></code></pre></td></tr></table></figure></li></ul><h4 id="GPGPU-啟動"><a href="#GPGPU-啟動" class="headerlink" title="GPGPU 啟動"></a>GPGPU 啟動</h4><ul><li>CPU 喚醒 GPGPU 執行緒進行運算，並將執行緒的組織方式和參數傳入 GPGPU 中。<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">unsigned</span> T_size = <span class="hljs-number">16</span>;<br>dim3 <span class="hljs-title function_">gridDim</span><span class="hljs-params">(M / T_size, K / T_size, <span class="hljs-number">1</span>)</span>;<br>dim3 <span class="hljs-title function_">blockDim</span><span class="hljs-params">(T_size, T_size, <span class="hljs-number">1</span>)</span>;<br><br><span class="hljs-comment">/// 喚醒對應的裝置端程式</span><br><span class="hljs-comment">/// 啟動名為 basic_mul 的裝置端函數</span><br>basic_mul &lt;&lt;&lt; gridDim, blockDim &gt;&gt;&gt; (d_A, d_B, d_C);<br><br><span class="hljs-comment">// 因為 CPU 和 GPGPU 是非同步執行，要使用此函數讓他們同步</span><br><span class="hljs-comment">// 不然可能 CPU 還沒等到 GPGPU 算完就繼續跑</span><br>cudaDeviceSynchronize();<br></code></pre></td></tr></table></figure></li></ul><h4 id="資料寫回"><a href="#資料寫回" class="headerlink" title="資料寫回"></a>資料寫回</h4><ul><li>GPGPU 運算完畢，並將結果寫回主機端記憶體中。<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c">size = M * K * <span class="hljs-keyword">sizeof</span>(<span class="hljs-type">float</span>);<br><span class="hljs-comment">// 將裝置端記憶體 d_C 傳回 主機端記憶體 C</span><br>cudaMemcpy(C, d_C, size, cudaMemcpyDeviceToHost);<br><br><span class="hljs-comment">// GPGPU 裝置端空間釋放</span><br>cudaFree(d_A);<br>cudaFree(d_B);<br>cudaFree(d_C);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br></code></pre></td></tr></table></figure></li></ul><p>裝置端程式常常由多個函數組成，這些函數被稱為**核心函數 (kernel)**，這些核心函數會被分配到每個 GPGPU 的執行緒中執行。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// __global__ 關鍵字定義了這個函數會作為核心函數在 GPGPU 上跑</span><br>__global__ <span class="hljs-type">void</span> <span class="hljs-title function_">basic_mul</span><span class="hljs-params">(<span class="hljs-type">float</span>* d_A, <span class="hljs-type">float</span>* d_B, <span class="hljs-type">float</span>* d_C)</span>&#123;<br>  <span class="hljs-type">int</span> row = threadIdx.x + blockIdx.x * blockDim.x;<br>  <span class="hljs-type">int</span> col = threadIdx.y + blockIdx.y * blockDim.y;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; N; i++)&#123;<br>    d_C[row * K + col] += d_A[row * N + i] * d_B[col + i * k];<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="執行緒模型"><a href="#執行緒模型" class="headerlink" title="執行緒模型"></a>執行緒模型</h1><h3 id="執行緒組織結構"><a href="#執行緒組織結構" class="headerlink" title="執行緒組織結構"></a>執行緒組織結構</h3><p>上面提到，主機端在啟動核心函數時，利用 &lt;&lt;&lt;&gt;&gt;&gt; 向 GPGPU 傳送兩個參數 gridDim 和 blockDim，這兩個參數構造了 GPGPU 計算所採用的執行緒結構。</p><p>CUDA 和 OpenCL 都採用了層次化的執行緒結構，就是前面說的 thread grid、thread block、thread 和 NDRange、work-group、work-item，一一對應。同一個 Block 內的 Thread 可以互相溝通。</p><p><img src="https://www.researchgate.net/publication/328752788/figure/fig3/AS:689781692432384@1541468179263/CUDA-programming-grid-of-thread-blocks-Source-NVIDIA.png" alt="CUDA 的層次化執行緒結構"></p><h3 id="資料索引"><a href="#資料索引" class="headerlink" title="資料索引"></a>資料索引</h3><p>基於上面的執行緒層次，我們需要知道 Thread 在 Grid 中的具體位置，才能讀取合適的資料執行對應的計算。上面例子的 blockIdx、threadIdx 就是用來決定 Thread 的位置。</p>]]></content>
    
    
    <categories>
      
      <category>GPU</category>
      
    </categories>
    
    
    <tags>
      
      <tag>gpu</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Push React App to Github Pages</title>
    <link href="/notes/2024/02/08/react-github-pages/"/>
    <url>/notes/2024/02/08/react-github-pages/</url>
    
    <content type="html"><![CDATA[<ul><li><p>安裝套件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm install gh-pages --save-dev<br>yarn add -D gh-pages<br></code></pre></td></tr></table></figure></li><li><p>在 package.json 裡面新增</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;homepage&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&#123;url to your website&#125;&quot;</span><br>  <span class="hljs-attr">&quot;scripts&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;predeploy&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;npm run build&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;deploy&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;gh-pages -d build&quot;</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure></li><li><p>要 push 的時候就打以下指令，就可以自動 push 到 branch gh-pages</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm run deploy<br></code></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <categories>
      
      <category>React</category>
      
    </categories>
    
    
    <tags>
      
      <tag>React</tag>
      
      <tag>Gtihub</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>UE5 Resources</title>
    <link href="/notes/2024/01/31/ue5-resources/"/>
    <url>/notes/2024/01/31/ue5-resources/</url>
    
    <content type="html"><![CDATA[<ol><li><a href="https://zhuanlan.zhihu.com/p/639001043">理解 FrameGraph</a></li><li><a href="https://zhuanlan.zhihu.com/p/637889120">UE5 Render Dependency Graph-实用指南</a></li><li><a href="https://zhuanlan.zhihu.com/p/551981932">剖析虚幻渲染体系（08）- Shader体系（02）</a></li><li><a href="https://www.bilibili.com/video/BV18K411Z7Jg/?spm_id_from=333.337.search-card.all.click&vd_source=cdd130c5068c54677e0ec511d6834ece">[UOD2022]Rendering Dependency Graph解析 | Epic 陈拓</a></li><li><a href="https://zhuanlan.zhihu.com/p/73016473">游戏引擎随笔 0x05：现代图形 API 讲义</a></li><li><a href="https://zhuanlan.zhihu.com/p/438784425">UE4性能分析工具Stats</a></li><li><a href="https://frankorz.com/2021/04/17/compute-shader/index.html">Compute Shader 简介 - 萤火之森</a></li><li><a href="https://michaeljcole.github.io/wiki.unrealengine.com/HLSL_Shaders/">HLSL Shaders</a></li><li><a href="https://github.com/Temaran/UnrealEngineShaderPluginDemo">UnrealEngineShaderPluginDemo</a></li><li><a href="https://zhuanlan.zhihu.com/p/624322431">UE渲染学习(4)ComputeShader</a></li><li><a href="https://www.bilibili.com/read/cv8755619/">Unreal Compute Shader 使用流程笔记</a></li><li><a href="https://zhuanlan.zhihu.com/p/608724638?utm_id=0">UE5中的 Compute Shader使用及详解（二）</a></li><li><a href="https://inlet511.github.io/posts/rdg-05-structured-buffer/#16-%E5%88%9B%E5%BB%BAsrv%E8%A7%86%E5%9B%BE">RDG 05 StructuredBuffer的用法</a></li><li><a href="https://zhuanlan.zhihu.com/p/379638061">UE4 RHICmdList</a></li><li><a href="https://zhuanlan.zhihu.com/p/377411777">Unreal Engine 4 Materials Tutorial——虚幻4引擎教程——材质</a></li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>UE5</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Unreal Engine 5 - Render Dependency Graph (RDG)</title>
    <link href="/notes/2024/01/30/ue5-rdg/"/>
    <url>/notes/2024/01/30/ue5-rdg/</url>
    
    <content type="html"><![CDATA[<h3 id="RDG-是什麼"><a href="#RDG-是什麼" class="headerlink" title="RDG 是什麼"></a>RDG 是什麼</h3><dl><dt><a href="https://docs.unrealengine.com/4.26/en-US/ProgrammingAndScripting/Rendering/RenderDependencyGraph/">官方文件</a>提到</dt><dd>渲染依賴圖（Rendering Dependency Graph，RDG）是一種基於圖形的排程系統，旨在對渲染管線進行整幀優化。</dd></dl><h4 id="基本介紹"><a href="#基本介紹" class="headerlink" title="基本介紹"></a>基本介紹</h4><ul><li><p>RDG 於 Unreal 4.22 引入</p></li><li><p>前身是 Frame Graph ，在 2017 年的 GDC 中由 <a href="https://zh.wikipedia.org/zh-tw/%E5%AF%92%E9%9C%9C%E5%BC%95%E6%93%8E">Frostbite Engine</a> 提出</p></li><li><p>RDG 的概念是不在 GPU 上立即執行通道 (Pass)，而是先收集所有需要渲染的通道，然後按照它們之間的依賴關係順序對圖表進行編譯和執行。過程中，系統會執行各種裁剪和優化操作。</p></li></ul><h4 id="為什麼要用-RDG？"><a href="#為什麼要用-RDG？" class="headerlink" title="為什麼要用 RDG？"></a>為什麼要用 RDG？</h4><ul><li><p>Render pipeline 越來越複雜，導致難以管理且性能不好</p><ul><li>隨著硬體性能日漸提升，各大廠商為了渲染出更出色的畫面效果，render pipeline 也日趨複雜。</li></ul></li></ul><p><img src="/notes/images/ue5-rdg/rendering-systems-overview.png" alt="rendering systems overview" title="Rendering systems overview"></p><ul><li><p>硬體的體系結構以及圖形 API 的優化擴展無法得到充分的利用</p><ul><li><p>現代圖形API (如DirectX 12、Vulkan 和 Metal 2) 與傳統圖形API (如DirectX 11、OpenGL) 的主要區別在於現代圖形 API 將更多的 GPU 管理的責任轉移到應用程式的開發者身上，能夠更有效的利用有限的 GPU 資源，進而提升效能。</p><ul><li><a href="https://zhuanlan.zhihu.com/p/73016473">傳統 API 和現代 API 的介紹</a></li></ul></li><li><p>RDG 與現代圖形 API 的能力相結合，使 RDG 能夠在幕後執行複雜的排程任務：</p><ol><li>執行異步計算通道的自動排程和隔離。</li><li>在幀的不相交間隔期間，使資源之間的別名 (Aliasing) 記憶體保持活躍狀態。</li><li>盡早啟動屏障和佈局轉換，避免管線延遲。</li></ol></li></ul></li></ul><h3 id="RDG-的原理"><a href="#RDG-的原理" class="headerlink" title="RDG 的原理"></a>RDG 的原理</h3><p><img src="/notes/images/ue5-rdg/rdg-in-engine.png" alt="rdg in the game engine" title="RDG in the game engine"></p><p>位於 RHI 和 Render Pass 的中間，RDG 作為 Pass 管理器，在搜集資源描述訊息後，對 Pass 和資源進行分析，並結合硬體特性，以最優的方式執行 Pass，主要有三個階段：</p><ol><li><p>Setup</p><ul><li>蒐集 pass 的訊息(主要是該 Pass 使用到的資源)</li></ul></li><li><p>Compile</p><ul><li>Render Graph 的生成以及分析 (包含 Pass culling、Resources state 的最終生成、Async Compute 優化等等)</li></ul></li><li><p>Execute</p><ul><li>將 Command 提交到 CommandList (包含設置 Barrier、平行優化等)</li></ul></li></ol><p><img src="/notes/images/ue5-rdg/rdg-stages.png" alt="Three stages of RDG" title="Three stages of RDG"></p><h3 id="FRDGBuilder"><a href="#FRDGBuilder" class="headerlink" title="FRDGBuilder"></a>FRDGBuilder</h3><ul><li>RDG 系统的心臟和驅動器，同時也是管家，負責儲存數據、處理狀態轉換、自動管理資源生命週期和屏障 (barrier)、裁剪無效資源，和收集、編譯、執行Pass，提取紋理或緩衝等等功能。</li></ul><h3 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h3><ul><li><a href="https://zhuanlan.zhihu.com/p/554758862">剖析虚幻渲染体系（11）- RDG</a></li><li><a href="https://docs.unrealengine.com/4.26/en-US/ProgrammingAndScripting/Rendering/RenderDependencyGraph/">Rendering Dependency Graph</a></li><li><a href="https://zhuanlan.zhihu.com/p/637889120">UE5 Render Dependency Graph-实用指南</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>UE5</category>
      
      <category>Render</category>
      
    </categories>
    
    
    <tags>
      
      <tag>UE5</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Flutter GPS background</title>
    <link href="/notes/2024/01/25/flutter-gps/"/>
    <url>/notes/2024/01/25/flutter-gps/</url>
    
    <content type="html"><![CDATA[<blockquote><p>官方文件: <a href="https://pub.dev/packages/background_locator_2/example">https://pub.dev/packages/background_locator_2/example</a><br>Github: <a href="https://github.com/Yukams/background_locator_fixed">https://github.com/Yukams/background_locator_fixed</a></p></blockquote><h3 id="介紹"><a href="#介紹" class="headerlink" title="介紹"></a>介紹</h3><p>這個 package 的目的是讓 app 可以順利定位，取得定位的相關訊息 (經緯度、方向、速度等)，最重要的是它也支援<strong>背景運行</strong>，也就是當你 kill 這個 app (在 app switcher 裡 swipe up app)，這個 app 依然在背景中運行，並顯示在手機的 notification drawer 裡來提醒使用者。</p><p><img src="/notes/images/flutter-gps/notification.png" alt="Notification"></p><p>由於 <code>location_permissions</code> 似乎不再更新了，所以在測試的時候都會有問題，無法正確 import package，所以後來我改用 <code>permission_handler</code>，除了詢問 location 的權限，同時也可以要求 notification 的權限。</p><h3 id="程式碼"><a href="#程式碼" class="headerlink" title="程式碼"></a>程式碼</h3><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;dart:async&#x27;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;dart:isolate&#x27;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;dart:ui&#x27;</span>;<br><br><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;package:background_locator_2/background_locator.dart&#x27;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;package:background_locator_2/location_dto.dart&#x27;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;package:background_locator_2/settings/android_settings.dart&#x27;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;package:background_locator_2/settings/ios_settings.dart&#x27;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;package:background_locator_2/settings/locator_settings.dart&#x27;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;package:flutter/material.dart&#x27;</span>;<br><br><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;package:permission_handler/permission_handler.dart&#x27;</span>;<br><br><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;file_manager.dart&#x27;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;location_callback_handler.dart&#x27;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;location_service_repository.dart&#x27;</span>;<br><br><span class="hljs-keyword">void</span> main() =&gt; runApp(MyApp());<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyApp</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">StatefulWidget</span> </span>&#123;<br>  <span class="hljs-meta">@override</span><br>  _MyAppState createState() =&gt; _MyAppState();<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">_MyAppState</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">State</span>&lt;<span class="hljs-title">MyApp</span>&gt; </span>&#123;<br>  ReceivePort port = ReceivePort();<br><br>  <span class="hljs-built_in">String</span> logStr = <span class="hljs-string">&#x27;&#x27;</span>;<br>  <span class="hljs-built_in">bool</span> isRunning = <span class="hljs-keyword">false</span>;<br><br>  <span class="hljs-meta">@override</span><br>  <span class="hljs-keyword">void</span> initState() &#123;<br>    <span class="hljs-keyword">super</span>.initState();<br><br>    <span class="hljs-keyword">if</span> (IsolateNameServer.lookupPortByName(LocationServiceRepository.isolateName) != <span class="hljs-keyword">null</span>)<br>    &#123;<br>          IsolateNameServer.removePortNameMapping(<br>          LocationServiceRepository.isolateName);<br>    &#125;<br><br>    IsolateNameServer.registerPortWithName(port.sendPort, LocationServiceRepository.isolateName);<br><br>    port.listen((<span class="hljs-built_in">dynamic</span> data) <span class="hljs-keyword">async</span> &#123;<br>        <span class="hljs-keyword">await</span> updateUI(data);<br>      &#125;,<br>    );<br>    initPlatformState();<br>  &#125;<br><br>  <span class="hljs-meta">@override</span><br>  <span class="hljs-keyword">void</span> dispose() &#123;<br>    <span class="hljs-keyword">super</span>.dispose();<br>  &#125;<br><br>  Future&lt;<span class="hljs-keyword">void</span>&gt; updateUI(<span class="hljs-built_in">dynamic</span> data) <span class="hljs-keyword">async</span> &#123;<br>    <span class="hljs-keyword">final</span> log = <span class="hljs-keyword">await</span> FileManager.readLogFile();<br><br>    <span class="hljs-keyword">if</span> (data != <span class="hljs-keyword">null</span>)&#123;<br>      <span class="hljs-keyword">await</span> _updateNotificationText(data);<br>    &#125;<br><br>    setState(()&#123;<br>      logStr = log;<br>    &#125;);<br>  &#125;<br><br>  Future&lt;<span class="hljs-keyword">void</span>&gt; _updateNotificationText(<span class="hljs-built_in">Map</span>&lt;<span class="hljs-built_in">String</span>, <span class="hljs-built_in">dynamic</span>&gt; data) <span class="hljs-keyword">async</span> &#123;<br>    <span class="hljs-keyword">await</span> BackgroundLocator.updateNotificationText(<br>        title: <span class="hljs-string">&quot;new location received&quot;</span>,<br>        msg: <span class="hljs-string">&quot;<span class="hljs-subst">$&#123;DateTime.now()&#125;</span>&quot;</span>,<br>        bigMsg: <span class="hljs-string">&quot;<span class="hljs-subst">$&#123;data[<span class="hljs-string">&#x27;latitude&#x27;</span>]&#125;</span>, <span class="hljs-subst">$&#123;data[<span class="hljs-string">&#x27;longitude&#x27;</span>]&#125;</span>&quot;</span><br>    );<br>  &#125;<br><br>  Future&lt;<span class="hljs-keyword">void</span>&gt; initPlatformState() <span class="hljs-keyword">async</span> &#123;<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Initializing...&#x27;</span>);<br>    <span class="hljs-keyword">await</span> BackgroundLocator.initialize();<br>    logStr = <span class="hljs-keyword">await</span> FileManager.readLogFile();<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Initialization done&#x27;</span>);<br>    <span class="hljs-keyword">final</span> _isRunning = <span class="hljs-keyword">await</span> BackgroundLocator.isServiceRunning();<br>    setState(() &#123;<br>      isRunning = _isRunning;<br>    &#125;);<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Running <span class="hljs-subst">$&#123;isRunning.toString()&#125;</span>&#x27;</span>);<br>  &#125;<br><br>  <span class="hljs-meta">@override</span><br>  Widget build(BuildContext context) &#123;<br>    <span class="hljs-keyword">final</span> start = SizedBox(<br>      width: <span class="hljs-built_in">double</span>.maxFinite,<br>      child: ElevatedButton(<br>        child: Text(<span class="hljs-string">&#x27;Start&#x27;</span>),<br>        onPressed: () &#123;<br>          _onStart();<br>        &#125;,<br>      ),<br>    );<br>    <span class="hljs-keyword">final</span> stop = SizedBox(<br>      width: <span class="hljs-built_in">double</span>.maxFinite,<br>      child: ElevatedButton(<br>        child: Text(<span class="hljs-string">&#x27;Stop&#x27;</span>),<br>        onPressed: () &#123;<br>          onStop();<br>        &#125;,<br>      ),<br>    );<br>    <span class="hljs-keyword">final</span> clear = SizedBox(<br>      width: <span class="hljs-built_in">double</span>.maxFinite,<br>      child: ElevatedButton(<br>        child: Text(<span class="hljs-string">&#x27;Clear Log&#x27;</span>),<br>        onPressed: () &#123;<br>          FileManager.clearLogFile();<br>          setState(() &#123;<br>            logStr = <span class="hljs-string">&#x27;&#x27;</span>;<br>          &#125;);<br>        &#125;,<br>      ),<br>    );<br>    <span class="hljs-built_in">String</span> msgStatus = <span class="hljs-string">&quot;-&quot;</span>;<br>    <span class="hljs-keyword">if</span> (isRunning != <span class="hljs-keyword">null</span>) &#123;<br>      <span class="hljs-keyword">if</span> (isRunning) &#123;<br>        msgStatus = <span class="hljs-string">&#x27;Is running&#x27;</span>;<br>      &#125; <span class="hljs-keyword">else</span> &#123;<br>        msgStatus = <span class="hljs-string">&#x27;Is not running&#x27;</span>;<br>      &#125;<br>    &#125;<br>    <span class="hljs-keyword">final</span> status = Text(<span class="hljs-string">&quot;Status: <span class="hljs-subst">$msgStatus</span>&quot;</span>);<br><br>    <span class="hljs-keyword">final</span> log = Text(<br>      logStr,<br>    );<br><br>    <span class="hljs-keyword">return</span> MaterialApp(<br>      home: Scaffold(<br>        appBar: AppBar(<br>          title: <span class="hljs-keyword">const</span> Text(<span class="hljs-string">&#x27;Flutter background Locator&#x27;</span>),<br>        ),<br>        body: Container(<br>          width: <span class="hljs-built_in">double</span>.maxFinite,<br>          padding: <span class="hljs-keyword">const</span> EdgeInsets.all(<span class="hljs-number">22</span>),<br>          child: SingleChildScrollView(<br>            child: Column(<br>              crossAxisAlignment: CrossAxisAlignment.center,<br>              children: &lt;Widget&gt;[start, stop, clear, status, log],<br>            ),<br>          ),<br>        ),<br>      ),<br>    );<br>  &#125;<br><br>  <span class="hljs-keyword">void</span> onStop() <span class="hljs-keyword">async</span> &#123;<br>    <span class="hljs-keyword">await</span> BackgroundLocator.unRegisterLocationUpdate();<br>    <span class="hljs-keyword">final</span> _isRunning = <span class="hljs-keyword">await</span> BackgroundLocator.isServiceRunning();<br>    setState(() &#123;<br>      isRunning = _isRunning;<br>    &#125;);<br>  &#125;<br><br>  <span class="hljs-keyword">void</span> _onStart() <span class="hljs-keyword">async</span> &#123;<br>    <span class="hljs-keyword">if</span> (!<span class="hljs-keyword">await</span> _checkNotificationPermission()) <span class="hljs-keyword">return</span>;<br>    <span class="hljs-keyword">if</span>(!<span class="hljs-keyword">await</span> _checkLocationPermission()) <span class="hljs-keyword">return</span>;<br>    <span class="hljs-keyword">await</span> _startLocator();<br>    <span class="hljs-keyword">final</span> _isRunning = <span class="hljs-keyword">await</span> BackgroundLocator.isServiceRunning();<br><br>    setState(() &#123;<br>      isRunning = _isRunning;<br>    &#125;);<br>  &#125;<br><br>  Future&lt;<span class="hljs-built_in">bool</span>&gt; _checkLocationPermission() <span class="hljs-keyword">async</span> &#123;<br>    Permission _permission = Permission.location;<br>    PermissionStatus _status = <span class="hljs-keyword">await</span> _permission.request();<br>    <span class="hljs-keyword">if</span> (_status.isPermanentlyDenied) &#123;<br>      <span class="hljs-keyword">await</span> openAppSettings();<br>    &#125;<br>    <span class="hljs-keyword">return</span> _status.isGranted;<br>  &#125;<br><br>  Future&lt;<span class="hljs-built_in">bool</span>&gt; _checkNotificationPermission() <span class="hljs-keyword">async</span> &#123;<br>    Permission _permission = Permission.notification;<br>    PermissionStatus _status = <span class="hljs-keyword">await</span> _permission.request();<br>    <span class="hljs-keyword">if</span> (_status.isPermanentlyDenied) &#123;<br>      <span class="hljs-keyword">await</span> openAppSettings();<br>    &#125;<br>    <span class="hljs-keyword">return</span> _status.isGranted;<br>  &#125;<br><br>  Future&lt;<span class="hljs-keyword">void</span>&gt; _startLocator() <span class="hljs-keyword">async</span>&#123;<br><br>    <span class="hljs-built_in">Map</span>&lt;<span class="hljs-built_in">String</span>, <span class="hljs-built_in">dynamic</span>&gt; data = &#123;<span class="hljs-string">&#x27;countInit&#x27;</span>: <span class="hljs-number">1</span>&#125;;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">await</span> BackgroundLocator.registerLocationUpdate(<br>        LocationCallbackHandler.callback,<br>        initCallback: LocationCallbackHandler.initCallback,<br>        initDataCallback: data,<br>        disposeCallback: LocationCallbackHandler.disposeCallback,<br>        iosSettings: IOSSettings(<br>            accuracy: LocationAccuracy.NAVIGATION,<br>            distanceFilter: <span class="hljs-number">0</span>,<br>            stopWithTerminate: <span class="hljs-keyword">true</span><br>        ),<br>        autoStop: <span class="hljs-keyword">false</span>,<br>        androidSettings: AndroidSettings(<br>            accuracy: LocationAccuracy.NAVIGATION,<br>            interval: <span class="hljs-number">1</span>,<br>            distanceFilter: <span class="hljs-number">0</span>,<br>            client: LocationClient.google,<br>            androidNotificationSettings: AndroidNotificationSettings(<br>                notificationChannelName: <span class="hljs-string">&#x27;Location tracking&#x27;</span>,<br>                notificationTitle: <span class="hljs-string">&#x27;Start Location Tracking&#x27;</span>,<br>                notificationMsg: <span class="hljs-string">&#x27;Track location in background&#x27;</span>,<br>                notificationBigMsg:<br>                <span class="hljs-string">&#x27;Background location is on to keep the app up-tp-date with your location. This is required for main features to work properly when the app is not running.&#x27;</span>,<br>                notificationIcon: <span class="hljs-string">&#x27;&#x27;</span>,<br>                notificationIconColor: Colors.grey,<br>                notificationTapCallback:<br>                LocationCallbackHandler.notificationCallback)<br>        )<br>    );<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>在 AndroidMaifest.xml 裡面要加上：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">uses-permission</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.permission.POST_NOTIFICATIONS&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">uses-permission</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.permission.ACCESS_FINE_LOCATION&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">uses-permission</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.permission.ACCESS_BACKGROUND_LOCATION&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">uses-permission</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.permission.WAKE_LOCK&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">uses-permission</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.permission.FOREGROUND_SERVICE&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure><!-- ### Demo[![](https://markdown-videos-api.jorgenkh.no/youtube/euh3HlNAERs)](https://youtu.be/euh3HlNAERs) -->]]></content>
    
    
    <categories>
      
      <category>Flutter</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Flutter</tag>
      
      <tag>App</tag>
      
      <tag>ECHO</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Recursion</title>
    <link href="/notes/2023/09/13/recursion/"/>
    <url>/notes/2023/09/13/recursion/</url>
    
    <content type="html"><![CDATA[<h2 id="Substitution-Method"><a href="#Substitution-Method" class="headerlink" title="Substitution Method"></a>Substitution Method</h2><h4 id="1-T-n-2T-lfloor-n-2-rfloor-n-T-1-1"><a href="#1-T-n-2T-lfloor-n-2-rfloor-n-T-1-1" class="headerlink" title="1. $ T(n) &#x3D; 2T(\lfloor n&#x2F;2 \rfloor) + n$, $ T(1) &#x3D; 1$"></a>1. $ T(n) &#x3D; 2T(\lfloor n&#x2F;2 \rfloor) + n$, $ T(1) &#x3D; 1$</h4><ul><li>Guess $ T(n) &#x3D; O(n lgn)$</li><li>Show it by <strong>induction</strong><ul><li>for $ n &#x3D; 2$, $ T(2) &#x3D; 4$</li><li>for $ c &#x3D; 2$, $ T(2) \le c n lgn$</li></ul></li><li>Base case: $ n_0 &#x3D; 2$ hold</li><li>Induction case<ul><li>Assume the guess is true for all $ n &#x3D; 2, 3, …, k$</li><li>For $ n &#x3D; k + 1$, we have<br>$$\begin{align}<br>T(n) &amp;&#x3D; 2T(\lfloor n&#x2F;2 \rfloor) + n \newline<br>&amp;\le 2c\lfloor n&#x2F;2 \rfloor lg \lfloor n&#x2F;2 \rfloor + n \newline<br>&amp;\le c n lg n&#x2F;2 + n &#x3D; c n lgn - c n + n \newline<br>&amp;\le c n lg n<br>\end{align} $$</li></ul></li></ul><h4 id="2-T-n-T-lfloor-n-2-rfloor-T-lceil-n-2-rceil-1-T-1-1"><a href="#2-T-n-T-lfloor-n-2-rfloor-T-lceil-n-2-rceil-1-T-1-1" class="headerlink" title="2. $ T(n) &#x3D; T(\lfloor n&#x2F;2 \rfloor) + T(\lceil n&#x2F;2 \rceil) + 1$, $ T(1) &#x3D; 1$"></a>2. $ T(n) &#x3D; T(\lfloor n&#x2F;2 \rfloor) + T(\lceil n&#x2F;2 \rceil) + 1$, $ T(1) &#x3D; 1$</h4><ul><li>可以發現當 $  n &#x3D; 16 $ 時<br>$$<br> \begin{align}<br>   T(16) &amp;&#x3D; 2T(8) + 1 \newline<br>   &amp;&#x3D; 4T(4) + 2 + 1 \newline<br>   &amp;&#x3D; 8T(2) + 4 + 2 + 1 \newline<br>   &amp;&#x3D; 16T(1) + 8 + 4 + 2 + 1<br> \end{align}<br>$$<ul><li>當 n 夠大時， $ T(1)$ 項可以被省略，所以可以猜 $ T(n) &#x3D; O(n)$</li></ul></li><li>Base case: for $ c &#x3D; 1$, $ T(1) &#x3D; 1 \le cn &#x3D; 1$</li><li>Inductive case:<br>$$<br> \begin{align}<br>   T(n) &amp;&#x3D; T(\lfloor n&#x2F;2 \rfloor) + T(\lceil n&#x2F;2 \rceil) + 1 \newline<br>   &amp;&#x3D; cn + 1 \newline<br>   &amp;\not\le cn<br> \end{align}<br>$$</li><li>Solution:  prove a <strong>stronger</strong> statement<ul><li>$ T(n) \le cn - b$</li></ul></li><li>Base case: for $ c &#x3D; 2, ; b &#x3D; 1$, $ T(2) &#x3D; 3 \le cn - b &#x3D; 3$</li><li>Improved Inductive case:<br>$$<br> \begin{align}<br>   T(n) &amp;&#x3D; T(\lfloor n&#x2F;2 \rfloor) + T(\lceil n&#x2F;2 \rceil) + 1 \newline<br>   &amp;&#x3D; c\lfloor n&#x2F;2 \rfloor - b + c \lceil n&#x2F;2 \rceil - b + 1 \newline<br>   &amp;&#x3D; cn - b \newline<br>   &amp;\le cn ,\quad (b \ge 1)<br> \end{align}<br>$$</li></ul><h4 id="3-T-n-2T-sqrt-n-lgn"><a href="#3-T-n-2T-sqrt-n-lgn" class="headerlink" title="3. $ T(n) &#x3D; 2T(\sqrt{n}) + lgn$"></a>3. $ T(n) &#x3D; 2T(\sqrt{n}) + lgn$</h4><ul><li>Set $ m &#x3D; lgn$, we get $ T(2^m) &#x3D; 2T(2^{m&#x2F;2}) + m$</li><li>Rename $ S(m) &#x3D; T(2^m) &#x3D; T(n)$, $ S(m) &#x3D; 2S(m&#x2F;2) + m$</li><li>We solve $ S(m) &#x3D; O(mlgm)$, $ T(n) &#x3D; O(lgn \cdot lg(lgn))$</li></ul><h2 id="Recursion-Tree-Method"><a href="#Recursion-Tree-Method" class="headerlink" title="Recursion Tree Method"></a>Recursion Tree Method</h2><h4 id="1-T-n-2T-n-2-n-2-with-T-1-1"><a href="#1-T-n-2T-n-2-n-2-with-T-1-1" class="headerlink" title="1. $ T(n) &#x3D; 2T(n&#x2F;2) + n^2$, with $ T(1) &#x3D; 1$"></a>1. $ T(n) &#x3D; 2T(n&#x2F;2) + n^2$, with $ T(1) &#x3D; 1$</h4><ul><li>Expanding the terms<br>  $$<br>\begin{align}<br>  T(n) &amp;&#x3D; 2T(n&#x2F;2) + n^2 \newline<br>  &amp;&#x3D; n^2 + n^2&#x2F;2 + 4T(n&#x2F;4) \newline<br>  &amp;&#x3D; n^2 + n^2&#x2F;2 + n^2&#x2F;4 + 8T(n&#x2F;8) \newline<br>  &amp;&#x3D; … \newline<br>  &amp;&#x3D; \sum_{k&#x3D;0}^{lgn - 1} (1&#x2F;2)^k n^2 + 2^{lgn}T(1) \newline<br>  &amp;&#x3D; \Theta(n^2) + \Theta(n) &#x3D; \Theta(n^2) \newline<br>\end{align}<br>  $$</li></ul><h4 id="2-T-n-T-n-3-T-2n-3-n-with-T-1-1"><a href="#2-T-n-T-n-3-T-2n-3-n-with-T-1-1" class="headerlink" title="2. $ T(n) &#x3D; T(n&#x2F;3) + T({2n}&#x2F;3) + n$, with $ T(1) &#x3D; 1$"></a>2. $ T(n) &#x3D; T(n&#x2F;3) + T({2n}&#x2F;3) + n$, with $ T(1) &#x3D; 1$</h4><ul><li>深度是 $ log_{3&#x2F;2}n$，因為右邊項都是原本的 2&#x2F;3</li></ul><h2 id="Master-Method"><a href="#Master-Method" class="headerlink" title="Master Method"></a>Master Method</h2><ul><li>When the <strong>recurrence</strong> is in a special form, we can apply the <strong>Master Theorem</strong> to solve the recurrence immediately</li><li>$ T(n) &#x3D; aT(n&#x2F;b) + f(n)$ with $ a \ge 1$ and $ b &gt; 1$, where $ n&#x2F;b$ is either $ \lfloor n&#x2F;b \rfloor$ or $ \lceil n&#x2F;b \rceil$</li><li>There are three cases</li></ul><h4 id="1-Case-1"><a href="#1-Case-1" class="headerlink" title="1. Case 1"></a>1. Case 1</h4><ul><li>$ f(n) &#x3D; O(n^{log_b^{a} - \epsilon})$ for some constant $ \epsilon &gt; 0$</li><li>這代表的意義是，recursion 通常最後可以分成兩項<ol><li><strong>最後一層的數量</strong>，也就是 Divide</li><li><strong>每一層要做的計算</strong>，也就是 Conquer</li></ol></li><li>比較兩者，Case 1 代表 Divide 的計算量比 Conquer 大，所以可以忽略 Conquer 的時間複雜度</li><li>方程式中的 $ n^{log_b{a}}$ 代表最後一層有幾個 node，也可以看成 $ a^{log_b{n}}$，代表每一層 <strong>會增加 a</strong> 倍的 node，且總共有 $ log_b{n}$層 </li><li>Example<ol><li>$ T(n) &#x3D; 9T(n&#x2F;3) + n$, T(1) &#x3D; 1<ul><li>We have $ a &#x3D; 9, ; b &#x3D; 3, ; f(n) &#x3D; n$</li><li>Since $ n^{log_b{a}} &#x3D; n^{log_3{9}} &#x3D; n^2$, $ f(n) &#x3D; n &#x3D; O(n^{2-\epsilon})$, we have $ T(n) &#x3D; \Theta(n^2)$, where $ \epsilon &#x3D; 1$</li></ul></li><li>$ T(n) &#x3D; 8T(n&#x2F;2) + n^2$, T(1) &#x3D; 1<ul><li>We have $ a &#x3D; 8, b &#x3D; 2 and f(n) &#x3D; \Theta(n^2)$</li><li>Since $ n^{log_b{a}} &#x3D; n^{log_2{8}} &#x3D; n^3$, $ f(n) &#x3D; n^2 &#x3D; O(n^{3-\epsilon})$, we have $ T(n) &#x3D; \Theta(n^3)$, where $ \epsilon &#x3D; 1$</li></ul></li><li>$ T(n) &#x3D; 7T(n&#x2F;2) + n^2$<ul><li>We have $ a &#x3D;7, b &#x3D; 2$, $ n^{log_b{a}} &#x3D; n^{lg 7} \approx n^{2.81}$</li><li>Hence, $ T(n) &#x3D; \Theta({n^{2.81}})$</li></ul></li></ol></li></ul><h4 id="2-Case-2"><a href="#2-Case-2" class="headerlink" title="2. Case 2"></a>2. Case 2</h4><ul><li>Divide 和 Conquer 計算量一樣</li><li>If $ f(n) &#x3D; O(n^{log_b^{a}})$, then $ T(n) &#x3D; \Theta(f(n) lg n)$</li><li>Example<ol><li>$ T(n) &#x3D; T(2n&#x2F;3) + 1$  <ul><li>$ a &#x3D; 1, b &#x3D; 3&#x2F;2, f(n) &#x3D; 1$, and $ n^{log_b{a}} &#x3D; n^{log_{3&#x2F;2}{1}} &#x3D; 1$</li><li>We have $ f(n) &#x3D; \Theta(n^{log_b{a}}) &#x3D; \Theta(1)$</li><li>Thus $ T(n) &#x3D; \Theta(lg n)$</li></ul></li></ol></li></ul><h4 id="3-Case-3"><a href="#3-Case-3" class="headerlink" title="3. Case 3"></a>3. Case 3</h4><ul><li>Conquer 計算量比 Divide 大</li><li>If $ f(n) &#x3D; \Omega(n^{log_b{a} + \epsilon})$ for some constant $ \epsilon &gt; 0$</li><li>And if $ a f(n&#x2F;b \le cf(n))$ for some constant $ c &lt; 1$</li><li>Then $ T(n) &#x3D; \Theta(f(n))$</li><li>Example: $ T(n) &#x3D; 3T(n&#x2F;4) + nlgn$ <ul><li>$ a &#x3D; 3, b &#x3D; 4$, $ f(n) &#x3D; n lg n$, and $ n^{log_4{3}} &#x3D; O(n^{0.793})$</li><li>$ f(n) &#x3D; \Omega(n^{0.793 + \epsilon})$</li><li>$ af(n&#x2F;b) &#x3D; 3f(n&#x2F;4) &#x3D; 3(n&#x2F;4)lg(n&#x2F;4) \le (3&#x2F;4)n lgn &#x3D; cf(n) &#x3D; cf(n)$, for c &#x3D; 3&#x2F;4</li><li>Hence, $ T(n) &#x3D; \Theta(n lg n)$</li></ul></li></ul><h4 id="4-不能用的情況"><a href="#4-不能用的情況" class="headerlink" title="4. 不能用的情況"></a>4. 不能用的情況</h4><ol><li><p>$ f(n)$ is smaller than $ n^{log_b{a}}$ but <strong>not polynomial smaller</strong> </p><ul><li>Example: $ T(n) &#x3D; 2T(n&#x2F;2) + n&#x2F;lgn$<ul><li>$ n^{log_b{a}} &#x3D; n^{log_2{2}} &#x3D; n$, <strong>n&#x2F;lgn</strong> is smaller than <strong>n</strong> but <strong>not polynomial smaller</strong></li><li>Hence you can’t use Master theorem</li></ul></li></ul></li><li><p>$ f(n)$ is larger than $ n^{log_b{a}}$ but <strong>not polynomial larger</strong></p><ul><li>Example: $ T(n) &#x3D; 2T(n&#x2F;2) + nlgn$<ul><li>$ n^{log_b{a}} &#x3D; n^{log_2{2}} &#x3D; n$, <strong>n&#x2F;lgn</strong> is larger than <strong>n</strong> but <strong>not polynomial larger</strong></li><li>Hence you can’t use Master theorem</li></ul></li></ul></li></ol>]]></content>
    
    
    <categories>
      
      <category>Algorithm</category>
      
      <category>Recursion</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Recursion</tag>
      
      <tag>Algorithm</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Simple Discord Music Bot</title>
    <link href="/notes/2023/09/08/simple-discord-music-bot/"/>
    <url>/notes/2023/09/08/simple-discord-music-bot/</url>
    
    <content type="html"><![CDATA[<blockquote><p>一個可以撥放 Youtube playlist 的 Discord 音樂機器人<br>Source code: <a href="https://github.com/933yee/discord-simple-music-bot">https://github.com/933yee/discord-simple-music-bot</a></p></blockquote><h2 id="Structure"><a href="#Structure" class="headerlink" title="Structure"></a>Structure</h2><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs stylus">project<br>  └── bot<br>       ├── bot<span class="hljs-selector-class">.py</span><br>       ├── config<span class="hljs-selector-class">.py</span><br>       └── data<br>            └── data<span class="hljs-selector-class">.py</span><br>       └── cogs<br>            ├── commands<span class="hljs-selector-class">.py</span><br>            └── events<span class="hljs-selector-class">.py</span><br>  └── .env<br></code></pre></td></tr></table></figure><h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><h3 id="main-py"><a href="#main-py" class="headerlink" title="main.py"></a>main.py</h3><ul><li>可以藉由更改<figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs py">bot = commands.Bot(command_prefix=<span class="hljs-string">&quot;!&quot;</span>, intents=intents)<br></code></pre></td></tr></table></figure>改變指令的前綴符號</li></ul><h3 id="config-py"><a href="#config-py" class="headerlink" title="config.py"></a>config.py</h3><ul><li>讀取儲存在 .env 檔案裡面 discord 機器人的 Token</li></ul><h3 id="data-py"><a href="#data-py" class="headerlink" title="data.py"></a>data.py</h3><ul><li>全域變數，提供給 events.py、commands.py 做處理，還會記哪些伺服器正在使用這個機器人<ul><li>server_data<ul><li>記錄某伺服器待播的歌曲清單</li></ul></li><li>server_loop<ul><li>記錄某伺服器是否正在循環撥放</li></ul></li></ul></li></ul><h3 id="events-py"><a href="#events-py" class="headerlink" title="events.py"></a>events.py</h3><ul><li>處理事件的地方，像是偵測機器人的開啟、語音頻道的變化（有人離開、加入）等事件。</li></ul><h3 id="commands-py"><a href="#commands-py" class="headerlink" title="commands.py"></a>commands.py</h3><ul><li>新增指令的地方，像是：<figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-meta">@commands.command(<span class="hljs-params">description=<span class="hljs-string">&quot;Exit voice channel\n&quot;</span> <span class="hljs-string">&quot; &quot;</span></span>)</span><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">def</span> <span class="hljs-title function_">exit</span>(<span class="hljs-params">self, ctx</span>):<br>    <span class="hljs-keyword">if</span> ctx.guild.<span class="hljs-built_in">id</span> <span class="hljs-keyword">in</span> server_data:<br>        <span class="hljs-keyword">await</span> ctx.voice_client.disconnect()<br>        <span class="hljs-keyword">del</span> server_data[ctx.guild.<span class="hljs-built_in">id</span>]<br>        <span class="hljs-keyword">del</span> server_loop[ctx.guild.<span class="hljs-built_in">id</span>]<br></code></pre></td></tr></table></figure><ul><li>description 是提供給 !help 指令做介紹，簡述指令的功能</li></ul></li></ul>]]></content>
    
    
    <categories>
      
      <category>Side projects</category>
      
      <category>Discord Bot</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Side Projects</tag>
      
      <tag>Discord</tag>
      
      <tag>Bot</tag>
      
      <tag>Backend</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>學貸申請步驟</title>
    <link href="/notes/2023/09/06/nthu-loan/"/>
    <url>/notes/2023/09/06/nthu-loan/</url>
    
    <content type="html"><![CDATA[<p>到 <strong><a href="https://www.ccxp.nthu.edu.tw/ccxp/INQUIRE">校務資訊系統</a>&#x2F; 繳費單相關作業(出納組)&#x2F; 繳費單列印&#x2F; 學雜費</strong>，看學費多少，扣掉<strong>不可貸款項目</strong> (體育設施使用費)</p><h4 id="就學貸款申請表"><a href="#就學貸款申請表" class="headerlink" title="就學貸款申請表"></a>就學貸款申請表</h4><ul><li>到校務資訊系統&#x2F; 就學貸款&#x2F;就學貸款申請&#x2F;填寫就學貸款申請表，列印簽名，填好會給<strong>不可貸款項目繳費單</strong></li></ul><h4 id="臺灣銀行撥款通知書第-2-聯"><a href="#臺灣銀行撥款通知書第-2-聯" class="headerlink" title="臺灣銀行撥款通知書第 2 聯"></a>臺灣銀行撥款通知書第 2 聯</h4><ul><li>到 <strong><a href="https://sloan.bot.com.tw/customer/login/SLoanLogin.action">臺灣銀行就學貸款入口網</a></strong> 填寫申請書，填好選擇簡訊 OTP 認證對保</li></ul><h4 id="不可貸款項目繳費證明"><a href="#不可貸款項目繳費證明" class="headerlink" title="不可貸款項目繳費證明"></a>不可貸款項目繳費證明</h4>]]></content>
    
    
    <categories>
      
      <category>Others</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Others</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Time Complexity</title>
    <link href="/notes/2023/01/17/time-complexity/"/>
    <url>/notes/2023/01/17/time-complexity/</url>
    
    <content type="html"><![CDATA[<p><img src="https://miro.medium.com/v2/resize:fit:1400/1*5ZLci3SuR0zM_QlZOADv8Q.jpeg" alt="Big-O Complexity Chart"></p><h2 id="Big-O-O"><a href="#Big-O-O" class="headerlink" title="Big-O ($O$)"></a><strong>Big-O ($O$)</strong></h2><h3 id="Definition"><a href="#Definition" class="headerlink" title="Definition"></a><strong>Definition</strong></h3><ul><li>f(n) &#x3D; $O$(g(n)) iff $\exists$ <span style="color:yellow">  c, n<sub>0</sub> &gt; 0 </span> such that<span style="color:yellow"> f(n)$\le$ c $\cdot$ g(n) </span> $\forall$ <span style="color:yellow"> n $\ge$ n<sub>0</sub> </span></li></ul><h3 id="Examples"><a href="#Examples" class="headerlink" title="Examples"></a><strong>Examples</strong></h3><ul><li><dl><dt>3n+2 &#x3D; $O$(n)</dt><dd>When c&#x3D;4, n<sub>0</sub> &#x3D; 2, 3n+2 $\le$ 4n for all n $\ge$ 2.</dd></dl></li><li><dl><dt>100n+6 &#x3D; $O$(n)</dt><dd>When c&#x3D;101, n<sub>0</sub> &#x3D; 6, 100n+6 $\le$ 101n for all n $\ge$ 6. </dd></dl></li><li><dl><dt>10n<sup>2</sup>+4n+2 &#x3D; $O$(n<sup>2</sup>)</dt><dd>When c&#x3D;11, n<sub>0</sub> &#x3D; 5, 10n<sup>2</sup>+4n+2 $\le$ 11n<sup>2</sup> for all n $\ge$ 5. </dd></dl></li><li><h3 id="Properties"><a href="#Properties" class="headerlink" title="Properties"></a><strong>Properties</strong></h3><ul><li>f(n) &#x3D; $O$(g(n)) states that $O$(g(n)) is an <span style="color:yellow"> upper bound </span> of f(n), so n &#x3D; $O$(n) &#x3D; $O$(n<sup>2.5</sup>) &#x3D; $O$(n<sup>3</sup>) &#x3D; $O$(n<sup>n</sup>). However, we want g(n) <span style="color:yellow"> as small as possible </span>.</li><li>Big-O refers to <span style="color:yellow"> worst-case running time </span> of a program.</li></ul></li></ul><h2 id="Big-Omega-Omega"><a href="#Big-Omega-Omega" class="headerlink" title="Big-Omega($\Omega$)"></a><strong>Big-Omega($\Omega$)</strong></h2><h3 id="Definition-1"><a href="#Definition-1" class="headerlink" title="Definition"></a><strong>Definition</strong></h3><ul><li>f(n) &#x3D; $\Omega$(g(n)) iff $\exists$ <span style="color:yellow">  c, n<sub>0</sub> &gt; 0 </span> such that <span style="color:yellow">f(n)$\ge$ c $\cdot$ g(n) </span> $\forall$ <span style="color:yellow"> n  $\ge$ n<sub>0</sub> </span>.</li></ul><h3 id="Examples-1"><a href="#Examples-1" class="headerlink" title="Examples"></a><strong>Examples</strong></h3><ul><li><dl><dt>3n+2 &#x3D; $\Omega$(n)</dt><dd>When c&#x3D;3, n<sub>0</sub> &#x3D; 1, 3n+2 $\ge$ 3n $\forall$ n $\ge$ 1.</dd></dl></li><li><dl><dt>100n+6 &#x3D; $\Omega$(n)</dt><dd>When c&#x3D;100, n<sub>0</sub> &#x3D; 1, 100n+6 $\ge$ 100n $\forall$ n $\ge$ 1.  </dd></dl></li><li><dl><dt>10n<sup>2</sup>+4n+2 &#x3D; $\Omega$(n<sup>2</sup>)</dt><dd>When c&#x3D;1, n<sub>0</sub> &#x3D; 1, 10n<sup>2</sup>+4n+2 $\ge$ n<sup>2</sup> $\forall$ n $\ge$ 1.</dd></dl></li></ul><h3 id="Properties-1"><a href="#Properties-1" class="headerlink" title="Properties"></a><strong>Properties</strong></h3><ul><li>f(n) &#x3D; $\Omega$(g(n)) states that $\Omega$(g(n)) is a <span style="color:yellow"> lower bound </span> of f(n).</li><li>$\Omega$ refers to <span style="color:yellow"> best-case running time </span> of a program.</li></ul><h2 id="Big-Theta-theta"><a href="#Big-Theta-theta" class="headerlink" title="Big-Theta($\theta$)"></a><strong>Big-Theta($\theta$)</strong></h2><h3 id="Definition-2"><a href="#Definition-2" class="headerlink" title="Definition"></a><strong>Definition</strong></h3><ul><li>f(n) &#x3D; $\theta$(g(n)) iff <span style="color:yellow"> f(n) &#x3D; $O$(g(n)) </span> and <span style="color:yellow"> f(n) &#x3D; $\Omega$(g(n))</span>.</li></ul><h3 id="Examples-2"><a href="#Examples-2" class="headerlink" title="Examples"></a><strong>Examples</strong></h3><ul><li>3n+2 &#x3D; $\theta$(n)</li><li>100n+6 &#x3D; $\theta$(n)</li><li>10n<sup>2</sup>+4n+2 &#x3D; $\theta$(n<sup>2</sup>)</li></ul><h3 id="Properties-2"><a href="#Properties-2" class="headerlink" title="Properties"></a><strong>Properties</strong></h3><ul><li>f(n) &#x3D; $\theta$(g(n)) states that $\theta$(g(n)) is a <span style="color:yellow"> tight bound </span> of f(n).</li><li>$\theta$ refers to <span style="color:yellow"> average-case running time </span >of a program.</li></ul><h2 id="Cheat-Sheets"><a href="#Cheat-Sheets" class="headerlink" title="Cheat Sheets"></a><strong>Cheat Sheets</strong></h2><p><img src="https://pic4.zhimg.com/80/v2-bea9f0ddbc2d810e9feba3f3cc8b2b7f_720w.webp" alt="Data Structure Operations"><br><img src="https://pic4.zhimg.com/80/v2-c9074ce39abbdebd1120451bf657e67f_720w.webp" alt="Array Sorting"></p><h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><ul><li><a href="https://www.google.com/url?sa=t&rct=j&q=&esrc=s&source=web&cd=&ved=2ahUKEwjr647gjoiEAxX2hq8BHQilDfMQFnoECBEQAQ&url=https://www.bigocheatsheet.com/&usg=AOvVaw0j8XV1sZ0vh9PgRFBYyAHO&opi=89978449">Big-O Algorithm Complexity Cheat Sheet</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>Algorithm</category>
      
      <category>Time Complexity</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Algorithm</tag>
      
      <tag>Time Complexity</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
