<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>專題</title>
    <link href="/notes/2024/03/17/%E5%B0%88%E9%A1%8C/"/>
    <url>/notes/2024/03/17/%E5%B0%88%E9%A1%8C/</url>
    
    <content type="html"><![CDATA[<h2 id="Forward-Rendering"><a href="#Forward-Rendering" class="headerlink" title="Forward Rendering"></a>Forward Rendering</h2><ul><li>對場景中每個物體進行光柵化，對每一個幾何體計算場景所有燈光</li><li>計算完後，我們不希望畫出被擋住的物體，所以進行深度測試 (Z-Buffering)，把被擋住的多邊形剔除</li><li>這樣對於被剃除的物體和當前看不到的燈光的計算會很浪費資源，而且計算樣很大，因此後來出現了 Deferred Rendering</li></ul><h2 id="Deferred-Rendering-Deferred-Shading"><a href="#Deferred-Rendering-Deferred-Shading" class="headerlink" title="Deferred Rendering (Deferred Shading)"></a>Deferred Rendering (Deferred Shading)</h2><ul><li>前面有說被剃除的物體和當前看不到的燈光的計算會很浪費資源，延遲渲染就是不要去計算它們</li><li>增加了一個 Geometric Buffer (G-Buffer)</li><li>物體先進行深度測試，再把各種數據光柵化到 G-Buffer，光照延遲到最後計算</li><li>G-Buffer 生成後，開始計算光照。每個光照只會對他覆蓋的像素計算一次</li></ul><p>不一定 Forward Rendering 就比較爛，還是要看情況使用，像是 VR 就是使用 Forward Rendering，因為 Deferred Rendering 的 G-Buffer 很吃頻寬</p><h2 id="primitive-component"><a href="#primitive-component" class="headerlink" title="primitive component"></a>primitive component</h2><h2 id="Shaders"><a href="#Shaders" class="headerlink" title="Shaders"></a>Shaders</h2><p>Unreal Engine 所有 shader 的 base class 是 FShader，主要有兩種</p><ol><li>FGlobalShader<ul><li>只有一個存在</li></ul></li><li>FMaterialShader<ul><li>跟 Material 有關的<br>FShader 和 FShaderResource 綁定後，該 FShaderResource 會跟著該 Shader 運用 GPU 資源</li></ul></li></ol>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Computer Graphics</title>
    <link href="/notes/2024/03/13/CG/"/>
    <url>/notes/2024/03/13/CG/</url>
    
    <content type="html"><![CDATA[<h2 id="OpenGL"><a href="#OpenGL" class="headerlink" title="OpenGL"></a>OpenGL</h2><p>OpenGL defines the function specification of each API and leaves the implementation to the vendors themselves</p><ul><li>OpenGL 只有定 SPEC，具體怎麼做留給硬體廠商</li><li>每個硬體可能執行運算的方式不太一樣，像是做加法時，可能精度不一樣</li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>CG</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>作業系統筆記</title>
    <link href="/notes/2024/03/13/os-1/"/>
    <url>/notes/2024/03/13/os-1/</url>
    
    <content type="html"><![CDATA[<blockquote><p>周志遠教授作業系統開放式課程</p></blockquote><h1 id="Course-Contents"><a href="#Course-Contents" class="headerlink" title="Course Contents"></a>Course Contents</h1><ul><li>Overview</li><li>Process Management</li><li>Process Coordination</li><li>Memory Management</li><li>Storage Management</li></ul><h1 id="Historical-Prospective"><a href="#Historical-Prospective" class="headerlink" title="Historical Prospective"></a>Historical Prospective</h1><ul><li><p>Mainframe Systems</p><ul><li>Batch</li><li>Multi-programming</li><li>Time-sharing</li></ul></li><li><p>Computer-system Architecture</p><ul><li>Desktop Systems: single processor</li><li>Parellel Systems: tightly coupled</li><li>Distributed Systems: loosely coupled</li></ul></li><li><p>Special-purpose Systems</p><ul><li>Real-Time Systems</li><li>Multimedia Systems</li><li>Handheld Systems</li></ul></li></ul><h2 id="Mainframe-Systems"><a href="#Mainframe-Systems" class="headerlink" title="Mainframe Systems"></a>Mainframe Systems</h2><ul><li>最早的電腦，體積很大，用於科學計算</li><li>IO device 很慢<ul><li>card reader&#x2F;printer, tape drivers</li></ul></li><li>Evolution:<ul><li>Batch -&gt; Multi-programming -&gt; Time-sharing</li></ul></li><li>現在說的 Mainframe 是指專門做某工作的機器<ul><li>For critical application with better <strong>reliability &amp; security</strong></li><li>Bulk data processing</li><li>廣泛使用於醫院、銀行</li></ul></li></ul><h3 id="Batch-Systems"><a href="#Batch-Systems" class="headerlink" title="Batch Systems"></a>Batch Systems</h3><p><img src="/notes/./images/os-1/BatchSystem.png" alt="Batch System"></p><ul><li>Process steps:<ul><li>Users submit jobs (program, data, control card)</li><li>Operator(人) sort jobs with similar requirements</li><li><strong>OS simply transfer control from one job to the next</strong></li></ul></li><li>缺點<ul><li>一次只能做一個工作</li><li>user 和 jobs 之間無法互動，執行過程中不能做其他事情</li><li><strong>CPU 常常耍廢</strong><ul><li>資源使用率很低</li><li>IO 速度 &lt;&lt; CPU 速度</li></ul></li></ul></li></ul><h3 id="Multi-programming-Systems"><a href="#Multi-programming-Systems" class="headerlink" title="Multi-programming Systems"></a>Multi-programming Systems</h3><ul><li>Overlaps the I&#x2F;O and computation of jobs<ul><li>某 program 在做 IO 時，CPU 不用等他做完，先做其他的 program</li></ul></li><li>Spooling (Simultaneous Peripheral Operation On-Line)<ul><li>做 IO 的過程不需要 CPU 參與</li><li>只需要 IO 做完再 notify CPU</li><li>靠 interrupt 達成</li></ul></li><li>Load 很多 jobs 到 Main memory，讓 CPU 決定現在要執行哪個</li><li>以上的工作包含<ul><li>Memory Management</li><li>CPU Scheduling</li><li>I&#x2F;O System</li></ul></li></ul><h3 id="Multi-tasking-Systems"><a href="#Multi-tasking-Systems" class="headerlink" title="Multi-tasking Systems"></a>Multi-tasking Systems</h3><ul><li>Multi-programming 雖然 CPU 的使用率提高了，但不是 <strong>interactive</strong>，最大問題就是依然只能一次執行一個</li><li>Time-sharing<ul><li>CPU 執行時，可以很頻繁的偵測 IO device 有沒有 input，就可以偵測使用者的互動</li><li>每個 job 只執行幾個 millisecond，就切換其他 job，讓使用者覺得每個程式好像同時在執行</li><li>螢幕、鍵盤都是這種概念</li></ul></li><li>可以讓多個使用者分享同個電腦</li><li>Switch jobs when<ul><li>finish</li><li>waiting IO</li><li>a short time peroid</li></ul></li><li>以上的工作包含<ul><li>Virtual Memory<ul><li>讓 memory 越大越好，可以 Load 更多 programs</li></ul></li><li>File System and Disk Management</li><li>Process Synchronization and Deadlock</li></ul></li></ul><p><img src="/notes/./images/os-1/MainframeSystemSummary.png" alt="Mainframe System Summary"></p><h2 id="Computer-system-Architecture"><a href="#Computer-system-Architecture" class="headerlink" title="Computer-system Architecture"></a>Computer-system Architecture</h2><h3 id="Desktop-Systems-PC"><a href="#Desktop-Systems-PC" class="headerlink" title="Desktop Systems: PC"></a>Desktop Systems: PC</h3><ul><li>Single user</li><li>GUI</li><li>lack of file and OS protection<ul><li>那時候沒有考慮到後來出現的網路</li></ul></li></ul><h3 id="Parallel-Systems"><a href="#Parallel-Systems" class="headerlink" title="Parallel Systems"></a>Parallel Systems</h3><ul><li><strong>multiprocessor</strong> or <strong>tightly coupled system</strong><ul><li>More than one CPU&#x2F;core in close communication</li><li>Usually communicate through <strong>shared memory</strong></li></ul></li><li>Purposes<ul><li>Throughput<ul><li>計算量增加</li></ul></li><li>Economical<ul><li>很多東西可以共用，memory、CPU、IO device、主機板…</li></ul></li><li>Reliability<ul><li>一個 CPU 掛了，其他還能繼續工作</li></ul></li></ul></li></ul><p><img src="/notes/./images/os-1/ParallelSystems.png" alt="Parallel Systems"></p><h4 id="Symmetric-multiprocessor-system-SMP"><a href="#Symmetric-multiprocessor-system-SMP" class="headerlink" title="Symmetric multiprocessor system (SMP)"></a>Symmetric multiprocessor system (SMP)</h4><ul><li>每個 processor 角色都相同，都由 OS 控制</li><li>現在幾乎都是 SMP</li><li>Require <strong>extensive synchronization</strong><ul><li>overhead 會比較大</li></ul></li></ul><h4 id="Asymmetric-multiprocessor-system"><a href="#Asymmetric-multiprocessor-system" class="headerlink" title="Asymmetric multiprocessor system"></a>Asymmetric multiprocessor system</h4><ul><li>有一個 Master CPU 和很多 multiple slave CPUs</li><li>每個 processor 會被 assign 特定工作</li><li>Master CPU 無法用來計算，只能用來管理</li><li>通常用在比較大的 system</li></ul><h4 id="Multi-Core-Processor"><a href="#Multi-Core-Processor" class="headerlink" title="Multi-Core Processor"></a>Multi-Core Processor</h4><ul><li>A CPU with <strong>multiple cores on the same die (chip)</strong></li><li>On-chip communication 會比 between-chip communication 還要快</li><li>One chip with multiple cores 會比 multiple single-core chips 還要省電</li></ul><p><img src="/notes/./images/os-1/MultiCoreProcessor.png" alt="Multi-Core Processor"></p><h4 id="Many-Core-Processor"><a href="#Many-Core-Processor" class="headerlink" title="Many-Core Processor"></a>Many-Core Processor</h4><ul><li>GPGPU<ul><li>Single Instruction Multiple Data (SIMD) 的操作</li><li>上千個 core</li></ul></li><li>Intel Xeon Phi</li><li>TILE64</li></ul><h4 id="Memory-Access-Architecture"><a href="#Memory-Access-Architecture" class="headerlink" title="Memory Access Architecture"></a>Memory Access Architecture</h4><ul><li>Uniform Memory Access (UMA)<ul><li>每個 CPU access memory 的速度相同，使用者不用在乎現在是在哪個 CPU 上執行</li><li>Identical processors</li><li>most commodity computers</li></ul></li></ul><p><img src="/notes/./images/os-1/UMA.png" alt="UMA"></p><ul><li>Non-Uniform Memory Access (NUMA)<ul><li>often made by physically linking two or more SMPs</li><li>One SMP can directly access memory or another SMP</li><li>Memory access across link 會比較慢</li><li>hierarchy 的架構，可以建構更大的電腦</li><li>高效能計算系統都是 NUMA</li></ul></li></ul><p><img src="/notes/./images/os-1/NUMA.png" alt="NUMA"></p><h3 id="Distributed-Systems"><a href="#Distributed-Systems" class="headerlink" title="Distributed Systems"></a>Distributed Systems</h3><ul><li>loosely coupled system</li><li>每個 system 有自己的 local memory</li><li>Easy to scale</li><li>Purposes<ul><li>Resource sharing</li><li>Load sharing<ul><li>某電腦工作量太大可以分給別台做</li></ul></li><li>Reliability<ul><li>一台電腦壞掉不會影響其他台</li></ul></li></ul></li></ul><h4 id="Client-Server"><a href="#Client-Server" class="headerlink" title="Client-Server"></a>Client-Server</h4><ul><li>Eaiser to manage and control resources</li><li>Server 可能會變成 bottleneck 和 single failure point</li><li>FTP</li></ul><h4 id="Peer-to-Peer"><a href="#Peer-to-Peer" class="headerlink" title="Peer-to-Peer"></a>Peer-to-Peer</h4><ul><li>Decentralized</li><li>ppStream, bitTorrent, Internet</li></ul><h4 id="Clustered-Systems"><a href="#Clustered-Systems" class="headerlink" title="Clustered Systems"></a>Clustered Systems</h4><ul><li>Cluster computers share storage</li><li>Local Area Network (LAN)，更快</li><li>Asymmetric clustering, Symmetric clustering</li></ul><p><img src="/notes/./images/os-1/SystemArchitecture.png" alt="System Architecture"></p><h2 id="Special-purpose-Systems"><a href="#Special-purpose-Systems" class="headerlink" title="Special-purpose Systems"></a>Special-purpose Systems</h2><h3 id="Real-Time-Operating-Systems"><a href="#Real-Time-Operating-Systems" class="headerlink" title="Real-Time Operating Systems"></a>Real-Time Operating Systems</h3><ul><li>Well-defined <strong>fixed-time contraints</strong><ul><li>Real-time 代表會在 deadlines 之前做完，跟速度沒關係</li></ul></li><li>Soft real-time<ul><li>Missing the deadline is unwanted, but is not immediately critical</li><li>Critical real-time task gets <strong>priority</strong> over others</li><li>Ex: multimedia streaming<ul><li>畫面不是馬上畫出來，可能會先出現線條，然後顏色，最後高解析度</li></ul></li></ul></li><li>Hard real-time<ul><li>Fundamental failure</li><li>Secondary storage limited or absent<ul><li>沒有 harddrive，因為讀取太慢，而且讀取時間不好掌握</li></ul></li><li>Ex: nuclear power plant controller</li></ul></li></ul><h3 id="Multimedia-Systems"><a href="#Multimedia-Systems" class="headerlink" title="Multimedia Systems"></a>Multimedia Systems</h3><ul><li>A wide range of applications including audio and video files</li><li>Issues<ul><li>Timing contraints</li><li>On-demand&#x2F;live streaming</li><li>Compression</li></ul></li></ul><h3 id="Handheld-Embedded-Systems"><a href="#Handheld-Embedded-Systems" class="headerlink" title="Handheld&#x2F;Embedded Systems"></a>Handheld&#x2F;Embedded Systems</h3><ul><li>Hardware specialized OS</li><li>Issues<ul><li>Limited memory</li><li>Slow processors</li><li>Battery consumption</li><li>Samll display screens</li></ul></li></ul><h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><ul><li>What is an Operating System?</li><li>Computer-System Organization</li><li>Hardware Protection</li></ul><h2 id="What-is-an-Operating-System"><a href="#What-is-an-Operating-System" class="headerlink" title="What is an Operating System"></a>What is an Operating System</h2><ul><li><p>Computer System</p><ul><li>Hardware<ul><li>provides basic <strong>computing resources</strong></li><li>CPU, memory, I&#x2F;O devices…</li></ul></li><li>OS<ul><li><strong>controls</strong> and <strong>coordinates</strong> the use of the <strong>hardware&#x2F;resources</strong></li></ul></li><li>Application<ul><li>define the ways in which the system resources are used to solve computer problems</li></ul></li><li>User<ul><li>people, machines, other computers</li></ul></li></ul></li><li><p>An OS is the <strong>permanent</strong> software that <strong>controls&#x2F;abstract</strong> hardware resources for user applications</p><ul><li>把下層的 hardware 變成一堆 API 讓使用者用，virtual 的概念</li></ul></li><li><p>Multi-tasking Operating Systems</p><ul><li>Manages resources and processes to support different user applications</li><li>Provides API for user applications</li></ul></li><li><p>General-Purpose Operating Systems</p><ul><li>使用 printf 的時候要印到螢幕，是 OS 負責的，所以要 system call</li><li>user call printf -&gt; printf call system call -&gt; system call call driver…</li><li>Device drivers 是 OS 的一部分<br><img src="/notes/./images/os-1/GeneralPurposeOperatingSystems.png" alt="General-Purpose Operating Systems"></li></ul></li><li><p>Definition of an Operating System</p><ul><li>Resource allocator<ul><li><strong>manages</strong> and <strong>allocates resources</strong> to insure efficiency and fairness</li></ul></li><li>Control program<ul><li><strong>controls</strong> the execution of user <strong>programs</strong> and operations of <strong>I&#x2F;O devices</strong> to prevent errors and improper use of computer</li></ul></li><li>Kernel<ul><li>the one program running at all times</li></ul></li></ul></li><li><p>Goals of an Operating Systems</p><ul><li>Convenience<ul><li>make computer system easy to use and compute</li><li>in particular for small PC</li></ul></li><li>Efficiency<ul><li>use computer hardware in an efficient manner</li><li>especially for large, shared, multiuser systems</li></ul></li><li>Two goals are sometimes contradictory</li></ul></li><li><p>Importance of an Operating Systems</p><ul><li>System API are the <strong>only</strong> interface between user applications and hardware<ul><li>API are designed for general-purpose, not performance driven</li></ul></li><li>OS code cannot allow any bug<ul><li>Any break causes reboot</li><li>有 bug 代表整台電腦都毀了</li></ul></li><li>The owner of OS technology controls the software &amp; hardware industry<ul><li>ex: hardware 和 software 都要 fllow microsoft 的 API、Mac hardware 都自己做</li></ul></li></ul></li></ul><h2 id="Computer-System-Organization"><a href="#Computer-System-Organization" class="headerlink" title="Computer-System Organization"></a>Computer-System Organization</h2><ul><li>One or more CPUs, device controllers connect through <strong>common bus</strong> providing access to <strong>shared memory</strong></li><li>Goal: <strong>Concurrent</strong> execution of CPUs and devices competing for memory cycles<ul><li>OS 要負責不讓 access memory 出問題，不讓它發生衝突</li></ul></li></ul><p><img src="/notes/./images/os-1/ComputerSystemOrganization.png" alt="Computer-System Organization"></p><h3 id="Device-Controller"><a href="#Device-Controller" class="headerlink" title="Device Controller"></a>Device Controller</h3><ul><li>Each device controller is in charge of a particular device type</li><li>Status reg 用來記錄現在 device controller 是 busy 還是 idle</li><li>Data reg 和 buffer 都是用來存資料，會先寫到 reg 再寫到 buffer</li><li>Device controller 有自己的 CPU 去 access disk 資料到自己的 buffer</li><li>Memory 是 CPU 在用的，所以 CPU 負責 moves data from&#x2F;to memory to&#x2F;from local buffers in device controllers</li></ul><p><img src="/notes/./images/os-1/DeviceController.png" alt="Device Controller"></p><h3 id="Busy-wait-output"><a href="#Busy-wait-output" class="headerlink" title="Busy&#x2F;wait output"></a>Busy&#x2F;wait output</h3><ul><li>Simplest way to program device<ul><li>Use instructions to test when device is ready</li></ul></li><li>浪費 CPU，常常 IDLE<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">define</span> OUT_CHAR 0x1000 <span class="hljs-comment">// device data register</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> OUT_STATUS 0x1001 <span class="hljs-comment">// device status register</span></span><br><br>current_char = mystring;<br><span class="hljs-keyword">while</span> (*current_char != <span class="hljs-string">&#x27;\0&#x27;</span>) &#123;<br>  <span class="hljs-built_in">poke</span>(OUT_CHAR,*current_char); <span class="hljs-comment">// 寫到 device controller 的 buffer</span><br>  <span class="hljs-keyword">while</span> (<span class="hljs-built_in">peek</span>(OUT_STATUS) != <span class="hljs-number">0</span>); <span class="hljs-comment">// busy waiting</span><br>  current_char++;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h3 id="Interrupt-I-O"><a href="#Interrupt-I-O" class="headerlink" title="Interrupt I&#x2F;O"></a>Interrupt I&#x2F;O</h3><ul><li>Busy&#x2F;wait 很沒效率<ul><li>CPU can’t do other work while testing device</li><li>Hard to do simultaneous I&#x2F;O</li></ul></li><li>Interrupts allow a device to <strong>change the flow of control in the CPU</strong><ul><li>讓 CPU 可以做其他程式的事情，而不是等 IO 做完</li><li>Causes subroutine call to handle device</li></ul></li></ul><h4 id="Interrupt-I-O-Timeline"><a href="#Interrupt-I-O-Timeline" class="headerlink" title="Interrupt I&#x2F;O Timeline"></a>Interrupt I&#x2F;O Timeline</h4><ul><li>Interrupt time line for I&#x2F;O on a single process<br><img src="/notes/./images/os-1/InterruptTimeline.png" alt="Interrupt I/O Timeline"><br>可以看到在做 IO 時 CPU 在做其他事情，等 IO 做完後 call 一個 interrupt 打斷 CPU 原本在做的事，讓 CPU 先過來搬資料，interrupt 結束後 CPU 又回去做它原本的事情</li></ul><h4 id="Interrupt-Driven-I-O"><a href="#Interrupt-Driven-I-O" class="headerlink" title="Interrupt-Driven I&#x2F;O"></a>Interrupt-Driven I&#x2F;O</h4><p><img src="/notes/./images/os-1/InterruptDrivenIO.png" alt="Interrupt-Driven I/O"></p><h4 id="Interrupt"><a href="#Interrupt" class="headerlink" title="Interrupt"></a>Interrupt</h4><ul><li>現在每個 OS 都是 interrupt driven</li><li>可能是 Hardware interrupt 或 Software interrupt<ul><li><strong>Hardware</strong> may trigger an interrupt at any time by sending a <strong>signal</strong> to CPU<ul><li>比較被動</li></ul></li><li><strong>Software</strong> may trigger an interrupt either by an <strong>error</strong> or by a user request for an operating system serivce (system call)<ul><li>error 像是 division by zero 或 invalid memory access，會讓 program counter reset 到可以印出錯誤訊息的地方，而不是 crash，比較被動</li><li>system call 就是要叫 OS 做事，呼叫 OS 的 API，比較主動<ul><li>間接處理，可以區分使用者的 function call 和 OS 的 function call</li></ul></li><li>Software interrupt 叫作 <strong>trap</strong></li></ul></li></ul></li></ul><h4 id="Hardware-interrupt"><a href="#Hardware-interrupt" class="headerlink" title="Hardware interrupt"></a>Hardware interrupt</h4><p><img src="/notes/./images/os-1/Hardwareinterrupt.png" alt="Hardware interrupt"></p><ul><li>interrupt vector 是 array of function pointers，array 大小是固定的</li><li>signal 都會有一個 singal number，根據這個 number 去找 vector 上的欄位</li><li>每個 port 的 hardware 有燒死的 singal number， 裝 driver 的時候會 overwrite 那個欄位的 pointer 的位置，去執行你要處理的程式碼</li></ul><h4 id="Software-interrupt"><a href="#Software-interrupt" class="headerlink" title="Software interrupt"></a>Software interrupt</h4><ul><li>是用 switch case 而不是 array，因為軟體有無限的可能性，跟硬體無關，可以任意增加不同的 system call</li><li>流程跟 hardware interrupt 差不多</li></ul><p><img src="/notes/./images/os-1/Softwareinterrupt.png" alt="Software interrupt"></p><h4 id="Common-Functions-of-Interrupts"><a href="#Common-Functions-of-Interrupts" class="headerlink" title="Common Functions of Interrupts"></a>Common Functions of Interrupts</h4><ul><li>Interrupt transfers control to the interrupt service routine generally, through the <strong>interrupt vector</strong>, which contains the <strong>addresses</strong> (function pointer) of all the <strong>service (i.e. interrupt handler) routines</strong></li><li>Interrupt architecture must save the address of the interrupted instruction<ul><li>才能在 interrupt 結束後執行原本的程式</li></ul></li><li>Incoming interrupts are <strong>disabled</strong> while another interrupt is being processed to prevent a lost interrupt<ul><li>避免發生很多 synchronize 的問題，這些問題需要大量的 overhead 去處理</li></ul></li></ul><h3 id="Storage-Device-Hierarchy"><a href="#Storage-Device-Hierarchy" class="headerlink" title="Storage-Device Hierarchy"></a>Storage-Device Hierarchy</h3><p><img src="/notes/./image/os-1/StorageDeviceHierarchy.png" alt="Storage-Device Hierarchy"></p><ul><li><p>真正的大型的系統最後還是用 tapes，因為非常 reliable</p></li><li><p>這是最傳統的架構，現在有很多其他的 storage device 會插在中間</p></li><li><p>Storage systems organized in hierarchy</p><ul><li>speed, cost, volatility</li><li>volatile 關掉會遺失</li></ul></li><li><p><strong>Main memory</strong> only large storage media that the <strong>CPU can access directly</strong></p></li><li><p>Secondary storage</p><ul><li>memory 以下都叫做 secondary storage</li><li><strong>large nonvolatile storage</strong></li></ul></li></ul><h4 id="Random-Access-Memory"><a href="#Random-Access-Memory" class="headerlink" title="Random-Access Memory"></a>Random-Access Memory</h4><ul><li><p>DRAM (Dynamic RAM)</p><ul><li>one transistor</li><li>less power</li><li>must be periodically refreshed </li><li>體積小，速度比較慢</li><li>因為 CPU 有很多 core， RAM 的速度其實就那樣，channel 的 bus 其實才是真正的 bottleneck</li></ul></li><li><p>SRAM (Static Ram)</p><ul><li>six transistors</li><li>more power</li><li>cache memory</li></ul></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>OS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Compiler 筆記</title>
    <link href="/notes/2024/03/07/compiler/"/>
    <url>/notes/2024/03/07/compiler/</url>
    
    <content type="html"><![CDATA[<h2 id="Compiliers-and-Assemblers"><a href="#Compiliers-and-Assemblers" class="headerlink" title="Compiliers and Assemblers"></a>Compiliers and Assemblers</h2><p>High-level language program (C)<br>⇒ C compilier<br>⇒ Assembly language program (for MIPS)<br>⇒ Assembler<br>⇒ Binary machine language program (for MIPS)</p><h2 id="Analysis-Synthesis-Model"><a href="#Analysis-Synthesis-Model" class="headerlink" title="Analysis-Synthesis Model"></a>Analysis-Synthesis Model</h2><p>Compilation 可以分成兩個部分</p><ul><li>Analysis (front end)<ul><li>Breaks up the source program into constituent pieces</li><li>Creates an Intermediate Representation (IR)</li></ul></li><li>Synthesis (back end)<ul><li>Constructs the desired target program from the IR</li><li>(Optionally) performs optimizations</li></ul></li></ul><p><img src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEjy5NjmBdRfsrfg96b3KYpevQqRBAygBtuvsszgZpXmPhyy7M9VH81zkvqd-uhdJBBtWL_u0_iaHC8nhSWK1gW7_0DNHxSofoPpj5CD76mp5wCRN7fSz5cDkzZmns_HZ12pRbBD37q9jYY/s1600/aandSmodel.bmp" alt="Analysis-Synthesis Model"></p><h2 id="Phase-of-a-Compiler"><a href="#Phase-of-a-Compiler" class="headerlink" title="Phase of a Compiler"></a>Phase of a Compiler</h2><p><img src="https://cdn1.byjus.com/wp-content/uploads/2022/03/phase-of-compiler.png" alt="Phase of a Compilier"></p><h3 id="Symbol-Table-Management"><a href="#Symbol-Table-Management" class="headerlink" title="Symbol-Table Management"></a>Symbol-Table Management</h3><ul><li>Essential function of a compiler<ul><li>To <strong>record the identifier</strong> used in the source program and collect information about various attributes of each identifier<ul><li>allocate storage, type, scope, etc</li></ul></li></ul></li><li>Symbol Table<ul><li>A data structure containing a record for each identifiers, with fields for the attributes</li><li>When a identifier is detected by the <strong>lexical analysis(詞法分析)</strong> , it is entered into the symbol table</li><li>The attributes are determined during <strong>syntax analysis(語法分析)</strong> and <strong>semanic analysis(語義分析)</strong></li></ul></li></ul><h3 id="Analysis-Phases"><a href="#Analysis-Phases" class="headerlink" title="Analysis Phases"></a>Analysis Phases</h3><ul><li>Lexical Analysis</li><li>Syntax Analysis</li><li>Semantic Analysis</li></ul><p><img src="/notes/./images/compiler/AnalysisPhasesExample.png" alt="Analysis Phases Example"></p><h3 id="Intermediate-Code-Generation"><a href="#Intermediate-Code-Generation" class="headerlink" title="Intermediate Code Generation"></a>Intermediate Code Generation</h3><ul><li>Two properties<ul><li>Easy to produce</li><li>Easy to translate into the target program</li></ul></li><li>Examples<ul><li>Graph representations</li><li>Postfix notation</li><li>Three-address code<ul><li>每條指令最多有三個 operands</li></ul></li></ul></li></ul><p><img src="/notes/./images/compiler/IntermediateCodeGenerationExample.png" alt="Intermediate Code Generation Example"></p><h3 id="Code-Optimization"><a href="#Code-Optimization" class="headerlink" title="Code Optimization"></a>Code Optimization</h3><ul><li>Attempts to improve the intermediate code<ul><li>So the faster-running machine code will result</li></ul></li></ul><p><img src="/notes/./images/compiler/CodeOptimizationExample.png" alt="Code Optimization Example"></p><h3 id="Code-Generation"><a href="#Code-Generation" class="headerlink" title="Code Generation"></a>Code Generation</h3><ul><li>Generates target code<ul><li>Consisting of reocatable machine code or assembly code</li></ul></li></ul><p><img src="/notes/./images/compiler/CodeGenerationExample.png" alt="Code Generation Example"></p><h3 id="Counsins-of-the-Compilier"><a href="#Counsins-of-the-Compilier" class="headerlink" title="Counsins of the Compilier"></a>Counsins of the Compilier</h3><ul><li>Preprocessors<ul><li>Produce input to compilers</li><li>Macro processing</li><li>File inclusion</li></ul></li><li>Assemblers</li><li>Loaders and Link-Editors</li></ul><h2 id="Evolution-of-Programming-Languages"><a href="#Evolution-of-Programming-Languages" class="headerlink" title="Evolution of Programming Languages"></a>Evolution of Programming Languages</h2><h3 id="Imperative-language"><a href="#Imperative-language" class="headerlink" title="Imperative language"></a>Imperative language</h3><ul><li>命令式語言</li><li>指定程式該執行的確切操作</li><li>Ex: C, C++, Java, Python</li></ul><h3 id="Declarative-language"><a href="#Declarative-language" class="headerlink" title="Declarative language"></a>Declarative language</h3><ul><li>宣告式語言</li><li>只要所需的結果，而不是詳細指定要執行的步驟</li><li>Ex: SQL, HTML, CSS, Prolog</li></ul><h3 id="Von-Neumann-language"><a href="#Von-Neumann-language" class="headerlink" title="Von Neumann language"></a>Von Neumann language</h3><ul><li><p>基於 Von Neumann 電腦架構</p></li><li><p>Many widely used programming languages such as C, C++ and Java have <strong>ceased</strong> to be strictly von Neumann by adding support for parallel processing, in the form of threads.</p></li><li><p>Before C++ 11 added threads, C++ was strictly a Von Neumann language</p></li><li><p><a href="https://stackoverflow.com/questions/58312638/is-c-considered-a-von-neumann-programming-language">Is C++ considered a Von Neumann programming language?</a></p></li><li><p><a href="https://ictjournal.itri.org.tw/xcdoc/cont?xsmsid=0M236556470056558161&sid=0M250379986616668141">高效能需求應用興起記憶體內運算的新戰場</a></p></li></ul><h3 id="Object-oriented-language"><a href="#Object-oriented-language" class="headerlink" title="Object-oriented language"></a>Object-oriented language</h3><ul><li>繼承、封裝、多型</li><li>Ex: Java, C++</li></ul><h3 id="Functional-language"><a href="#Functional-language" class="headerlink" title="Functional language"></a>Functional language</h3><ul><li>在一般常見的命令式語言中，要執行操作的話是給電腦一組命令，而狀態會隨著命令的執行而改變。例如你指派變數 a 的值為 5，而隨後做了其它一些事情之後 a 就可能變成的其它值。有控制流程 (control flow)，你就可以重複執行操作</li><li>然而在純粹函數式程式語言中，你不是像命令式語言那樣命令電腦「要做什麼」，而是通過用函數來描述出問題「是什麼」，如「階乘是指從 1 到某個數的乘積」，「一個串列中數字的和」是指把第一個數字跟剩餘數字的和相加。你用宣告函數是什麼的形式來寫程式</li><li>另外，變數 (variable) 一旦被指定，就不可以更改了，你已經說了 a 就是 5，就不能再說 a 是別的什麼數</li><li>Ex: Haskell、Scala、Clojure</li></ul><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs Haskell"><span class="hljs-title">add</span> x y = x + y<br><span class="hljs-title">result</span> = add <span class="hljs-number">5</span> <span class="hljs-number">10</span><br></code></pre></td></tr></table></figure><ul><li><a href="https://learnyouahaskell.mno2.org/zh-tw/ch01/introduction">Haskell 趣學指南</a></li></ul><h3 id="Assignment-oriented-language"><a href="#Assignment-oriented-language" class="headerlink" title="Assignment-oriented language"></a>Assignment-oriented language</h3><ul><li>賦值操作來實現程式邏輯的語言</li><li>Ex: C, Java, </li><li>反例: Haskell</li></ul><h3 id="Third-generation-language"><a href="#Third-generation-language" class="headerlink" title="Third-generation language"></a>Third-generation language</h3><ul><li>相對於機器語言和組合語言而言的高階程式語言</li><li>Ex: C, Java, Python</li></ul><h3 id="Fourth-generation-language"><a href="#Fourth-generation-language" class="headerlink" title="Fourth-generation language"></a>Fourth-generation language</h3><ul><li>更高級、更抽象的程式語言，旨在簡化特定領域的應用程式開發</li><li>提供了更高程度的自動化和巨集</li><li>Ex: SQL, MATLAB</li></ul><h3 id="Scripting-language"><a href="#Scripting-language" class="headerlink" title="Scripting language"></a>Scripting language</h3><ul><li>一個指令碼通常是直譯執行而非編譯</li><li>Ex: JavaScript、Perl、PHP、Python、Ruby 和 Tcl，</li></ul><h3 id="補充"><a href="#補充" class="headerlink" title="補充"></a>補充</h3><p>如果是說 imperative programming 和 declarative programming，我查到的都是程式碼的寫法</p><ul><li><p>Imperative language</p><ul><li>命令式編程</li><li>著重在 <strong>HOW</strong>，具體表達程式碼該做什麼才能達到目標，程式一步一步按著順序照著你給他指示執行。</li><li>Imperative 比較常運用 Statement ，像是是 if, while, for, switch 等。</li><li>You tell the compiler what you want to happen, step by step.</li></ul></li><li><p>Delcarative language</p><ul><li>宣告式編程</li><li>著重在該做什麼 <strong>WHAT</strong> ，採取抽象化流程。Declarative 比較常運用表達式 expression，</li><li>Delcarative 特色是單純運算並一定會有返回值</li></ul></li></ul><p>Example: choose the odd numbers</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cs">List&lt;<span class="hljs-built_in">int</span>&gt; collection = <span class="hljs-keyword">new</span> List&lt;<span class="hljs-built_in">int</span>&gt; &#123; <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span> &#125;;<br></code></pre></td></tr></table></figure><p>With <strong>imperative programming</strong>, we’d step through this, and decide what we want:</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs cs">List&lt;<span class="hljs-built_in">int</span>&gt; results = <span class="hljs-keyword">new</span> List&lt;<span class="hljs-built_in">int</span>&gt;();<br><span class="hljs-keyword">foreach</span>(<span class="hljs-keyword">var</span> num <span class="hljs-keyword">in</span> collection)<br>&#123;<br>    <span class="hljs-keyword">if</span> (num % <span class="hljs-number">2</span> != <span class="hljs-number">0</span>)<br>          results.Add(num);<br>&#125;<br></code></pre></td></tr></table></figure><p>With <strong>declarative programming</strong>, on the other hand, you declare your desired results, but not the step-by-step:</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cs"><span class="hljs-keyword">var</span> results = collection.Where( num =&gt; num % <span class="hljs-number">2</span> != <span class="hljs-number">0</span>);<br></code></pre></td></tr></table></figure><p>Source</p><ul><li><a href="https://ithelp.ithome.com.tw/articles/10233761">Buzz Word 1 : Declarative vs. Imperative</a></li><li><a href="https://stackoverflow.com/questions/1784664/what-is-the-difference-between-declarative-and-imperative-paradigm-in-programmin">What is the difference between declarative and imperative paradigm in programming?</a></li></ul><h2 id="Lambda-Parameters"><a href="#Lambda-Parameters" class="headerlink" title="Lambda Parameters"></a>Lambda Parameters</h2><p>C++ 中，Lambda 架構是</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++">[capture clause](parameters) -&gt; return_type &#123; body &#125;<br></code></pre></td></tr></table></figure><p><strong>[ ]</strong> 空的捕獲列表，表示不捕獲任何外部變數</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp">[]() &#123; <span class="hljs-keyword">return</span> <span class="hljs-number">42</span>; &#125;<br></code></pre></td></tr></table></figure><p><strong>[&amp;]</strong> 按引用捕獲所有外部變數</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-type">int</span> x = <span class="hljs-number">10</span>;<br>[&amp;]() &#123; x++; &#125; <span class="hljs-comment">// 修改外部變數 x</span><br></code></pre></td></tr></table></figure><p><strong>[&#x3D;]</strong> 按值捕獲所有外部變數</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-type">int</span> x = <span class="hljs-number">10</span>;<br>[=]() &#123; <span class="hljs-keyword">return</span> x * <span class="hljs-number">2</span>; &#125; <span class="hljs-comment">// 訪問但不修改外部變數 x</span><br></code></pre></td></tr></table></figure><p><strong>[&#x3D;, &amp;foo]</strong> 按值捕獲所有外部變數，但特別引用了 foo 變數</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-type">int</span> x = <span class="hljs-number">10</span>;<br><span class="hljs-type">int</span> foo = <span class="hljs-number">20</span>;<br>[=, &amp;foo]() &#123; <span class="hljs-keyword">return</span> x + foo; &#125; <span class="hljs-comment">// 訪問 x 按值，訪問 foo 按引用</span><br></code></pre></td></tr></table></figure><p><strong>[bar]</strong> 按值捕獲 bar 變數</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-type">int</span> bar = <span class="hljs-number">30</span>;<br>[bar]() &#123; <span class="hljs-keyword">return</span> bar * <span class="hljs-number">3</span>; &#125;<br></code></pre></td></tr></table></figure><p><strong>[this]</strong> 按值捕獲當前物件的指標（常用於 lambda 在 class 內部的情況）</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyClass</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">MyClass</span>(<span class="hljs-type">int</span> value) : <span class="hljs-built_in">value</span>(value) &#123;&#125;<br><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">printValue</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-comment">// Lambda 捕獲當前物件的指標，可以使用內部的變數和函式</span><br>        <span class="hljs-keyword">auto</span> lambda = [<span class="hljs-keyword">this</span>]() &#123;<br>            std::cout &lt;&lt; <span class="hljs-string">&quot;Value inside lambda: &quot;</span> &lt;&lt; value &lt;&lt; std::endl; <span class="hljs-comment">// 訪問物件變數</span><br>            <span class="hljs-built_in">someMethod</span>(); <span class="hljs-comment">// 呼叫物件函式</span><br>        &#125;;<br><br>        <span class="hljs-built_in">lambda</span>(); <br>    &#125;<br><br><span class="hljs-keyword">private</span>:<br>    <span class="hljs-type">int</span> value;<br><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">someMethod</span><span class="hljs-params">()</span> </span>&#123;<br>        std::cout &lt;&lt; <span class="hljs-string">&quot;Inside someMethod&quot;</span> &lt;&lt; std::endl;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="First-Class-Object"><a href="#First-Class-Object" class="headerlink" title="First Class Object"></a>First Class Object</h2><ul><li>Entity can be stored into a variable</li><li>Something can be passed around as parameters</li><li>In C language, structure and function are consider first class objects</li></ul><h2 id="Bindings"><a href="#Bindings" class="headerlink" title="Bindings"></a>Bindings</h2><h3 id="Static-Binding"><a href="#Static-Binding" class="headerlink" title="Static Binding"></a>Static Binding</h3><ul><li>在編譯時期或者早期階段就確定呼叫哪個方法或函式</li><li>Ex: C 的函式呼叫，它在編譯時期就將函式內容綁定到識別符上，而無法在執行時期變更。</li></ul><h3 id="Dynamic-Binding"><a href="#Dynamic-Binding" class="headerlink" title="Dynamic Binding"></a>Dynamic Binding</h3><ul><li>綁定發生在執行時期，而不是在編譯時</li><li>Ex: C++ 的虛擬方法呼叫，由於多型的機制，物件的型別無法在編譯時期得知，所以綁定會在執行時期處理。</li></ul><h3 id="Fluid-Binding"><a href="#Fluid-Binding" class="headerlink" title="Fluid Binding"></a>Fluid Binding</h3><ul><li>這三小</li></ul><h3 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h3><figure class="highlight delphi"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs delphi"><span class="hljs-keyword">program</span> parameter-passing;<br>  <span class="hljs-keyword">var</span> i: integer;<br>  a: <span class="hljs-keyword">array</span> [<span class="hljs-number">1</span>..<span class="hljs-number">3</span>] <span class="hljs-keyword">of</span> integer;<br><br>  <span class="hljs-function"><span class="hljs-keyword">procedure</span> <span class="hljs-title">mess</span>;</span><br>    <span class="hljs-keyword">begin</span><br>      <span class="hljs-keyword">var</span> y: integer;<br>      y = a[i] + <span class="hljs-number">5</span>;<br>      writeln(<span class="hljs-string">&#x27;y=&#x27;</span>, y);<br>    <span class="hljs-keyword">end</span>;<br><br>  <span class="hljs-function"><span class="hljs-keyword">procedure</span> <span class="hljs-title">sub1</span>;</span><br>    <span class="hljs-keyword">var</span> i: integer;<br>    a: <span class="hljs-keyword">array</span> [<span class="hljs-number">1</span>..<span class="hljs-number">3</span>] <span class="hljs-keyword">of</span> integer;<br>    <span class="hljs-keyword">begin</span><br>      i := <span class="hljs-number">2</span>;<br>      a[<span class="hljs-number">1</span>] := <span class="hljs-number">5</span> ; a[<span class="hljs-number">2</span>] := <span class="hljs-number">7</span>; a[<span class="hljs-number">3</span>] := <span class="hljs-number">9</span>;<br>    mess;<br>  <span class="hljs-keyword">end</span>;<br><br>  <span class="hljs-keyword">begin</span> <br>    i := <span class="hljs-number">1</span>;<br>    a[<span class="hljs-number">1</span>] :=<span class="hljs-number">1</span> ; a[<span class="hljs-number">2</span>] := <span class="hljs-number">4</span>; a[<span class="hljs-number">3</span>] :=<span class="hljs-number">8</span> ;<br>    sub1;<br>  <span class="hljs-keyword">end</span><br></code></pre></td></tr></table></figure><ul><li><p>Suppose static binding (also known as lexical binding) is used for variable scopes. What’s the printout value of y?</p><blockquote><p>我猜 mess 裡面 i 是 1、a[i] 是 1，所以 y &#x3D; 1 + 5 &#x3D; 6</p></blockquote></li><li><p>Suppose dynamic binding is used for variable scopes. What’s the printout value of y?</p><blockquote><p>我猜 mess 裡面 i 是 2、a[i] 是 7，所以 y &#x3D; 7 + 5 &#x3D; 12</p></blockquote></li></ul><p>上面都是我亂猜的</p><h2 id="Parameter-Passing-Schemes"><a href="#Parameter-Passing-Schemes" class="headerlink" title="Parameter Passing Schemes"></a>Parameter Passing Schemes</h2><h3 id="Call-by-reference"><a href="#Call-by-reference" class="headerlink" title="Call-by-reference"></a>Call-by-reference</h3><ul><li>Call 的瞬間就看 caller</li><li>在呼叫 function 的當下就已經決定好 parameter 的值</li></ul><h3 id="Call-by-name"><a href="#Call-by-name" class="headerlink" title="Call-by-name"></a>Call-by-name</h3><ul><li>用的時候重新看 caller</li><li>在呼叫的 function 當中每次使用到 parameter 就重新去檢查 caller 當中當下的值</li></ul><h3 id="Call-by-need"><a href="#Call-by-need" class="headerlink" title="Call-by-need"></a>Call-by-need</h3><ul><li>跟 call by name 很像，一樣去算 caller 的，但是第一次算完就存起來，不用每次都算</li><li>第一次使用時重新看 caller</li><li>在呼叫的 function 當中第一次使用到 parameter 的時候才去決定後續的值</li></ul><h3 id="Call-by-text"><a href="#Call-by-text" class="headerlink" title="Call-by-text"></a>Call-by-text</h3><ul><li>用的時候重新看 callee</li><li>在呼叫的 function 當中每次使用到 parameter 就重新去檢查 callee 當中當下的值</li><li>更好的理解方式是從名稱 “call by text”，意即 parameter 會以 text 的型態傳遞，因此需要把所有的 parameter 都視為傳遞前的原貌</li><li>例如定義 <code>f(v: integer)</code> ，呼叫 <code>f(a[i])</code> ，則 <code>f</code> 當中的每個 <code>v</code> 都需要替換成 <code>a[i]</code></li></ul><h4 id="Example-1"><a href="#Example-1" class="headerlink" title="Example"></a>Example</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs css">program parameter-passing;<br>  <span class="hljs-selector-tag">var</span> <span class="hljs-selector-tag">i</span>: integer;<br>  <span class="hljs-selector-tag">a</span>: array [<span class="hljs-number">1</span>..<span class="hljs-number">3</span>] of integer;<br><br>  procedure mess(v : integer);<br>    begin<br>      v := v + <span class="hljs-number">1</span>;<br>      <span class="hljs-selector-tag">a</span><span class="hljs-selector-attr">[i]</span> := <span class="hljs-number">5</span>;<br>      <span class="hljs-selector-tag">i</span> := <span class="hljs-number">3</span>;<br>      v := v + <span class="hljs-number">1</span>;<br>    end;<br><br>  begin<br>    for <span class="hljs-selector-tag">i</span>:= <span class="hljs-number">1</span> to <span class="hljs-number">3</span> do a[i] := <span class="hljs-number">0</span>;<br>    <span class="hljs-selector-tag">a</span><span class="hljs-selector-attr">[2]</span> := <span class="hljs-number">10</span>;<br>    <span class="hljs-selector-tag">i</span> := <span class="hljs-number">2</span>;<br>    mess(<span class="hljs-selector-tag">a</span><span class="hljs-selector-attr">[i]</span>);<br>  end<br></code></pre></td></tr></table></figure><ul><li><p>If by assuming <strong>Call-by-Text</strong>, what’s the value in the array a and the variable i?</p><table><thead><tr><th align="center"></th><th align="center">a[1]</th><th align="center">a[2]</th><th align="center">a[3]</th><th align="center">i</th><th align="center">v</th></tr></thead><tbody><tr><td align="center">before mess</td><td align="center">0</td><td align="center">10</td><td align="center">0</td><td align="center">2</td><td align="center">-</td></tr><tr><td align="center">v :&#x3D; v + 1;</td><td align="center">0</td><td align="center">11</td><td align="center">0</td><td align="center">2</td><td align="center">a[i] (a[2])</td></tr><tr><td align="center">a[i] :&#x3D; 5;</td><td align="center">0</td><td align="center">5</td><td align="center">0</td><td align="center">2</td><td align="center">a[i] (a[2])</td></tr><tr><td align="center">i :&#x3D; 3</td><td align="center">0</td><td align="center">5</td><td align="center">0</td><td align="center">3</td><td align="center">a[i] (a[3])</td></tr><tr><td align="center">v :&#x3D; v + 1</td><td align="center">0</td><td align="center">5</td><td align="center">1</td><td align="center">3</td><td align="center">a[i] (a[3])</td></tr><tr><td align="center">observation point</td><td align="center">0</td><td align="center">5</td><td align="center">1</td><td align="center">3</td><td align="center">-</td></tr></tbody></table></li><li><p>If by assuming <strong>Call-by-Reference</strong>, what’s the value in the array a and the variable i?</p><table><thead><tr><th align="center"></th><th align="center">a[1]</th><th align="center">a[2]</th><th align="center">a[3]</th><th align="center">i</th><th align="center">v</th></tr></thead><tbody><tr><td align="center">before mess</td><td align="center">0</td><td align="center">10</td><td align="center">0</td><td align="center">2</td><td align="center">-</td></tr><tr><td align="center">v :&#x3D; v + 1;</td><td align="center">0</td><td align="center">11</td><td align="center">0</td><td align="center">2</td><td align="center">a[2]</td></tr><tr><td align="center">a[i] :&#x3D; 5;</td><td align="center">0</td><td align="center">5</td><td align="center">0</td><td align="center">2</td><td align="center">a[2]</td></tr><tr><td align="center">i :&#x3D; 3</td><td align="center">0</td><td align="center">5</td><td align="center">0</td><td align="center">3</td><td align="center">a[2]</td></tr><tr><td align="center">v :&#x3D; v + 1</td><td align="center">0</td><td align="center">6</td><td align="center">0</td><td align="center">3</td><td align="center">a[2]</td></tr><tr><td align="center">observation point</td><td align="center">0</td><td align="center">6</td><td align="center">0</td><td align="center">3</td><td align="center">-</td></tr></tbody></table></li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs css">program parameter-passing;<br>  <span class="hljs-selector-tag">var</span> <span class="hljs-selector-tag">i</span>: integer;<br>  <span class="hljs-selector-tag">a</span>: array [<span class="hljs-number">1</span>..<span class="hljs-number">3</span>] of integer;<br><br>  procedure mess(v : integer);<br>    <span class="hljs-selector-tag">var</span> <span class="hljs-selector-tag">i</span>: integer;<br>    begin<br>      <span class="hljs-selector-tag">i</span> := <span class="hljs-number">1</span>;<br>      v := v + <span class="hljs-number">1</span>;<br>      <span class="hljs-selector-tag">a</span><span class="hljs-selector-attr">[i]</span> := <span class="hljs-number">5</span>;<br>      <span class="hljs-selector-tag">i</span> := <span class="hljs-number">3</span>;<br>      v := v + <span class="hljs-number">1</span>;<br>    end;<br><br>  begin<br>    for <span class="hljs-selector-tag">i</span>:= <span class="hljs-number">1</span> to <span class="hljs-number">3</span> do a[i] := <span class="hljs-number">0</span>;<br>    <span class="hljs-selector-tag">a</span><span class="hljs-selector-attr">[2]</span> := <span class="hljs-number">10</span>;<br>    <span class="hljs-selector-tag">i</span> := <span class="hljs-number">2</span>;<br>    mess(<span class="hljs-selector-tag">a</span><span class="hljs-selector-attr">[i]</span>);<br>  end<br></code></pre></td></tr></table></figure><ul><li><p>If by assuming <strong>Call-by-Name</strong>, what’s the value in the array a and the variable i?</p><table><thead><tr><th align="center"></th><th align="center">a[1]</th><th align="center">a[2]</th><th align="center">a[3]</th><th align="center">i (caller)</th><th align="center">i (callee)</th><th align="center">v</th></tr></thead><tbody><tr><td align="center">before mess</td><td align="center">0</td><td align="center">10</td><td align="center">0</td><td align="center">2</td><td align="center">-</td><td align="center">-</td></tr><tr><td align="center">i :&#x3D; 1</td><td align="center">0</td><td align="center">10</td><td align="center">0</td><td align="center">2</td><td align="center">1</td><td align="center">a[2]</td></tr><tr><td align="center">v :&#x3D; v + 1;</td><td align="center">0</td><td align="center">11</td><td align="center">0</td><td align="center">2</td><td align="center">1</td><td align="center">a[2]</td></tr><tr><td align="center">a[i] :&#x3D; 5;</td><td align="center">5</td><td align="center">11</td><td align="center">0</td><td align="center">2</td><td align="center">1</td><td align="center">a[2]</td></tr><tr><td align="center">i :&#x3D; 3</td><td align="center">5</td><td align="center">11</td><td align="center">0</td><td align="center">2</td><td align="center">3</td><td align="center">a[2]</td></tr><tr><td align="center">v :&#x3D; v + 1</td><td align="center">5</td><td align="center">12</td><td align="center">0</td><td align="center">2</td><td align="center">3</td><td align="center">a[2]</td></tr><tr><td align="center">observation point</td><td align="center">5</td><td align="center">12</td><td align="center">0</td><td align="center">2</td><td align="center">-</td><td align="center">-</td></tr></tbody></table></li><li><p>If by assuming <strong>Call-by-Text</strong>, what’s the value in the array a and the variable i?</p><table><thead><tr><th align="center"></th><th align="center">a[1]</th><th align="center">a[2]</th><th align="center">a[3]</th><th align="center">i (caller)</th><th align="center">i (callee)</th><th align="center">v</th></tr></thead><tbody><tr><td align="center">before mess</td><td align="center">0</td><td align="center">10</td><td align="center">0</td><td align="center">2</td><td align="center">-</td><td align="center">-</td></tr><tr><td align="center">i :&#x3D; 1</td><td align="center">0</td><td align="center">10</td><td align="center">0</td><td align="center">2</td><td align="center">1</td><td align="center">a[i(callee)] (a[1])</td></tr><tr><td align="center">v :&#x3D; v + 1;</td><td align="center">1</td><td align="center">10</td><td align="center">0</td><td align="center">2</td><td align="center">1</td><td align="center">a[i(callee)] (a[1])</td></tr><tr><td align="center">a[i] :&#x3D; 5;</td><td align="center">5</td><td align="center">10</td><td align="center">0</td><td align="center">2</td><td align="center">1</td><td align="center">a[i(callee)] (a[1])</td></tr><tr><td align="center">i :&#x3D; 3</td><td align="center">5</td><td align="center">10</td><td align="center">0</td><td align="center">2</td><td align="center">3</td><td align="center">a[i(callee)] (a[3])</td></tr><tr><td align="center">v :&#x3D; v + 1</td><td align="center">5</td><td align="center">10</td><td align="center">1</td><td align="center">2</td><td align="center">3</td><td align="center">a[i(callee)] (a[3])</td></tr><tr><td align="center">observation point</td><td align="center">5</td><td align="center">10</td><td align="center">1</td><td align="center">2</td><td align="center">-</td><td align="center">-</td></tr></tbody></table></li><li><p>If by assuming <strong>Call-by-Need</strong>, what’s the value in the array a and the variable i?</p><table><thead><tr><th align="center"></th><th align="center">a[1]</th><th align="center">a[2]</th><th align="center">a[3]</th><th align="center">i (caller)</th><th align="center">i (callee)</th><th align="center">v</th></tr></thead><tbody><tr><td align="center">before mess</td><td align="center">0</td><td align="center">10</td><td align="center">0</td><td align="center">2</td><td align="center">-</td><td align="center">-</td></tr><tr><td align="center">i :&#x3D; 1</td><td align="center">0</td><td align="center">10</td><td align="center">0</td><td align="center">2</td><td align="center">1</td><td align="center">-</td></tr><tr><td align="center">v :&#x3D; v + 1;</td><td align="center">0</td><td align="center">11</td><td align="center">0</td><td align="center">2</td><td align="center">1</td><td align="center">a[i(caller)] (a[2])</td></tr><tr><td align="center">a[i] :&#x3D; 5;</td><td align="center">5</td><td align="center">11</td><td align="center">0</td><td align="center">2</td><td align="center">1</td><td align="center">a[2]</td></tr><tr><td align="center">i :&#x3D; 3</td><td align="center">5</td><td align="center">11</td><td align="center">0</td><td align="center">2</td><td align="center">3</td><td align="center">a[2]</td></tr><tr><td align="center">v :&#x3D; v + 1</td><td align="center">5</td><td align="center">12</td><td align="center">0</td><td align="center">2</td><td align="center">3</td><td align="center">a[2]</td></tr><tr><td align="center">observation point</td><td align="center">5</td><td align="center">12</td><td align="center">0</td><td align="center">2</td><td align="center">-</td><td align="center">-</td></tr></tbody></table></li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs css">program parameter-passing;<br>  <span class="hljs-selector-tag">var</span> <span class="hljs-selector-tag">i</span>: integer;<br>  <span class="hljs-selector-tag">a</span>: array [<span class="hljs-number">1</span>..<span class="hljs-number">3</span>] of integer;<br><br>  procedure mess(v : integer);<br>    begin<br>      <span class="hljs-selector-tag">i</span> := <span class="hljs-number">1</span>;<br>      v := v + <span class="hljs-number">1</span>;<br>      <span class="hljs-selector-tag">a</span><span class="hljs-selector-attr">[i]</span> := <span class="hljs-number">5</span>;<br>      <span class="hljs-selector-tag">i</span> := <span class="hljs-number">3</span>;<br>      v := v + <span class="hljs-number">1</span>;<br>    end;<br><br>  begin<br>    for <span class="hljs-selector-tag">i</span>:= <span class="hljs-number">1</span> to <span class="hljs-number">3</span> do a[i] := <span class="hljs-number">0</span>;<br>    <span class="hljs-selector-tag">a</span><span class="hljs-selector-attr">[2]</span> := <span class="hljs-number">10</span>;<br>    <span class="hljs-selector-tag">i</span> := <span class="hljs-number">2</span>;<br>    mess(<span class="hljs-selector-tag">a</span><span class="hljs-selector-attr">[i]</span>);<br>  end<br></code></pre></td></tr></table></figure><ul><li><p>If by assuming <strong>Call-by-Name</strong>, what’s the value in the array a and the variable i?</p><table><thead><tr><th align="center"></th><th align="center">a[1]</th><th align="center">a[2]</th><th align="center">a[3]</th><th align="center">i</th><th align="center">v</th></tr></thead><tbody><tr><td align="center">before mess</td><td align="center">0</td><td align="center">10</td><td align="center">0</td><td align="center">2</td><td align="center">-</td></tr><tr><td align="center">i :&#x3D; 1</td><td align="center">0</td><td align="center">10</td><td align="center">0</td><td align="center">1</td><td align="center">-</td></tr><tr><td align="center">v :&#x3D; v + 1;</td><td align="center">1</td><td align="center">10</td><td align="center">0</td><td align="center">1</td><td align="center">a[i] (a[1])</td></tr><tr><td align="center">a[i] :&#x3D; 5;</td><td align="center">5</td><td align="center">10</td><td align="center">0</td><td align="center">1</td><td align="center">a[i] (a[1])</td></tr><tr><td align="center">i :&#x3D; 3</td><td align="center">5</td><td align="center">10</td><td align="center">0</td><td align="center">3</td><td align="center">a[i] (a[3])</td></tr><tr><td align="center">v :&#x3D; v + 1</td><td align="center">5</td><td align="center">10</td><td align="center">1</td><td align="center">3</td><td align="center">a[i] (a[3])</td></tr><tr><td align="center">observation point</td><td align="center">5</td><td align="center">10</td><td align="center">1</td><td align="center">3</td><td align="center">-</td></tr></tbody></table></li><li><p>If by assuming <strong>Call-by-Need</strong>, what’s the value in the array a and the variable i?</p><table><thead><tr><th align="center"></th><th align="center">a[1]</th><th align="center">a[2]</th><th align="center">a[3]</th><th align="center">i</th><th align="center">v</th></tr></thead><tbody><tr><td align="center">before mess</td><td align="center">0</td><td align="center">10</td><td align="center">0</td><td align="center">2</td><td align="center">-</td></tr><tr><td align="center">i :&#x3D; 1</td><td align="center">0</td><td align="center">10</td><td align="center">0</td><td align="center">1</td><td align="center">-</td></tr><tr><td align="center">v :&#x3D; v + 1;</td><td align="center">1</td><td align="center">10</td><td align="center">0</td><td align="center">1</td><td align="center">a[i] (a[1])</td></tr><tr><td align="center">a[i] :&#x3D; 5;</td><td align="center">5</td><td align="center">10</td><td align="center">0</td><td align="center">1</td><td align="center">a[1]</td></tr><tr><td align="center">i :&#x3D; 3</td><td align="center">5</td><td align="center">10</td><td align="center">0</td><td align="center">3</td><td align="center">a[1]</td></tr><tr><td align="center">v :&#x3D; v + 1</td><td align="center">6</td><td align="center">10</td><td align="center">0</td><td align="center">3</td><td align="center">a[1]</td></tr><tr><td align="center">observation point</td><td align="center">6</td><td align="center">10</td><td align="center">0</td><td align="center">3</td><td align="center">-</td></tr></tbody></table></li></ul><hr><p>2 + 3 + 2<br>E<br>E        + term<br>E + term + expo</p><hr><h2 id="任何left-recursion都可以用數學轉換成right-recursion-ex1S-Sa-B"><a href="#任何left-recursion都可以用數學轉換成right-recursion-ex1S-Sa-B" class="headerlink" title="任何left recursion都可以用數學轉換成right recursion# ex1S -&gt; Sa|B"></a>任何left recursion都可以用數學轉換成right recursion<br># ex1<br>S -&gt; Sa|B</h2><p>S -&gt; BS’<br>S’ -&gt; aS’|e</p><h1 id="ex2"><a href="#ex2" class="headerlink" title="ex2"></a>ex2</h1><h2 id="E-E-T-TT-T-F-FF-NUM-E"><a href="#E-E-T-TT-T-F-FF-NUM-E" class="headerlink" title="E -&gt; E + T | TT -&gt; T * F | FF -&gt; NUM | (E)"></a>E -&gt; E + T | T<br>T -&gt; T * F | F<br>F -&gt; NUM | (E)</h2><p>E -&gt; TE’<br>E’ -&gt; TE’|e<br>T -&gt; FT’<br>T’ -&gt; *FT’|e<br>F -&gt; (E)|id</p><hr><p>a | a* b &#x3D; {a, b, ab, aab, aaab, …}</p><p>(11 | 0)* (00 | 1)*<br>奇數個 1 出現在奇數個 0 前面不能<br>ex: 01010 不能</p><p>(1 | 01 | 001)* (e | 0 | 00)<br>連續三個 0 不能</p><p>(D*.D | D.D*)<br>D &#x3D; [0 ~ 9]</p><p>0.5, .5, 123.6, 9.2, 9.237, 9.</p><hr><p>M &#x3D; (Q, $\Sigma$, $\delta$, $q_{0}$, F)</p><p>Q &#x3D; {$q_{0}, q_{5}, q_{10}, q_{15}, q_{20}$}</p><p>$\Sigma$ &#x3D; {5, 10}</p><p>F &#x3D; {$q_{20}$}</p><p>$\delta$($q_{0}$, 5) &#x3D; $q_{5}$ </p><p>$\delta$($q_{5}$, 5) &#x3D; $q_{10}$</p><p>$\delta$($q_{10}$, 5) &#x3D; $q_{15}$</p><p>$\delta$($q_{15}$, 5) &#x3D; $q_{20}$</p><p>$\delta$($q_{0}$, 10) &#x3D; $q_{10}$</p><p>$\delta$($q_{10}$, 10) &#x3D; $q_{20}$</p><hr><p><img src="/notes/image.png" alt="alt text"></p><p>M &#x3D; (Q, $\Sigma$, $\delta$, $q_{0}$, F)</p><p>Q &#x3D; {$q_{0}, q_{1}, q_{2}$}</p><p>$\Sigma$ &#x3D; {0, 1}</p><p>$\delta$($q_{0}$, 0) &#x3D; {$q_{1}, q_{2}$}</p><p>$\delta$($q_{1}$, 0) &#x3D; {$q_{1}$}</p><p>$\delta$($q_{2}$, 1) &#x3D; {$q_{2}$}</p><hr><p><img src="/notes/image-1.png" alt="alt text"></p><ul><li>字串長度 0</li><li>空集合</li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>Compilier</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Unreal Engine 4 - GPGPU flocking 解析</title>
    <link href="/notes/2024/02/25/ue4-cs-aceyan/"/>
    <url>/notes/2024/02/25/ue4-cs-aceyan/</url>
    
    <content type="html"><![CDATA[<p>source code: <a href="https://github.com/aceyan/UE4_GPGPU_flocking/tree/ComputeShader">https://github.com/aceyan/UE4_GPGPU_flocking/tree/ComputeShader</a></p><h3 id="GPU-Instances"><a href="#GPU-Instances" class="headerlink" title="GPU Instances"></a>GPU Instances</h3><p>這個專案使用 GPU Instancing，一次渲染大量 Static Mesh。為了讓每個 instance 有區別，它賦予每個 instance 一個 CustomData，作為分辨的 ID。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-built_in">UPROPERTY</span>(EditAnywhere, BlueprintReadWrite, Category = <span class="hljs-string">&quot;Flocking&quot;</span>)<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">UInstancedStaticMeshComponent</span>* InstancedComponent;<br><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; instatnceNum; i++)<br>&#123;<br>FTransform t = <span class="hljs-built_in">FTransform</span>();<br>InstancedComponent-&gt;<span class="hljs-built_in">AddInstance</span>(t);<br>InstancedComponent-&gt;<span class="hljs-built_in">SetCustomDataValue</span>(i, <span class="hljs-number">0</span>, i);<br><span class="hljs-built_in">UE_LOG</span>(LogTemp, Warning, <span class="hljs-built_in">TEXT</span>(<span class="hljs-string">&quot;AddInstance %d&quot;</span>), i);<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/notes/./images/ue4-cs-aceyan/InstancedComponent.png" alt="Instanced Component"></p><p>然後藉由 PerInstanceCustomData[0]，取得不同的 Instance ID，然後更新它們各自的 Material 的 World Position Offset (相對位置) ，來達到移動的效果。</p><h3 id="GPGPU"><a href="#GPGPU" class="headerlink" title="GPGPU"></a>GPGPU</h3><p>由於運算量龐大，可以藉由 GPGPU (Compute Shader) 來計算。那要怎麼直接把 GPGPU 算出的結果傳給 World Position Offset？</p><p>這裡使用 Render Target (RT) 去除存每個 Instance 的位置、速度，所以每個 Texel 的 RGB 儲存的是 World Position Offset 的 XYZ。因此，遊戲開始的時候，儲存 Position 的 Render Target 會長這樣，五彩繽紛的顏色就代表各種 World Position Offset。</p><p><img src="/notes/./images/ue4-cs-aceyan/PositionRenderTarget.png" alt="Position Render Target"></p><p>藉由這個方法，CPU 叫 GPU 算完可以直接渲染，不用再回傳到 CPU，所以整個邏輯是 GPGPU -&gt; RenderTarget -&gt; Material。</p><p>最後，只要想辦法取出每個 Instance 對應到的 Texel 的顏色，傳到 World Position Offset 就好。</p><p><img src="/notes/./images/ue4-cs-aceyan/UpdateInstancePosition.png" alt="Update Instance Position"></p><p>看起來很複雜，實際上就是根據 ID 算出對應的 Texel 的座標，左上是 (0, 0)，右下是 (1, 1)，再 Sample 出 Texture Object 某 Texel 的顏色。</p>]]></content>
    
    
    <categories>
      
      <category>UE4</category>
      
    </categories>
    
    
    <tags>
      
      <tag>UE4, GPU</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Unreal Engine Notes</title>
    <link href="/notes/2024/02/24/ue-notes/"/>
    <url>/notes/2024/02/24/ue-notes/</url>
    
    <content type="html"><![CDATA[<h3 id="Texture-Object"><a href="#Texture-Object" class="headerlink" title="Texture Object"></a>Texture Object</h3><ul><li>有點像一個單獨的 Texture 的容器，包含很多資料，像是顏色、光澤度、粗糙度</li></ul><h3 id="Texture-Sample"><a href="#Texture-Sample" class="headerlink" title="Texture Sample"></a>Texture Sample</h3><ul><li>把 Texture Object 做 sample，得到某個數據，像是顏色</li><li>要傳入 UVs 和 Tex，這裡的 Tex 就是 Texture Object</li></ul><h3 id="Dynamic-Material-Instances"><a href="#Dynamic-Material-Instances" class="headerlink" title="Dynamic Material Instances"></a>Dynamic Material Instances</h3><ul><li>可以在遊戲中動態改變的 Material</li><li>如何使用<ul><li><a href="https://www.youtube.com/watch?v=uSKzkg0dQpY&ab_channel=UnrealDevHub">UE5 Blueprint Tutorial - How to Create Dynamic Material Instances</a></li><li><a href="https://zhuanlan.zhihu.com/p/377411777">Unreal Engine 4 Materials Tutorial——虚幻4引擎教程——材质</a></li></ul></li></ul><h3 id="Set-Scalar-Parameter-Value"><a href="#Set-Scalar-Parameter-Value" class="headerlink" title="Set Scalar Parameter Value"></a>Set Scalar Parameter Value</h3><ul><li>有三個輸入，Target、Parameter Name 和 Value</li><li>改變 Target 的 Parameter 的值</li></ul>]]></content>
    
    
    <categories>
      
      <category>UE5</category>
      
    </categories>
    
    
    <tags>
      
      <tag>UE5</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>GPGPU</title>
    <link href="/notes/2024/02/21/gpgpu/"/>
    <url>/notes/2024/02/21/gpgpu/</url>
    
    <content type="html"><![CDATA[<h1 id="名詞解釋"><a href="#名詞解釋" class="headerlink" title="名詞解釋"></a>名詞解釋</h1><ul><li><p>CUDA (Compute Unified Device Architecture)</p><ul><li>強大的平行計算平台，讓開發者能夠充分利用 NVIDIA GPU 的計算能力(NVIDIA 專用)，進行高效的計算任務處理</li></ul></li><li><p>OpenCL (Open Computing Language)</p><ul><li>用於編寫在多種處理器上運行的程序，包括 CPU、GPU、DSP（數字訊號處理器）和其他類型的處理器，主要用於通用計算，特別是那些可以利用平行計算的任務</li></ul></li></ul><h1 id="從-GPU-到-GPGPU"><a href="#從-GPU-到-GPGPU" class="headerlink" title="從 GPU 到 GPGPU"></a>從 GPU 到 GPGPU</h1><p>CPU 單核心性能的提高受到<strong>功耗</strong>、<strong>存取記憶體速度</strong>、<strong>設計複雜度</strong>等多重瓶頸的限制，而 GPU 僅侷限於處理圖形繪製的計算任務，是極大的資源浪費。</p><p>2006 年，NVIDIA 公布了統一著色器架構(unified shader architecture)，從此 GPU 進入了通用計算時代。 傳統的 GPU 通常採用固定比例的頂點著色器和像素著色器單元，但這種作法會導致單元使用率低下的問題。為解決這一問題，統一著色器架構整合了頂點著色器和像素著色器，這種無差別的著色器設計，使 GPU 成為一個多核心的通用處理器。</p><h1 id="計算模型"><a href="#計算模型" class="headerlink" title="計算模型"></a>計算模型</h1><h3 id="SIMT-Single-Instruction-Multiple-Threads-，單指令多執行緒"><a href="#SIMT-Single-Instruction-Multiple-Threads-，單指令多執行緒" class="headerlink" title="SIMT (Single Instruction Multiple Threads)，單指令多執行緒"></a>SIMT (Single Instruction Multiple Threads)，單指令多執行緒</h3><ul><li>一行指令被多個執行緒同時執行，與 SIMD 平行類似，在 GPGPU 中被稱為 SIMT 計算模型</li><li>ex: 矩陣乘法<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">// 從輸入矩陣 A 和 B 中讀取一部份向量 a, b</span><br><span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; N; i++)&#123;<br>  c += a[i] + b[i];<br>&#125;<br><span class="hljs-comment">// 將 c 寫回結果矩陣 C 的對應位置中</span><br></code></pre></td></tr></table></figure></li><li>CUDA 為 SIMT 計算模型引入 thread grid、thread block、thread，對等地，OpenCL 為 SIMT 計算模型引入 NDRange、work-group、work-item</li></ul><h3 id="裝置端和核心函數"><a href="#裝置端和核心函數" class="headerlink" title="裝置端和核心函數"></a>裝置端和核心函數</h3><p>在 CUDA 和 OpenCL 模型中，會把程式劃分成<strong>主機端 (host)</strong> 和<strong>裝置端 (device)</strong> ，分別在 CPU 和 GPGPU 上執行。 CPU 硬體執行主機端程式，GPGPU 硬體將根據程式設計人員給定的執行緒網格 (上面提到的 thread grid) 組織方式等參數，將裝置端程式進一步分發到執行緒中。每個執行緒執行相同的程式，但是是不同的資料。</p><p>以上面的矩陣乘法為例，主機端程式分成三個步驟：</p><h4 id="資料複製"><a href="#資料複製" class="headerlink" title="資料複製"></a>資料複製</h4><ul><li>CPU 將主記憶體資料複製到 GPGPU。主機端程式會先完成 GPGPU 的待處理資料宣告和前置處理，然後 CPU 呼叫 API 對 GPGPU 進行初始化和控制。<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// 主記憶體的資料</span><br><span class="hljs-type">float</span> A[M * N], B[N * K], C[M * K];<br><span class="hljs-comment">// GPGPU 裝置端全域記憶體</span><br><span class="hljs-type">float</span>* d_A, * d_B, * d_C;<br><br><span class="hljs-type">int</span> size = M * N * <span class="hljs-keyword">sizeof</span>(<span class="hljs-type">float</span>);<br><span class="hljs-comment">// CPU 呼叫 API 分配裝置端空間 </span><br>cudaMalloc((<span class="hljs-type">void</span>**)&amp; d_A, size);<br><span class="hljs-comment">// CPU 呼叫 API 控制 CPU 和 GPGPU 之間的通訊</span><br><span class="hljs-comment">// 將資料從主機端記憶體複製到 GPGPU 全域記憶體裡面</span><br>cudaMemcpy(d_A, A, size, cudaMemcpyHostToDevice);<br><br>size = N * K * <span class="hljs-keyword">sizeof</span>(<span class="hljs-type">float</span>);<br>cudaMalloc((<span class="hljs-type">void</span>**)&amp; d_B, size);<br>cudaMemcpy(d_B, B, size, cudaMemcpyHostToDevice);<br><br>size = M * K * <span class="hljs-keyword">sizeof</span>(<span class="hljs-type">float</span>);<br>cudaMalloc((<span class="hljs-type">void</span>**)&amp; d_C, size);<br></code></pre></td></tr></table></figure></li></ul><h4 id="GPGPU-啟動"><a href="#GPGPU-啟動" class="headerlink" title="GPGPU 啟動"></a>GPGPU 啟動</h4><ul><li>CPU 喚醒 GPGPU 執行緒進行運算，並將執行緒的組織方式和參數傳入 GPGPU 中。<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">unsigned</span> T_size = <span class="hljs-number">16</span>;<br>dim3 <span class="hljs-title function_">gridDim</span><span class="hljs-params">(M / T_size, K / T_size, <span class="hljs-number">1</span>)</span>;<br>dim3 <span class="hljs-title function_">blockDim</span><span class="hljs-params">(T_size, T_size, <span class="hljs-number">1</span>)</span>;<br><br><span class="hljs-comment">/// 喚醒對應的裝置端程式</span><br><span class="hljs-comment">/// 啟動名為 basic_mul 的裝置端函數</span><br>basic_mul &lt;&lt;&lt; gridDim, blockDim &gt;&gt;&gt; (d_A, d_B, d_C);<br><br><span class="hljs-comment">// 因為 CPU 和 GPGPU 是非同步執行，要使用此函數讓他們同步</span><br><span class="hljs-comment">// 不然可能 CPU 還沒等到 GPGPU 算完就繼續跑</span><br>cudaDeviceSynchronize();<br></code></pre></td></tr></table></figure></li></ul><h4 id="資料寫回"><a href="#資料寫回" class="headerlink" title="資料寫回"></a>資料寫回</h4><ul><li>GPGPU 運算完畢，並將結果寫回主機端記憶體中。<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c">size = M * K * <span class="hljs-keyword">sizeof</span>(<span class="hljs-type">float</span>);<br><span class="hljs-comment">// 將裝置端記憶體 d_C 傳回 主機端記憶體 C</span><br>cudaMemcpy(C, d_C, size, cudaMemcpyDeviceToHost);<br><br><span class="hljs-comment">// GPGPU 裝置端空間釋放</span><br>cudaFree(d_A);<br>cudaFree(d_B);<br>cudaFree(d_C);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br></code></pre></td></tr></table></figure></li></ul><p>裝置端程式常常由多個函數組成，這些函數被稱為**核心函數 (kernel)**，這些核心函數會被分配到每個 GPGPU 的執行緒中執行。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// __global__ 關鍵字定義了這個函數會作為核心函數在 GPGPU 上跑</span><br>__global__ <span class="hljs-type">void</span> <span class="hljs-title function_">basic_mul</span><span class="hljs-params">(<span class="hljs-type">float</span>* d_A, <span class="hljs-type">float</span>* d_B, <span class="hljs-type">float</span>* d_C)</span>&#123;<br>  <span class="hljs-type">int</span> row = threadIdx.x + blockIdx.x * blockDim.x;<br>  <span class="hljs-type">int</span> col = threadIdx.y + blockIdx.y * blockDim.y;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; N; i++)&#123;<br>    d_C[row * K + col] += d_A[row * N + i] * d_B[col + i * k];<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="執行緒模型"><a href="#執行緒模型" class="headerlink" title="執行緒模型"></a>執行緒模型</h1><h3 id="執行緒組織結構"><a href="#執行緒組織結構" class="headerlink" title="執行緒組織結構"></a>執行緒組織結構</h3><p>上面提到，主機端在啟動核心函數時，利用 &lt;&lt;&lt;&gt;&gt;&gt; 向 GPGPU 傳送兩個參數 gridDim 和 blockDim，這兩個參數構造了 GPGPU 計算所採用的執行緒結構。</p><p>CUDA 和 OpenCL 都採用了層次化的執行緒結構，就是前面說的 thread grid、thread block、thread 和 NDRange、work-group、work-item，一一對應。同一個 Block 內的 Thread 可以互相溝通。</p><p><img src="https://www.researchgate.net/publication/328752788/figure/fig3/AS:689781692432384@1541468179263/CUDA-programming-grid-of-thread-blocks-Source-NVIDIA.png" alt="CUDA 的層次化執行緒結構"></p><h3 id="資料索引"><a href="#資料索引" class="headerlink" title="資料索引"></a>資料索引</h3><p>基於上面的執行緒層次，我們需要知道 Thread 在 Grid 中的具體位置，才能讀取合適的資料執行對應的計算。上面例子的 blockIdx、threadIdx 就是用來決定 Thread 的位置。</p>]]></content>
    
    
    <categories>
      
      <category>GPU</category>
      
    </categories>
    
    
    <tags>
      
      <tag>gpu</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>test-page</title>
    <link href="/notes/2024/02/08/test-page/"/>
    <url>/notes/2024/02/08/test-page/</url>
    
    <content type="html"><![CDATA[<h3 id="TEST"><a href="#TEST" class="headerlink" title="TEST"></a>TEST</h3>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Push React App to Github Pages</title>
    <link href="/notes/2024/02/08/react-github-pages/"/>
    <url>/notes/2024/02/08/react-github-pages/</url>
    
    <content type="html"><![CDATA[<ul><li><p>安裝套件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm install gh-pages --save-dev<br>yarn add -D gh-pages<br></code></pre></td></tr></table></figure></li><li><p>在 package.json 裡面新增</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;homepage&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&#123;url to your website&#125;&quot;</span><br>  <span class="hljs-attr">&quot;scripts&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;predeploy&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;npm run build&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;deploy&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;gh-pages -d build&quot;</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure></li><li><p>要 push 的時候就打以下指令，就可以自動 push 到 branch gh-pages</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm run deploy<br></code></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <categories>
      
      <category>React</category>
      
    </categories>
    
    
    <tags>
      
      <tag>React</tag>
      
      <tag>Gtihub</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>UE5 Resources</title>
    <link href="/notes/2024/01/31/ue5-resources/"/>
    <url>/notes/2024/01/31/ue5-resources/</url>
    
    <content type="html"><![CDATA[<ol><li><a href="https://zhuanlan.zhihu.com/p/639001043">理解 FrameGraph</a></li><li><a href="https://zhuanlan.zhihu.com/p/637889120">UE5 Render Dependency Graph-实用指南</a></li><li><a href="https://zhuanlan.zhihu.com/p/551981932">剖析虚幻渲染体系（08）- Shader体系（02）</a></li><li><a href="https://www.bilibili.com/video/BV18K411Z7Jg/?spm_id_from=333.337.search-card.all.click&vd_source=cdd130c5068c54677e0ec511d6834ece">[UOD2022]Rendering Dependency Graph解析 | Epic 陈拓</a></li><li><a href="https://zhuanlan.zhihu.com/p/73016473">游戏引擎随笔 0x05：现代图形 API 讲义</a></li><li><a href="https://zhuanlan.zhihu.com/p/438784425">UE4性能分析工具Stats</a></li><li><a href="https://frankorz.com/2021/04/17/compute-shader/index.html">Compute Shader 简介 - 萤火之森</a></li><li><a href="https://michaeljcole.github.io/wiki.unrealengine.com/HLSL_Shaders/">HLSL Shaders</a></li><li><a href="https://github.com/Temaran/UnrealEngineShaderPluginDemo">UnrealEngineShaderPluginDemo</a></li><li><a href="https://zhuanlan.zhihu.com/p/624322431">UE渲染学习(4)ComputeShader</a></li><li><a href="https://www.bilibili.com/read/cv8755619/">Unreal Compute Shader 使用流程笔记</a></li><li><a href="https://zhuanlan.zhihu.com/p/608724638?utm_id=0">UE5中的 Compute Shader使用及详解（二）</a></li><li><a href="https://inlet511.github.io/posts/rdg-05-structured-buffer/#16-%E5%88%9B%E5%BB%BAsrv%E8%A7%86%E5%9B%BE">RDG 05 StructuredBuffer的用法</a></li><li><a href="https://zhuanlan.zhihu.com/p/379638061">UE4 RHICmdList</a></li><li><a href="https://zhuanlan.zhihu.com/p/377411777">Unreal Engine 4 Materials Tutorial——虚幻4引擎教程——材质</a></li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>UE5</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Unreal Engine 5 - Render Dependency Graph (RDG)</title>
    <link href="/notes/2024/01/30/ue5-rdg/"/>
    <url>/notes/2024/01/30/ue5-rdg/</url>
    
    <content type="html"><![CDATA[<h3 id="RDG-是什麼"><a href="#RDG-是什麼" class="headerlink" title="RDG 是什麼"></a>RDG 是什麼</h3><dl><dt><a href="https://docs.unrealengine.com/4.26/en-US/ProgrammingAndScripting/Rendering/RenderDependencyGraph/">官方文件</a>提到</dt><dd>渲染依賴圖（Rendering Dependency Graph，RDG）是一種基於圖形的排程系統，旨在對渲染管線進行整幀優化。</dd></dl><h4 id="基本介紹"><a href="#基本介紹" class="headerlink" title="基本介紹"></a>基本介紹</h4><ul><li><p>RDG 於 Unreal 4.22 引入</p></li><li><p>前身是 Frame Graph ，在 2017 年的 GDC 中由 <a href="https://zh.wikipedia.org/zh-tw/%E5%AF%92%E9%9C%9C%E5%BC%95%E6%93%8E">Frostbite Engine</a> 提出</p></li><li><p>RDG 的概念是不在 GPU 上立即執行通道 (Pass)，而是先收集所有需要渲染的通道，然後按照它們之間的依賴關係順序對圖表進行編譯和執行。過程中，系統會執行各種裁剪和優化操作。</p></li></ul><h4 id="為什麼要用-RDG？"><a href="#為什麼要用-RDG？" class="headerlink" title="為什麼要用 RDG？"></a>為什麼要用 RDG？</h4><ul><li><p>Render pipeline 越來越複雜，導致難以管理且性能不好</p><ul><li>隨著硬體性能日漸提升，各大廠商為了渲染出更出色的畫面效果，render pipeline 也日趨複雜。</li></ul></li></ul><p><img src="/notes/images/ue5-rdg/rendering-systems-overview.png" alt="rendering systems overview" title="Rendering systems overview"></p><ul><li><p>硬體的體系結構以及圖形 API 的優化擴展無法得到充分的利用</p><ul><li><p>現代圖形API (如DirectX 12、Vulkan 和 Metal 2) 與傳統圖形API (如DirectX 11、OpenGL) 的主要區別在於現代圖形 API 將更多的 GPU 管理的責任轉移到應用程式的開發者身上，能夠更有效的利用有限的 GPU 資源，進而提升效能。</p><ul><li><a href="https://zhuanlan.zhihu.com/p/73016473">傳統 API 和現代 API 的介紹</a></li></ul></li><li><p>RDG 與現代圖形 API 的能力相結合，使 RDG 能夠在幕後執行複雜的排程任務：</p><ol><li>執行異步計算通道的自動排程和隔離。</li><li>在幀的不相交間隔期間，使資源之間的別名 (Aliasing) 記憶體保持活躍狀態。</li><li>盡早啟動屏障和佈局轉換，避免管線延遲。</li></ol></li></ul></li></ul><h3 id="RDG-的原理"><a href="#RDG-的原理" class="headerlink" title="RDG 的原理"></a>RDG 的原理</h3><p><img src="/notes/images/ue5-rdg/rdg-in-engine.png" alt="rdg in the game engine" title="RDG in the game engine"></p><p>位於 RHI 和 Render Pass 的中間，RDG 作為 Pass 管理器，在搜集資源描述訊息後，對 Pass 和資源進行分析，並結合硬體特性，以最優的方式執行 Pass，主要有三個階段：</p><ol><li><p>Setup</p><ul><li>蒐集 pass 的訊息(主要是該 Pass 使用到的資源)</li></ul></li><li><p>Compile</p><ul><li>Render Graph 的生成以及分析 (包含 Pass culling、Resources state 的最終生成、Async Compute 優化等等)</li></ul></li><li><p>Execute</p><ul><li>將 Command 提交到 CommandList (包含設置 Barrier、平行優化等)</li></ul></li></ol><p><img src="/notes/images/ue5-rdg/rdg-stages.png" alt="Three stages of RDG" title="Three stages of RDG"></p><h3 id="FRDGBuilder"><a href="#FRDGBuilder" class="headerlink" title="FRDGBuilder"></a>FRDGBuilder</h3><ul><li>RDG 系统的心臟和驅動器，同時也是管家，負責儲存數據、處理狀態轉換、自動管理資源生命週期和屏障 (barrier)、裁剪無效資源，和收集、編譯、執行Pass，提取紋理或緩衝等等功能。</li></ul><h3 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h3><ul><li><a href="https://zhuanlan.zhihu.com/p/554758862">剖析虚幻渲染体系（11）- RDG</a></li><li><a href="https://docs.unrealengine.com/4.26/en-US/ProgrammingAndScripting/Rendering/RenderDependencyGraph/">Rendering Dependency Graph</a></li><li><a href="https://zhuanlan.zhihu.com/p/637889120">UE5 Render Dependency Graph-实用指南</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>UE5</category>
      
      <category>Render</category>
      
    </categories>
    
    
    <tags>
      
      <tag>UE5</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Flutter GPS background</title>
    <link href="/notes/2024/01/25/flutter-gps/"/>
    <url>/notes/2024/01/25/flutter-gps/</url>
    
    <content type="html"><![CDATA[<blockquote><p>官方文件: <a href="https://pub.dev/packages/background_locator_2/example">https://pub.dev/packages/background_locator_2/example</a><br>Github: <a href="https://github.com/Yukams/background_locator_fixed">https://github.com/Yukams/background_locator_fixed</a></p></blockquote><h3 id="介紹"><a href="#介紹" class="headerlink" title="介紹"></a>介紹</h3><p>這個 package 的目的是讓 app 可以順利定位，取得定位的相關訊息 (經緯度、方向、速度等)，最重要的是它也支援<strong>背景運行</strong>，也就是當你 kill 這個 app (在 app switcher 裡 swipe up app)，這個 app 依然在背景中運行，並顯示在手機的 notification drawer 裡來提醒使用者。</p><p><img src="/notes/images/flutter-gps/notification.png" alt="Notification"></p><p>由於 <code>location_permissions</code> 似乎不再更新了，所以在測試的時候都會有問題，無法正確 import package，所以後來我改用 <code>permission_handler</code>，除了詢問 location 的權限，同時也可以要求 notification 的權限。</p><h3 id="程式碼"><a href="#程式碼" class="headerlink" title="程式碼"></a>程式碼</h3><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;dart:async&#x27;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;dart:isolate&#x27;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;dart:ui&#x27;</span>;<br><br><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;package:background_locator_2/background_locator.dart&#x27;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;package:background_locator_2/location_dto.dart&#x27;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;package:background_locator_2/settings/android_settings.dart&#x27;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;package:background_locator_2/settings/ios_settings.dart&#x27;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;package:background_locator_2/settings/locator_settings.dart&#x27;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;package:flutter/material.dart&#x27;</span>;<br><br><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;package:permission_handler/permission_handler.dart&#x27;</span>;<br><br><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;file_manager.dart&#x27;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;location_callback_handler.dart&#x27;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;location_service_repository.dart&#x27;</span>;<br><br><span class="hljs-keyword">void</span> main() =&gt; runApp(MyApp());<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyApp</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">StatefulWidget</span> </span>&#123;<br>  <span class="hljs-meta">@override</span><br>  _MyAppState createState() =&gt; _MyAppState();<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">_MyAppState</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">State</span>&lt;<span class="hljs-title">MyApp</span>&gt; </span>&#123;<br>  ReceivePort port = ReceivePort();<br><br>  <span class="hljs-built_in">String</span> logStr = <span class="hljs-string">&#x27;&#x27;</span>;<br>  <span class="hljs-built_in">bool</span> isRunning = <span class="hljs-keyword">false</span>;<br><br>  <span class="hljs-meta">@override</span><br>  <span class="hljs-keyword">void</span> initState() &#123;<br>    <span class="hljs-keyword">super</span>.initState();<br><br>    <span class="hljs-keyword">if</span> (IsolateNameServer.lookupPortByName(LocationServiceRepository.isolateName) != <span class="hljs-keyword">null</span>)<br>    &#123;<br>          IsolateNameServer.removePortNameMapping(<br>          LocationServiceRepository.isolateName);<br>    &#125;<br><br>    IsolateNameServer.registerPortWithName(port.sendPort, LocationServiceRepository.isolateName);<br><br>    port.listen((<span class="hljs-built_in">dynamic</span> data) <span class="hljs-keyword">async</span> &#123;<br>        <span class="hljs-keyword">await</span> updateUI(data);<br>      &#125;,<br>    );<br>    initPlatformState();<br>  &#125;<br><br>  <span class="hljs-meta">@override</span><br>  <span class="hljs-keyword">void</span> dispose() &#123;<br>    <span class="hljs-keyword">super</span>.dispose();<br>  &#125;<br><br>  Future&lt;<span class="hljs-keyword">void</span>&gt; updateUI(<span class="hljs-built_in">dynamic</span> data) <span class="hljs-keyword">async</span> &#123;<br>    <span class="hljs-keyword">final</span> log = <span class="hljs-keyword">await</span> FileManager.readLogFile();<br><br>    <span class="hljs-keyword">if</span> (data != <span class="hljs-keyword">null</span>)&#123;<br>      <span class="hljs-keyword">await</span> _updateNotificationText(data);<br>    &#125;<br><br>    setState(()&#123;<br>      logStr = log;<br>    &#125;);<br>  &#125;<br><br>  Future&lt;<span class="hljs-keyword">void</span>&gt; _updateNotificationText(<span class="hljs-built_in">Map</span>&lt;<span class="hljs-built_in">String</span>, <span class="hljs-built_in">dynamic</span>&gt; data) <span class="hljs-keyword">async</span> &#123;<br>    <span class="hljs-keyword">await</span> BackgroundLocator.updateNotificationText(<br>        title: <span class="hljs-string">&quot;new location received&quot;</span>,<br>        msg: <span class="hljs-string">&quot;<span class="hljs-subst">$&#123;DateTime.now()&#125;</span>&quot;</span>,<br>        bigMsg: <span class="hljs-string">&quot;<span class="hljs-subst">$&#123;data[<span class="hljs-string">&#x27;latitude&#x27;</span>]&#125;</span>, <span class="hljs-subst">$&#123;data[<span class="hljs-string">&#x27;longitude&#x27;</span>]&#125;</span>&quot;</span><br>    );<br>  &#125;<br><br>  Future&lt;<span class="hljs-keyword">void</span>&gt; initPlatformState() <span class="hljs-keyword">async</span> &#123;<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Initializing...&#x27;</span>);<br>    <span class="hljs-keyword">await</span> BackgroundLocator.initialize();<br>    logStr = <span class="hljs-keyword">await</span> FileManager.readLogFile();<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Initialization done&#x27;</span>);<br>    <span class="hljs-keyword">final</span> _isRunning = <span class="hljs-keyword">await</span> BackgroundLocator.isServiceRunning();<br>    setState(() &#123;<br>      isRunning = _isRunning;<br>    &#125;);<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Running <span class="hljs-subst">$&#123;isRunning.toString()&#125;</span>&#x27;</span>);<br>  &#125;<br><br>  <span class="hljs-meta">@override</span><br>  Widget build(BuildContext context) &#123;<br>    <span class="hljs-keyword">final</span> start = SizedBox(<br>      width: <span class="hljs-built_in">double</span>.maxFinite,<br>      child: ElevatedButton(<br>        child: Text(<span class="hljs-string">&#x27;Start&#x27;</span>),<br>        onPressed: () &#123;<br>          _onStart();<br>        &#125;,<br>      ),<br>    );<br>    <span class="hljs-keyword">final</span> stop = SizedBox(<br>      width: <span class="hljs-built_in">double</span>.maxFinite,<br>      child: ElevatedButton(<br>        child: Text(<span class="hljs-string">&#x27;Stop&#x27;</span>),<br>        onPressed: () &#123;<br>          onStop();<br>        &#125;,<br>      ),<br>    );<br>    <span class="hljs-keyword">final</span> clear = SizedBox(<br>      width: <span class="hljs-built_in">double</span>.maxFinite,<br>      child: ElevatedButton(<br>        child: Text(<span class="hljs-string">&#x27;Clear Log&#x27;</span>),<br>        onPressed: () &#123;<br>          FileManager.clearLogFile();<br>          setState(() &#123;<br>            logStr = <span class="hljs-string">&#x27;&#x27;</span>;<br>          &#125;);<br>        &#125;,<br>      ),<br>    );<br>    <span class="hljs-built_in">String</span> msgStatus = <span class="hljs-string">&quot;-&quot;</span>;<br>    <span class="hljs-keyword">if</span> (isRunning != <span class="hljs-keyword">null</span>) &#123;<br>      <span class="hljs-keyword">if</span> (isRunning) &#123;<br>        msgStatus = <span class="hljs-string">&#x27;Is running&#x27;</span>;<br>      &#125; <span class="hljs-keyword">else</span> &#123;<br>        msgStatus = <span class="hljs-string">&#x27;Is not running&#x27;</span>;<br>      &#125;<br>    &#125;<br>    <span class="hljs-keyword">final</span> status = Text(<span class="hljs-string">&quot;Status: <span class="hljs-subst">$msgStatus</span>&quot;</span>);<br><br>    <span class="hljs-keyword">final</span> log = Text(<br>      logStr,<br>    );<br><br>    <span class="hljs-keyword">return</span> MaterialApp(<br>      home: Scaffold(<br>        appBar: AppBar(<br>          title: <span class="hljs-keyword">const</span> Text(<span class="hljs-string">&#x27;Flutter background Locator&#x27;</span>),<br>        ),<br>        body: Container(<br>          width: <span class="hljs-built_in">double</span>.maxFinite,<br>          padding: <span class="hljs-keyword">const</span> EdgeInsets.all(<span class="hljs-number">22</span>),<br>          child: SingleChildScrollView(<br>            child: Column(<br>              crossAxisAlignment: CrossAxisAlignment.center,<br>              children: &lt;Widget&gt;[start, stop, clear, status, log],<br>            ),<br>          ),<br>        ),<br>      ),<br>    );<br>  &#125;<br><br>  <span class="hljs-keyword">void</span> onStop() <span class="hljs-keyword">async</span> &#123;<br>    <span class="hljs-keyword">await</span> BackgroundLocator.unRegisterLocationUpdate();<br>    <span class="hljs-keyword">final</span> _isRunning = <span class="hljs-keyword">await</span> BackgroundLocator.isServiceRunning();<br>    setState(() &#123;<br>      isRunning = _isRunning;<br>    &#125;);<br>  &#125;<br><br>  <span class="hljs-keyword">void</span> _onStart() <span class="hljs-keyword">async</span> &#123;<br>    <span class="hljs-keyword">if</span> (!<span class="hljs-keyword">await</span> _checkNotificationPermission()) <span class="hljs-keyword">return</span>;<br>    <span class="hljs-keyword">if</span>(!<span class="hljs-keyword">await</span> _checkLocationPermission()) <span class="hljs-keyword">return</span>;<br>    <span class="hljs-keyword">await</span> _startLocator();<br>    <span class="hljs-keyword">final</span> _isRunning = <span class="hljs-keyword">await</span> BackgroundLocator.isServiceRunning();<br><br>    setState(() &#123;<br>      isRunning = _isRunning;<br>    &#125;);<br>  &#125;<br><br>  Future&lt;<span class="hljs-built_in">bool</span>&gt; _checkLocationPermission() <span class="hljs-keyword">async</span> &#123;<br>    Permission _permission = Permission.location;<br>    PermissionStatus _status = <span class="hljs-keyword">await</span> _permission.request();<br>    <span class="hljs-keyword">if</span> (_status.isPermanentlyDenied) &#123;<br>      <span class="hljs-keyword">await</span> openAppSettings();<br>    &#125;<br>    <span class="hljs-keyword">return</span> _status.isGranted;<br>  &#125;<br><br>  Future&lt;<span class="hljs-built_in">bool</span>&gt; _checkNotificationPermission() <span class="hljs-keyword">async</span> &#123;<br>    Permission _permission = Permission.notification;<br>    PermissionStatus _status = <span class="hljs-keyword">await</span> _permission.request();<br>    <span class="hljs-keyword">if</span> (_status.isPermanentlyDenied) &#123;<br>      <span class="hljs-keyword">await</span> openAppSettings();<br>    &#125;<br>    <span class="hljs-keyword">return</span> _status.isGranted;<br>  &#125;<br><br>  Future&lt;<span class="hljs-keyword">void</span>&gt; _startLocator() <span class="hljs-keyword">async</span>&#123;<br><br>    <span class="hljs-built_in">Map</span>&lt;<span class="hljs-built_in">String</span>, <span class="hljs-built_in">dynamic</span>&gt; data = &#123;<span class="hljs-string">&#x27;countInit&#x27;</span>: <span class="hljs-number">1</span>&#125;;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">await</span> BackgroundLocator.registerLocationUpdate(<br>        LocationCallbackHandler.callback,<br>        initCallback: LocationCallbackHandler.initCallback,<br>        initDataCallback: data,<br>        disposeCallback: LocationCallbackHandler.disposeCallback,<br>        iosSettings: IOSSettings(<br>            accuracy: LocationAccuracy.NAVIGATION,<br>            distanceFilter: <span class="hljs-number">0</span>,<br>            stopWithTerminate: <span class="hljs-keyword">true</span><br>        ),<br>        autoStop: <span class="hljs-keyword">false</span>,<br>        androidSettings: AndroidSettings(<br>            accuracy: LocationAccuracy.NAVIGATION,<br>            interval: <span class="hljs-number">1</span>,<br>            distanceFilter: <span class="hljs-number">0</span>,<br>            client: LocationClient.google,<br>            androidNotificationSettings: AndroidNotificationSettings(<br>                notificationChannelName: <span class="hljs-string">&#x27;Location tracking&#x27;</span>,<br>                notificationTitle: <span class="hljs-string">&#x27;Start Location Tracking&#x27;</span>,<br>                notificationMsg: <span class="hljs-string">&#x27;Track location in background&#x27;</span>,<br>                notificationBigMsg:<br>                <span class="hljs-string">&#x27;Background location is on to keep the app up-tp-date with your location. This is required for main features to work properly when the app is not running.&#x27;</span>,<br>                notificationIcon: <span class="hljs-string">&#x27;&#x27;</span>,<br>                notificationIconColor: Colors.grey,<br>                notificationTapCallback:<br>                LocationCallbackHandler.notificationCallback)<br>        )<br>    );<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>在 AndroidMaifest.xml 裡面要加上：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">uses-permission</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.permission.POST_NOTIFICATIONS&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">uses-permission</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.permission.ACCESS_FINE_LOCATION&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">uses-permission</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.permission.ACCESS_BACKGROUND_LOCATION&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">uses-permission</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.permission.WAKE_LOCK&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">uses-permission</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.permission.FOREGROUND_SERVICE&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure><!-- ### Demo[![](https://markdown-videos-api.jorgenkh.no/youtube/euh3HlNAERs)](https://youtu.be/euh3HlNAERs) -->]]></content>
    
    
    <categories>
      
      <category>Flutter</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Flutter</tag>
      
      <tag>App</tag>
      
      <tag>ECHO</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Recursion</title>
    <link href="/notes/2023/09/13/recursion/"/>
    <url>/notes/2023/09/13/recursion/</url>
    
    <content type="html"><![CDATA[<h2 id="Substitution-Method"><a href="#Substitution-Method" class="headerlink" title="Substitution Method"></a>Substitution Method</h2><h4 id="1-T-n-2T-lfloor-n-2-rfloor-n-T-1-1"><a href="#1-T-n-2T-lfloor-n-2-rfloor-n-T-1-1" class="headerlink" title="1. $ T(n) &#x3D; 2T(\lfloor n&#x2F;2 \rfloor) + n$, $ T(1) &#x3D; 1$"></a>1. $ T(n) &#x3D; 2T(\lfloor n&#x2F;2 \rfloor) + n$, $ T(1) &#x3D; 1$</h4><ul><li>Guess $ T(n) &#x3D; O(n lgn)$</li><li>Show it by <strong>induction</strong><ul><li>for $ n &#x3D; 2$, $ T(2) &#x3D; 4$</li><li>for $ c &#x3D; 2$, $ T(2) \le c n lgn$</li></ul></li><li>Base case: $ n_0 &#x3D; 2$ hold</li><li>Induction case<ul><li>Assume the guess is true for all $ n &#x3D; 2, 3, …, k$</li><li>For $ n &#x3D; k + 1$, we have<br>$$\begin{align}<br>T(n) &amp;&#x3D; 2T(\lfloor n&#x2F;2 \rfloor) + n \newline<br>&amp;\le 2c\lfloor n&#x2F;2 \rfloor lg \lfloor n&#x2F;2 \rfloor + n \newline<br>&amp;\le c n lg n&#x2F;2 + n &#x3D; c n lgn - c n + n \newline<br>&amp;\le c n lg n<br>\end{align} $$</li></ul></li></ul><h4 id="2-T-n-T-lfloor-n-2-rfloor-T-lceil-n-2-rceil-1-T-1-1"><a href="#2-T-n-T-lfloor-n-2-rfloor-T-lceil-n-2-rceil-1-T-1-1" class="headerlink" title="2. $ T(n) &#x3D; T(\lfloor n&#x2F;2 \rfloor) + T(\lceil n&#x2F;2 \rceil) + 1$, $ T(1) &#x3D; 1$"></a>2. $ T(n) &#x3D; T(\lfloor n&#x2F;2 \rfloor) + T(\lceil n&#x2F;2 \rceil) + 1$, $ T(1) &#x3D; 1$</h4><ul><li>可以發現當 $  n &#x3D; 16 $ 時<br>$$<br> \begin{align}<br>   T(16) &amp;&#x3D; 2T(8) + 1 \newline<br>   &amp;&#x3D; 4T(4) + 2 + 1 \newline<br>   &amp;&#x3D; 8T(2) + 4 + 2 + 1 \newline<br>   &amp;&#x3D; 16T(1) + 8 + 4 + 2 + 1<br> \end{align}<br>$$<ul><li>當 n 夠大時， $ T(1)$ 項可以被省略，所以可以猜 $ T(n) &#x3D; O(n)$</li></ul></li><li>Base case: for $ c &#x3D; 1$, $ T(1) &#x3D; 1 \le cn &#x3D; 1$</li><li>Inductive case:<br>$$<br> \begin{align}<br>   T(n) &amp;&#x3D; T(\lfloor n&#x2F;2 \rfloor) + T(\lceil n&#x2F;2 \rceil) + 1 \newline<br>   &amp;&#x3D; cn + 1 \newline<br>   &amp;\not\le cn<br> \end{align}<br>$$</li><li>Solution:  prove a <strong>stronger</strong> statement<ul><li>$ T(n) \le cn - b$</li></ul></li><li>Base case: for $ c &#x3D; 2, ; b &#x3D; 1$, $ T(2) &#x3D; 3 \le cn - b &#x3D; 3$</li><li>Improved Inductive case:<br>$$<br> \begin{align}<br>   T(n) &amp;&#x3D; T(\lfloor n&#x2F;2 \rfloor) + T(\lceil n&#x2F;2 \rceil) + 1 \newline<br>   &amp;&#x3D; c\lfloor n&#x2F;2 \rfloor - b + c \lceil n&#x2F;2 \rceil - b + 1 \newline<br>   &amp;&#x3D; cn - b \newline<br>   &amp;\le cn ,\quad (b \ge 1)<br> \end{align}<br>$$</li></ul><h4 id="3-T-n-2T-sqrt-n-lgn"><a href="#3-T-n-2T-sqrt-n-lgn" class="headerlink" title="3. $ T(n) &#x3D; 2T(\sqrt{n}) + lgn$"></a>3. $ T(n) &#x3D; 2T(\sqrt{n}) + lgn$</h4><ul><li>Set $ m &#x3D; lgn$, we get $ T(2^m) &#x3D; 2T(2^{m&#x2F;2}) + m$</li><li>Rename $ S(m) &#x3D; T(2^m) &#x3D; T(n)$, $ S(m) &#x3D; 2S(m&#x2F;2) + m$</li><li>We solve $ S(m) &#x3D; O(mlgm)$, $ T(n) &#x3D; O(lgn \cdot lg(lgn))$</li></ul><h2 id="Recursion-Tree-Method"><a href="#Recursion-Tree-Method" class="headerlink" title="Recursion Tree Method"></a>Recursion Tree Method</h2><h4 id="1-T-n-2T-n-2-n-2-with-T-1-1"><a href="#1-T-n-2T-n-2-n-2-with-T-1-1" class="headerlink" title="1. $ T(n) &#x3D; 2T(n&#x2F;2) + n^2$, with $ T(1) &#x3D; 1$"></a>1. $ T(n) &#x3D; 2T(n&#x2F;2) + n^2$, with $ T(1) &#x3D; 1$</h4><ul><li>Expanding the terms<br>  $$<br>\begin{align}<br>  T(n) &amp;&#x3D; 2T(n&#x2F;2) + n^2 \newline<br>  &amp;&#x3D; n^2 + n^2&#x2F;2 + 4T(n&#x2F;4) \newline<br>  &amp;&#x3D; n^2 + n^2&#x2F;2 + n^2&#x2F;4 + 8T(n&#x2F;8) \newline<br>  &amp;&#x3D; … \newline<br>  &amp;&#x3D; \sum_{k&#x3D;0}^{lgn - 1} (1&#x2F;2)^k n^2 + 2^{lgn}T(1) \newline<br>  &amp;&#x3D; \Theta(n^2) + \Theta(n) &#x3D; \Theta(n^2) \newline<br>\end{align}<br>  $$</li></ul><h4 id="2-T-n-T-n-3-T-2n-3-n-with-T-1-1"><a href="#2-T-n-T-n-3-T-2n-3-n-with-T-1-1" class="headerlink" title="2. $ T(n) &#x3D; T(n&#x2F;3) + T({2n}&#x2F;3) + n$, with $ T(1) &#x3D; 1$"></a>2. $ T(n) &#x3D; T(n&#x2F;3) + T({2n}&#x2F;3) + n$, with $ T(1) &#x3D; 1$</h4><ul><li>深度是 $ log_{3&#x2F;2}n$，因為右邊項都是原本的 2&#x2F;3</li></ul><h2 id="Master-Method"><a href="#Master-Method" class="headerlink" title="Master Method"></a>Master Method</h2><ul><li>When the <strong>recurrence</strong> is in a special form, we can apply the <strong>Master Theorem</strong> to solve the recurrence immediately</li><li>$ T(n) &#x3D; aT(n&#x2F;b) + f(n)$ with $ a \ge 1$ and $ b &gt; 1$, where $ n&#x2F;b$ is either $ \lfloor n&#x2F;b \rfloor$ or $ \lceil n&#x2F;b \rceil$</li><li>There are three cases</li></ul><h4 id="1-Case-1"><a href="#1-Case-1" class="headerlink" title="1. Case 1"></a>1. Case 1</h4><ul><li>$ f(n) &#x3D; O(n^{log_b^{a} - \epsilon})$ for some constant $ \epsilon &gt; 0$</li><li>這代表的意義是，recursion 通常最後可以分成兩項<ol><li><strong>最後一層的數量</strong>，也就是 Divide</li><li><strong>每一層要做的計算</strong>，也就是 Conquer</li></ol></li><li>比較兩者，Case 1 代表 Divide 的計算量比 Conquer 大，所以可以忽略 Conquer 的時間複雜度</li><li>方程式中的 $ n^{log_b{a}}$ 代表最後一層有幾個 node，也可以看成 $ a^{log_b{n}}$，代表每一層 <strong>會增加 a</strong> 倍的 node，且總共有 $ log_b{n}$層 </li><li>Example<ol><li>$ T(n) &#x3D; 9T(n&#x2F;3) + n$, T(1) &#x3D; 1<ul><li>We have $ a &#x3D; 9, ; b &#x3D; 3, ; f(n) &#x3D; n$</li><li>Since $ n^{log_b{a}} &#x3D; n^{log_3{9}} &#x3D; n^2$, $ f(n) &#x3D; n &#x3D; O(n^{2-\epsilon})$, we have $ T(n) &#x3D; \Theta(n^2)$, where $ \epsilon &#x3D; 1$</li></ul></li><li>$ T(n) &#x3D; 8T(n&#x2F;2) + n^2$, T(1) &#x3D; 1<ul><li>We have $ a &#x3D; 8, b &#x3D; 2 and f(n) &#x3D; \Theta(n^2)$</li><li>Since $ n^{log_b{a}} &#x3D; n^{log_2{8}} &#x3D; n^3$, $ f(n) &#x3D; n^2 &#x3D; O(n^{3-\epsilon})$, we have $ T(n) &#x3D; \Theta(n^3)$, where $ \epsilon &#x3D; 1$</li></ul></li><li>$ T(n) &#x3D; 7T(n&#x2F;2) + n^2$<ul><li>We have $ a &#x3D;7, b &#x3D; 2$, $ n^{log_b{a}} &#x3D; n^{lg 7} \approx n^{2.81}$</li><li>Hence, $ T(n) &#x3D; \Theta({n^{2.81}})$</li></ul></li></ol></li></ul><h4 id="2-Case-2"><a href="#2-Case-2" class="headerlink" title="2. Case 2"></a>2. Case 2</h4><ul><li>Divide 和 Conquer 計算量一樣</li><li>If $ f(n) &#x3D; O(n^{log_b^{a}})$, then $ T(n) &#x3D; \Theta(f(n) lg n)$</li><li>Example<ol><li>$ T(n) &#x3D; T(2n&#x2F;3) + 1$  <ul><li>$ a &#x3D; 1, b &#x3D; 3&#x2F;2, f(n) &#x3D; 1$, and $ n^{log_b{a}} &#x3D; n^{log_{3&#x2F;2}{1}} &#x3D; 1$</li><li>We have $ f(n) &#x3D; \Theta(n^{log_b{a}}) &#x3D; \Theta(1)$</li><li>Thus $ T(n) &#x3D; \Theta(lg n)$</li></ul></li></ol></li></ul><h4 id="3-Case-3"><a href="#3-Case-3" class="headerlink" title="3. Case 3"></a>3. Case 3</h4><ul><li>Conquer 計算量比 Divide 大</li><li>If $ f(n) &#x3D; \Omega(n^{log_b{a} + \epsilon})$ for some constant $ \epsilon &gt; 0$</li><li>And if $ a f(n&#x2F;b \le cf(n))$ for some constant $ c &lt; 1$</li><li>Then $ T(n) &#x3D; \Theta(f(n))$</li><li>Example: $ T(n) &#x3D; 3T(n&#x2F;4) + nlgn$ <ul><li>$ a &#x3D; 3, b &#x3D; 4$, $ f(n) &#x3D; n lg n$, and $ n^{log_4{3}} &#x3D; O(n^{0.793})$</li><li>$ f(n) &#x3D; \Omega(n^{0.793 + \epsilon})$</li><li>$ af(n&#x2F;b) &#x3D; 3f(n&#x2F;4) &#x3D; 3(n&#x2F;4)lg(n&#x2F;4) \le (3&#x2F;4)n lgn &#x3D; cf(n) &#x3D; cf(n)$, for c &#x3D; 3&#x2F;4</li><li>Hence, $ T(n) &#x3D; \Theta(n lg n)$</li></ul></li></ul><h4 id="4-不能用的情況"><a href="#4-不能用的情況" class="headerlink" title="4. 不能用的情況"></a>4. 不能用的情況</h4><ol><li><p>$ f(n)$ is smaller than $ n^{log_b{a}}$ but <strong>not polynomial smaller</strong> </p><ul><li>Example: $ T(n) &#x3D; 2T(n&#x2F;2) + n&#x2F;lgn$<ul><li>$ n^{log_b{a}} &#x3D; n^{log_2{2}} &#x3D; n$, <strong>n&#x2F;lgn</strong> is smaller than <strong>n</strong> but <strong>not polynomial smaller</strong></li><li>Hence you can’t use Master theorem</li></ul></li></ul></li><li><p>$ f(n)$ is larger than $ n^{log_b{a}}$ but <strong>not polynomial larger</strong></p><ul><li>Example: $ T(n) &#x3D; 2T(n&#x2F;2) + nlgn$<ul><li>$ n^{log_b{a}} &#x3D; n^{log_2{2}} &#x3D; n$, <strong>n&#x2F;lgn</strong> is larger than <strong>n</strong> but <strong>not polynomial larger</strong></li><li>Hence you can’t use Master theorem</li></ul></li></ul></li></ol>]]></content>
    
    
    <categories>
      
      <category>Algorithm</category>
      
      <category>Recursion</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Recursion</tag>
      
      <tag>Algorithm</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Simple Discord Music Bot</title>
    <link href="/notes/2023/09/08/simple-discord-music-bot/"/>
    <url>/notes/2023/09/08/simple-discord-music-bot/</url>
    
    <content type="html"><![CDATA[<blockquote><p>一個可以撥放 Youtube playlist 的 Discord 音樂機器人<br>Source code: <a href="https://github.com/933yee/discord-simple-music-bot">https://github.com/933yee/discord-simple-music-bot</a></p></blockquote><h2 id="Structure"><a href="#Structure" class="headerlink" title="Structure"></a>Structure</h2><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs stylus">project<br>  └── bot<br>       ├── bot<span class="hljs-selector-class">.py</span><br>       ├── config<span class="hljs-selector-class">.py</span><br>       └── data<br>            └── data<span class="hljs-selector-class">.py</span><br>       └── cogs<br>            ├── commands<span class="hljs-selector-class">.py</span><br>            └── events<span class="hljs-selector-class">.py</span><br>  └── .env<br></code></pre></td></tr></table></figure><h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><h3 id="main-py"><a href="#main-py" class="headerlink" title="main.py"></a>main.py</h3><ul><li>可以藉由更改<figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs py">bot = commands.Bot(command_prefix=<span class="hljs-string">&quot;!&quot;</span>, intents=intents)<br></code></pre></td></tr></table></figure>改變指令的前綴符號</li></ul><h3 id="config-py"><a href="#config-py" class="headerlink" title="config.py"></a>config.py</h3><ul><li>讀取儲存在 .env 檔案裡面 discord 機器人的 Token</li></ul><h3 id="data-py"><a href="#data-py" class="headerlink" title="data.py"></a>data.py</h3><ul><li>全域變數，提供給 events.py、commands.py 做處理，還會記哪些伺服器正在使用這個機器人<ul><li>server_data<ul><li>記錄某伺服器待播的歌曲清單</li></ul></li><li>server_loop<ul><li>記錄某伺服器是否正在循環撥放</li></ul></li></ul></li></ul><h3 id="events-py"><a href="#events-py" class="headerlink" title="events.py"></a>events.py</h3><ul><li>處理事件的地方，像是偵測機器人的開啟、語音頻道的變化（有人離開、加入）等事件。</li></ul><h3 id="commands-py"><a href="#commands-py" class="headerlink" title="commands.py"></a>commands.py</h3><ul><li>新增指令的地方，像是：<figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-meta">@commands.command(<span class="hljs-params">description=<span class="hljs-string">&quot;Exit voice channel\n&quot;</span> <span class="hljs-string">&quot; &quot;</span></span>)</span><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">def</span> <span class="hljs-title function_">exit</span>(<span class="hljs-params">self, ctx</span>):<br>    <span class="hljs-keyword">if</span> ctx.guild.<span class="hljs-built_in">id</span> <span class="hljs-keyword">in</span> server_data:<br>        <span class="hljs-keyword">await</span> ctx.voice_client.disconnect()<br>        <span class="hljs-keyword">del</span> server_data[ctx.guild.<span class="hljs-built_in">id</span>]<br>        <span class="hljs-keyword">del</span> server_loop[ctx.guild.<span class="hljs-built_in">id</span>]<br></code></pre></td></tr></table></figure><ul><li>description 是提供給 !help 指令做介紹，簡述指令的功能</li></ul></li></ul>]]></content>
    
    
    <categories>
      
      <category>Side projects</category>
      
      <category>Discord Bot</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Side Projects</tag>
      
      <tag>Discord</tag>
      
      <tag>Bot</tag>
      
      <tag>Backend</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>學貸申請步驟</title>
    <link href="/notes/2023/09/06/nthu-loan/"/>
    <url>/notes/2023/09/06/nthu-loan/</url>
    
    <content type="html"><![CDATA[<p>到 <strong><a href="https://www.ccxp.nthu.edu.tw/ccxp/INQUIRE">校務資訊系統</a>&#x2F; 繳費單相關作業(出納組)&#x2F; 繳費單列印&#x2F; 學雜費</strong>，看學費多少，扣掉<strong>不可貸款項目</strong> (體育設施使用費)</p><h4 id="就學貸款申請表"><a href="#就學貸款申請表" class="headerlink" title="就學貸款申請表"></a>就學貸款申請表</h4><ul><li>到校務資訊系統&#x2F; 就學貸款&#x2F;就學貸款申請&#x2F;填寫就學貸款申請表，列印簽名，填好會給<strong>不可貸款項目繳費單</strong></li></ul><h4 id="臺灣銀行撥款通知書第-2-聯"><a href="#臺灣銀行撥款通知書第-2-聯" class="headerlink" title="臺灣銀行撥款通知書第 2 聯"></a>臺灣銀行撥款通知書第 2 聯</h4><ul><li>到 <strong><a href="https://sloan.bot.com.tw/customer/login/SLoanLogin.action">臺灣銀行就學貸款入口網</a></strong> 填寫申請書，填好選擇簡訊 OTP 認證對保</li></ul><h4 id="不可貸款項目繳費證明"><a href="#不可貸款項目繳費證明" class="headerlink" title="不可貸款項目繳費證明"></a>不可貸款項目繳費證明</h4>]]></content>
    
    
    <categories>
      
      <category>Others</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Others</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Time Complexity</title>
    <link href="/notes/2023/01/17/time-complexity/"/>
    <url>/notes/2023/01/17/time-complexity/</url>
    
    <content type="html"><![CDATA[<p><img src="https://miro.medium.com/v2/resize:fit:1400/1*5ZLci3SuR0zM_QlZOADv8Q.jpeg" alt="Big-O Complexity Chart"></p><h2 id="Big-O-O"><a href="#Big-O-O" class="headerlink" title="Big-O ($O$)"></a><strong>Big-O ($O$)</strong></h2><h3 id="Definition"><a href="#Definition" class="headerlink" title="Definition"></a><strong>Definition</strong></h3><ul><li>f(n) &#x3D; $O$(g(n)) iff $\exists$ <span style="color:yellow">  c, n<sub>0</sub> &gt; 0 </span> such that<span style="color:yellow"> f(n)$\le$ c $\cdot$ g(n) </span> $\forall$ <span style="color:yellow"> n $\ge$ n<sub>0</sub> </span></li></ul><h3 id="Examples"><a href="#Examples" class="headerlink" title="Examples"></a><strong>Examples</strong></h3><ul><li><dl><dt>3n+2 &#x3D; $O$(n)</dt><dd>When c&#x3D;4, n<sub>0</sub> &#x3D; 2, 3n+2 $\le$ 4n for all n $\ge$ 2.</dd></dl></li><li><dl><dt>100n+6 &#x3D; $O$(n)</dt><dd>When c&#x3D;101, n<sub>0</sub> &#x3D; 6, 100n+6 $\le$ 101n for all n $\ge$ 6. </dd></dl></li><li><dl><dt>10n<sup>2</sup>+4n+2 &#x3D; $O$(n<sup>2</sup>)</dt><dd>When c&#x3D;11, n<sub>0</sub> &#x3D; 5, 10n<sup>2</sup>+4n+2 $\le$ 11n<sup>2</sup> for all n $\ge$ 5. </dd></dl></li><li><h3 id="Properties"><a href="#Properties" class="headerlink" title="Properties"></a><strong>Properties</strong></h3><ul><li>f(n) &#x3D; $O$(g(n)) states that $O$(g(n)) is an <span style="color:yellow"> upper bound </span> of f(n), so n &#x3D; $O$(n) &#x3D; $O$(n<sup>2.5</sup>) &#x3D; $O$(n<sup>3</sup>) &#x3D; $O$(n<sup>n</sup>). However, we want g(n) <span style="color:yellow"> as small as possible </span>.</li><li>Big-O refers to <span style="color:yellow"> worst-case running time </span> of a program.</li></ul></li></ul><h2 id="Big-Omega-Omega"><a href="#Big-Omega-Omega" class="headerlink" title="Big-Omega($\Omega$)"></a><strong>Big-Omega($\Omega$)</strong></h2><h3 id="Definition-1"><a href="#Definition-1" class="headerlink" title="Definition"></a><strong>Definition</strong></h3><ul><li>f(n) &#x3D; $\Omega$(g(n)) iff $\exists$ <span style="color:yellow">  c, n<sub>0</sub> &gt; 0 </span> such that <span style="color:yellow">f(n)$\ge$ c $\cdot$ g(n) </span> $\forall$ <span style="color:yellow"> n  $\ge$ n<sub>0</sub> </span>.</li></ul><h3 id="Examples-1"><a href="#Examples-1" class="headerlink" title="Examples"></a><strong>Examples</strong></h3><ul><li><dl><dt>3n+2 &#x3D; $\Omega$(n)</dt><dd>When c&#x3D;3, n<sub>0</sub> &#x3D; 1, 3n+2 $\ge$ 3n $\forall$ n $\ge$ 1.</dd></dl></li><li><dl><dt>100n+6 &#x3D; $\Omega$(n)</dt><dd>When c&#x3D;100, n<sub>0</sub> &#x3D; 1, 100n+6 $\ge$ 100n $\forall$ n $\ge$ 1.  </dd></dl></li><li><dl><dt>10n<sup>2</sup>+4n+2 &#x3D; $\Omega$(n<sup>2</sup>)</dt><dd>When c&#x3D;1, n<sub>0</sub> &#x3D; 1, 10n<sup>2</sup>+4n+2 $\ge$ n<sup>2</sup> $\forall$ n $\ge$ 1.</dd></dl></li></ul><h3 id="Properties-1"><a href="#Properties-1" class="headerlink" title="Properties"></a><strong>Properties</strong></h3><ul><li>f(n) &#x3D; $\Omega$(g(n)) states that $\Omega$(g(n)) is a <span style="color:yellow"> lower bound </span> of f(n).</li><li>$\Omega$ refers to <span style="color:yellow"> best-case running time </span> of a program.</li></ul><h2 id="Big-Theta-theta"><a href="#Big-Theta-theta" class="headerlink" title="Big-Theta($\theta$)"></a><strong>Big-Theta($\theta$)</strong></h2><h3 id="Definition-2"><a href="#Definition-2" class="headerlink" title="Definition"></a><strong>Definition</strong></h3><ul><li>f(n) &#x3D; $\theta$(g(n)) iff <span style="color:yellow"> f(n) &#x3D; $O$(g(n)) </span> and <span style="color:yellow"> f(n) &#x3D; $\Omega$(g(n))</span>.</li></ul><h3 id="Examples-2"><a href="#Examples-2" class="headerlink" title="Examples"></a><strong>Examples</strong></h3><ul><li>3n+2 &#x3D; $\theta$(n)</li><li>100n+6 &#x3D; $\theta$(n)</li><li>10n<sup>2</sup>+4n+2 &#x3D; $\theta$(n<sup>2</sup>)</li></ul><h3 id="Properties-2"><a href="#Properties-2" class="headerlink" title="Properties"></a><strong>Properties</strong></h3><ul><li>f(n) &#x3D; $\theta$(g(n)) states that $\theta$(g(n)) is a <span style="color:yellow"> tight bound </span> of f(n).</li><li>$\theta$ refers to <span style="color:yellow"> average-case running time </span >of a program.</li></ul><h2 id="Cheat-Sheets"><a href="#Cheat-Sheets" class="headerlink" title="Cheat Sheets"></a><strong>Cheat Sheets</strong></h2><p><img src="https://pic4.zhimg.com/80/v2-bea9f0ddbc2d810e9feba3f3cc8b2b7f_720w.webp" alt="Data Structure Operations"><br><img src="https://pic4.zhimg.com/80/v2-c9074ce39abbdebd1120451bf657e67f_720w.webp" alt="Array Sorting"></p><h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><ul><li><a href="https://www.google.com/url?sa=t&rct=j&q=&esrc=s&source=web&cd=&ved=2ahUKEwjr647gjoiEAxX2hq8BHQilDfMQFnoECBEQAQ&url=https://www.bigocheatsheet.com/&usg=AOvVaw0j8XV1sZ0vh9PgRFBYyAHO&opi=89978449">Big-O Algorithm Complexity Cheat Sheet</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>Algorithm</category>
      
      <category>Time Complexity</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Algorithm</tag>
      
      <tag>Time Complexity</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
